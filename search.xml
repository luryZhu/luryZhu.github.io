<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2021 Hexo+Github+NexT 网站搭建踩坑实录</title>
    <url>/2021/07/08/blogBuild/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>搭建这个blog踩了挺多坑的，这里整理一下搭建网站的过程，和我自己遇到的一些难解的问题。<br>大概主要是甩一些链接。</p>
<p>参考<a href="https://zhuanlan.zhihu.com/p/60578464">https://zhuanlan.zhihu.com/p/60578464</a></p>
<span id="more"></span>

<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><h2 id="安装npm"><a href="#安装npm" class="headerlink" title="安装npm"></a>安装npm</h2><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><h2 id="创建GitHub仓库"><a href="#创建GitHub仓库" class="headerlink" title="创建GitHub仓库"></a>创建GitHub仓库</h2><h1 id="操作手册"><a href="#操作手册" class="headerlink" title="操作手册"></a>操作手册</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean   # 清除缓存文件等</span><br><span class="line">hexo g       # 生成页面</span><br><span class="line">hexo s       # 启动预览</span><br><span class="line">hexo d       # 部署到github</span><br><span class="line">hexo s -g    # 生成页面并启动预览</span><br></pre></td></tr></table></figure>

<h1 id="NexT主题"><a href="#NexT主题" class="headerlink" title="NexT主题"></a>NexT主题</h1><p>我目前的版本version：7.8.0<br>可以在 站点根目录-&gt;themes-&gt;package.json 看到<br>修改主题：见站点根目录-&gt;themes-&gt;_config.yml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">theme:next67 </span><br></pre></td></tr></table></figure>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>很多网上教程都是用的NexT v5的源，但这个库已经不再更新了。用旧版本会产生站点不显示author和description的情况，文章的目录导航也会出问题。<br>新版本已经整体迁移到新的<a href="https://github.com/theme-next/hexo-theme-next">github仓库</a>。  </p>
<h2 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h2><p>参考文章：<a href="https://www.jianshu.com/p/3ff20be8574c">Hexo-Next-主题优化</a></p>
<h3 id="字数统计"><a href="#字数统计" class="headerlink" title="字数统计"></a>字数统计</h3><p>最新的字数统计插件<a href="https://github.com/theme-next/hexo-symbols-count-time">symbols_count_time</a></p>
<h3 id="浏览次数"><a href="#浏览次数" class="headerlink" title="浏览次数"></a>浏览次数</h3><p>打开next主题配置文件\themes\next_config.yml，搜索找到busuanzi_count，把enable设置为true，<a href="https://blog.csdn.net/baidu_34310405/article/details/102665373">参考</a></p>
<h3 id="修改字体大小"><a href="#修改字体大小" class="headerlink" title="修改字体大小"></a>修改字体大小</h3><p>在themes\next\source\css_variables\base.styl内搜索font-size</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">$<span class="attribute">font-size</span>-smallest       = .<span class="number">8em</span>;  //阅读时间，左侧菜单文字blabla</span><br><span class="line">$<span class="attribute">font-size</span>-smaller        = .<span class="number">85em</span>;</span><br><span class="line">$<span class="attribute">font-size</span>-small          = .<span class="number">9em</span>;</span><br><span class="line">$<span class="attribute">font-size</span>-medium         = .<span class="number">95em</span>;</span><br><span class="line">$<span class="attribute">font-size</span>-large          = .<span class="number">95em</span>; //正文</span><br><span class="line">$<span class="attribute">font-size</span>-larger         = <span class="number">1.125em</span>;</span><br><span class="line">$<span class="attribute">font-size</span>-largest        = <span class="number">1.5em</span>;</span><br></pre></td></tr></table></figure>

<h3 id="文章仅显示摘要"><a href="#文章仅显示摘要" class="headerlink" title="文章仅显示摘要"></a>文章仅显示摘要</h3><p>在Next主题的_config.yml中把设置打开：(默认安装时就打开了)</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Automatically excerpt description in homepage as preamble text.</span></span><br><span class="line"><span class="attr">excerpt_description:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>在需要截断的地方加入：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure>

<h3 id="修改链接样式"><a href="#修改链接样式" class="headerlink" title="修改链接样式"></a>修改链接样式</h3><p>打开文件 themes&#x2F;next&#x2F;source&#x2F;css&#x2F;_common&#x2F;components&#x2F;post&#x2F;post.styl，在末尾添加</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0593d3</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#0593d3</span>;</span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fc6423</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: none;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#fc6423</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="代码块复制功能"><a href="#代码块复制功能" class="headerlink" title="代码块复制功能"></a>代码块复制功能</h3><p>next主题目录下的config.yml文件中<br>codeblock下面激活，<code>enable: true</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="comment"># Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic</span></span><br><span class="line">  <span class="comment"># See: https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line">  <span class="attr">highlight_theme:</span> <span class="string">normal</span></span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Show text copy result.</span></span><br><span class="line">    <span class="attr">show_result:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    <span class="attr">style:</span></span><br></pre></td></tr></table></figure>
<h3 id="版权信息"><a href="#版权信息" class="headerlink" title="版权信息"></a>版权信息</h3><p>在博客文章底部添加版权信息，<a href="https://blog.csdn.net/buknow/article/details/101216465">参考</a></p>
<ol>
<li>首先在在主题目录 <code>layout/_macro/</code> 下，新增文件my-copyright.swig ，填入以下内容：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;%- <span class="keyword">if</span> theme.my_copyright.enabled %&#125;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;my_post_copyright&quot;</span>&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center;color: #ccc;font-size:14px;&quot;</span>&gt;</span>------ 版权信息 ------<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"> <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"> </span><br><span class="line"> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>本文标题:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; page.title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>文章作者:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span> <span class="attr">title</span>=<span class="string">&quot;访问 &#123;&#123; author &#125;&#125; 的个人博客&quot;</span>&gt;</span>&#123;&#123; author &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>发布时间:<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#123;&#123; page.date.format(&quot;YYYY年MM月DD日 - HH:mm&quot;) &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>最后更新:<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#123;&#123; page.updated.format(&quot;YYYY年MM月DD日 - HH:mm&quot;) &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>原始链接:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot;</span> <span class="attr">title</span>=<span class="string">&quot;&#123;&#123; page.title &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; page.permalink &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;copy-path&quot;</span>  <span class="attr">title</span>=<span class="string">&quot;点击复制文章链接&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-clipboard&quot;</span> <span class="attr">data-clipboard-text</span>=<span class="string">&quot;&#123;&#123; page.permalink &#125;&#125;&quot;</span>  <span class="attr">aria-label</span>=<span class="string">&quot;复制成功！&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>许可协议:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">rel</span>=<span class="string">&quot;license&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://creativecommons.org/licenses/by-nc-nd/4.0/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)&quot;</span>&gt;</span>署名-非商业性使用-禁止演绎 4.0 国际<span class="tag">&lt;/<span class="name">a</span>&gt;</span> 转载请保留原文链接及作者。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>  </span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"> </span></span></span><br><span class="line"><span class="javascript"><span class="xml">   <span class="keyword">var</span> clipboard = <span class="keyword">new</span> Clipboard(<span class="string">&#x27;.fa-clipboard&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">   $(<span class="string">&quot;.fa-clipboard&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">     clipboard.on(<span class="string">&#x27;success&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">       swal(&#123;   </span></span></span><br><span class="line"><span class="javascript"><span class="xml">         <span class="attr">title</span>: <span class="string">&quot;&quot;</span>,   </span></span></span><br><span class="line"><span class="javascript"><span class="xml">         <span class="attr">text</span>: <span class="string">&#x27;复制成功&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">         <span class="attr">icon</span>: <span class="string">&quot;success&quot;</span>, </span></span></span><br><span class="line"><span class="javascript"><span class="xml">         <span class="attr">showConfirmButton</span>: <span class="literal">true</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">         &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> 	 &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">   &#125;);  </span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>注意：<ul>
<li>文章作者<code>author</code>信息是在站点根目录的<code>_config.yml</code>中修改</li>
<li>文章链接需要在站点根目录的<code>_config.yml</code>中修改<code>url: https://luryzhu.github.io</code>为自己的博客域名</li>
</ul>
</li>
</ul>
<ol start="2">
<li><p>在主题目录 <code>source/css/_common/components/post/</code> 下，新增文件<code>my-post-copyright.styl</code> ，填入以下内容：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.my_post_copyright</span> &#123;</span><br><span class="line"> <span class="attribute">padding</span>: <span class="number">1em</span> <span class="number">1.5em</span>;</span><br><span class="line"> <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#d3d3d3</span>;</span><br><span class="line"> <span class="attribute">font-size</span>: <span class="number">0.93rem</span>;</span><br><span class="line"> <span class="attribute">line-height</span>: <span class="number">1.6em</span>;</span><br><span class="line"> <span class="attribute">word-break</span>: break-all;</span><br><span class="line"> <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.4</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-tag">p</span>&#123;<span class="attribute">margin</span>:<span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line"> <span class="attribute">display</span>: inline-block;</span><br><span class="line"> <span class="attribute">width</span>: <span class="number">5.2em</span>;</span><br><span class="line"> <span class="attribute">color</span>: <span class="number">#b5b5b5</span>;</span><br><span class="line"> <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-class">.raw</span> &#123;</span><br><span class="line"> <span class="attribute">margin-left</span>: <span class="number">1em</span>;</span><br><span class="line"> <span class="attribute">width</span>: <span class="number">5em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>: <span class="number">#808080</span>;</span><br><span class="line"> <span class="attribute">border-bottom</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>: <span class="number">#fc6423</span>;</span><br><span class="line"> <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.fa-clipboard</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-class">.post-url</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line"> <span class="attribute">font-weight</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-class">.copy-path</span> &#123;</span><br><span class="line"> <span class="attribute">margin-left</span>: <span class="number">1em</span>;</span><br><span class="line"> <span class="attribute">width</span>: <span class="number">1em</span>;</span><br><span class="line"> +mobile()&#123;<span class="attribute">display</span>:none;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-class">.copy-path</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>: <span class="number">#808080</span>;</span><br><span class="line"> <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改<code>layout/_macro/post.swig</code>，在代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;footer <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;post-footer&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
<p>这段代码第一次出现之前的地方，添加如下代码段：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">     &#123;% <span class="keyword">if</span> not is_index %&#125;</span><br><span class="line">       &#123;% include <span class="string">&#x27;my-copyright.swig&#x27;</span> %&#125;</span><br><span class="line">     &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>修改<code>source/css/_common/components/post/post.styl</code>文件，在最后一行增加代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">&quot;my-post-copyright&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在主题配置文件_config.yml中添加字段</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文章末尾添加“版权声明”标记</span></span><br><span class="line"><span class="attr">my_copyright:</span></span><br><span class="line"> <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="思维导图插件"><a href="#思维导图插件" class="headerlink" title="思维导图插件"></a>思维导图插件</h3><p><a href="https://github.com/MaxChang3/hexo-markmap">Github</a> | <a href="https://markmap.js.org/repl">markmap语法</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-markmap</span><br></pre></td></tr></table></figure>

<p><strong>语法</strong>：</p>
<div class="markmap-container" style="height:300px;"><svg class="markmap-svg">{"t":"heading","d":1,"v":"markmap","c":[{"t":"heading","d":2,"v":"Link","c":[{"t":"list_item","d":3,"v":"inline code"}]}]}</svg></div>



<h1 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a>Markdown语法</h1><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><h3 id="图片引用"><a href="#图片引用" class="headerlink" title="图片引用"></a>图片引用</h3><p><code>![PicTitle](图片网络地址)</code><br>存在问题没有解决，NexT v7好像不支持图片标题</p>
<h3 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h3><p><a href="https://oss.console.aliyun.com/overview">阿里云OSS图床</a> 半年￥4.8，图个稳定<br>控制台-&gt;对象存储-&gt;bucket列表，在bucket里面上传就行了</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>单行  `语言 code`<br><code>code</code><br>多行  `&#96;&#96;语言 code`&#96;&#96;</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>网站搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/06/14/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
  </entry>
  <entry>
    <title>web前端学习路线</title>
    <url>/2021/07/14/frontend/frontEnd1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h1><div class="markmap-container" style="height:700px;"><svg class="markmap-svg">{"t":"heading","d":1,"v":"前端技能","c":[{"t":"heading","d":2,"v":"交互/设计"},{"t":"heading","d":2,"v":"语言","c":[{"t":"list_item","d":3,"v":"HTML"},{"t":"list_item","d":3,"v":"CSS"},{"t":"list_item","d":3,"v":"JavaScript"},{"t":"list_item","d":3,"v":"PHP"}]},{"t":"heading","d":2,"v":"行业标准","c":[{"t":"list_item","d":3,"v":"DOM"},{"t":"list_item","d":3,"v":"ES2015"},{"t":"list_item","d":3,"v":"HTTP"},{"t":"list_item","d":3,"v":"JSON"},{"t":"list_item","d":3,"v":"XML"}]},{"t":"heading","d":2,"v":"框架","c":[{"t":"list_item","d":3,"v":"React.js"},{"t":"list_item","d":3,"v":"Angular.js"},{"t":"list_item","d":3,"v":"jQuery"},{"t":"list_item","d":3,"v":"Vue.js"},{"t":"list_item","d":3,"v":"lodash"}]},{"t":"heading","d":2,"v":"兼容性","c":[{"t":"list_item","d":3,"v":"IE"},{"t":"list_item","d":3,"v":"CSS3新特性"},{"t":"list_item","d":3,"v":"HTML5新特性"},{"t":"list_item","d":3,"v":"ES2015"},{"t":"list_item","d":3,"v":"移动端"}]},{"t":"heading","d":2,"v":"前端工程","c":[{"t":"list_item","d":3,"v":"npm"},{"t":"list_item","d":3,"v":"webpack"},{"t":"list_item","d":3,"v":"postcss"}]},{"t":"heading","d":2,"v":"调试","c":[{"t":"list_item","d":3,"v":"浏览器调试工具"},{"t":"list_item","d":3,"v":"Fiddler"}]},{"t":"heading","d":2,"v":"团队协作","c":[{"t":"list_item","d":3,"v":"Git/SVN"},{"t":"list_item","d":3,"v":"编码规范"},{"t":"list_item","d":3,"v":"文档管理"}]},{"t":"heading","d":2,"v":"性能","c":[{"t":"list_item","d":3,"v":"优化规则"},{"t":"list_item","d":3,"v":"开发者工具"},{"t":"list_item","d":3,"v":"浏览器管理"}]},{"t":"heading","d":2,"v":"安全性","c":[{"t":"list_item","d":3,"v":"XSS"},{"t":"list_item","d":3,"v":"CSRF"},{"t":"list_item","d":3,"v":"加密解密"},{"t":"list_item","d":3,"v":"编码解码"}]},{"t":"heading","d":2,"v":"编程思想","c":[{"t":"list_item","d":3,"v":"函数式编程"},{"t":"list_item","d":3,"v":"面向对象"},{"t":"list_item","d":3,"v":"设计模式"}]}]}</svg></div>

<h1 id="浏览器架构"><a href="#浏览器架构" class="headerlink" title="浏览器架构"></a>浏览器架构</h1><p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/front-end-notes/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84.png"></p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>web前端汇总</category>
      </categories>
      <tags>
        <tag>front end</tag>
      </tags>
  </entry>
  <entry>
    <title>红宝书学习：第八章 对象，类，面向对象</title>
    <url>/2022/02/24/frontend/ch8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>红宝书第八章：对象，类，面向对象</p>
<p>本章内容</p>
<ul>
<li>理解对象 </li>
<li>理解对象创建过程 </li>
<li>理解继承 </li>
<li>理解类</li>
</ul>
<span id="more"></span>

<h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><p>JavaScript的对象是一组由<strong>键-值</strong>组成的无序集合</p>
<ul>
<li><p>对象的键都是字符串类型，值可以是<strong>任意</strong>数据类型。</p>
</li>
<li><p>其中每个键又称为对象的<strong>属性</strong>，要获取一个对象的属性，用<code>对象变量.属性名</code></p>
</li>
</ul>
<p>创建对象2种方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. new Object()，然后手动添加属性，现在不怎么用了</span></span><br><span class="line"><span class="keyword">let</span> person=<span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">person.name=<span class="string">&quot;a&quot;</span></span><br><span class="line">person.sayName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 使用对象字面量，现在都用这个，注意多个属性用逗号分隔</span></span><br><span class="line"><span class="keyword">let</span> name=<span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> person=&#123;</span><br><span class="line">    [name]:<span class="string">&quot;a&quot;</span>,</span><br><span class="line">    <span class="function"><span class="title">sayName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="属性的类型和特性"><a href="#属性的类型和特性" class="headerlink" title="属性的类型和特性"></a>属性的类型和特性</h2><p><strong>内部特性&#x2F;属性描述符</strong>：</p>
<ul>
<li>用来描述属性的特征，开发者不能在JS中直接访问，用双中括号<code>[[]]</code>表示</li>
<li>属性分为数据属性和访问器属性，有不同的内部特性</li>
</ul>
<p><strong>数据属性</strong>：p349</p>
<ul>
<li><p>包含一个保存数据值的位置。</p>
</li>
<li><p>4个特性  </p>
<ul>
<li>[[Configurable]] 是否可delete，是否可修改特性，是否可以改成访问器属性</li>
<li>[[Enumerable]] 是否可以通过for-in返回（遍历对象属性）</li>
<li>[[Writable]] 是否可修改</li>
<li>[[Value]] 值</li>
</ul>
</li>
<li><p>使用<code>Object.defineProperty()</code>方法修改</p>
</li>
</ul>
<p><strong>访问器属性</strong>：p351</p>
<ul>
<li>没有值，但是有一个getter函数或一个setter函数，可用于<strong>私有成员</strong> p351</li>
<li><a href="https://www.w3school.com.cn/js/js_object_accessors.asp">https://www.w3school.com.cn/js/js_object_accessors.asp</a></li>
<li>4个特性<ul>
<li>[[Configurable]] 是否可delete，是否可修改特性，是否可改为数据属性</li>
<li>[[Enumerable]] 是否可以通过for-in循环返回</li>
<li>[[Get]] 获取函数，在读取属性时调用</li>
<li>[[Set]] 设置函数，在写入属性时调用</li>
</ul>
</li>
<li>使用<code>Object.defineProperty()</code>方法修改，也可以直接定义set和get</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接定义set get 对象访问器</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">language_</span> : <span class="string">&quot;zh&quot;</span>,  <span class="comment">// 属性名_一般代表不想被直接访问的属性</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title">langCap</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.language_.toUpperCase()</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span> <span class="title">lang</span>(<span class="params">val</span>) &#123;</span><br><span class="line">  	<span class="built_in">this</span>.language_=val</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.langCap) <span class="comment">// ZH</span></span><br><span class="line">person.lang=<span class="string">&quot;en&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(person.langCap) <span class="comment">// EN</span></span><br></pre></td></tr></table></figure>

<h2 id="定义多个属性"><a href="#定义多个属性" class="headerlink" title="定义多个属性"></a>定义多个属性</h2><p><code>Object.defineProperty(obj, prop)</code>一次只能定义一个属性的特性</p>
<p><code>Object.defineProperties(obj, props)</code>方法可以一次定义多个属性及其特性 p352</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">language_</span>:<span class="string">&quot;zh&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperties(person, &#123;</span><br><span class="line">    <span class="attr">langCap</span> : &#123;</span><br><span class="line">        <span class="attr">get</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.language_.toUpperCase()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">lang</span> :&#123;</span><br><span class="line">        <span class="attr">set</span> : <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.language_=val</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.langCap) <span class="comment">// ZH</span></span><br><span class="line">person.lang=<span class="string">&quot;en&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(person.langCap) <span class="comment">// EN</span></span><br></pre></td></tr></table></figure>

<h2 id="读取属性的特性"><a href="#读取属性的特性" class="headerlink" title="读取属性的特性"></a>读取属性的特性</h2><p><code>Object.getOwnPropertyDescriptor(obj，prop)</code>取得指定属性的属性描述符</p>
<p><code>Object.getOwnPropertyDescriptors(obj)</code>ES2017新增，返回对象的说有属性及其描述符</p>
<h2 id="合并对象"><a href="#合并对象" class="headerlink" title="合并对象 *"></a>合并对象 *</h2><p>合并：把源对象所有的本地属性一起复制到目标对象上</p>
<p><code>Object.assign(dest,src)</code>方法，源对象复制到目标对象，返回目标对象</p>
<ul>
<li><p>本质上是执行</p>
</li>
<li><p>执行<strong>浅拷贝</strong>：p356</p>
<ul>
<li>可以有多个src，如果src之间有相同的属性，那么最终dest的那个属性使用最后一个复制的值</li>
<li>浅拷贝复制的是对象的<strong>引用</strong>，仍然指向同一个地址，所以如果属性值是对象，拷贝后修改，源和目的都会改变。</li>
<li>另，如果src中有getter函数会报错，p357。要复制getter用<code>Object.getOwnPropertyDescriptor(obj，prop)</code>和<code>Object.defineProperty(obj, prop)</code></li>
</ul>
</li>
</ul>
<h2 id="对象标识及相等判定"><a href="#对象标识及相等判定" class="headerlink" title="对象标识及相等判定 *"></a>对象标识及相等判定 *</h2><p><code>Object.is()</code>方法，ES6新增</p>
<p><code>===</code>无法判定的情况：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这些是===符合预期的情况</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> === <span class="number">1</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(&#123;&#125; === &#123;&#125;); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;2&quot;</span> === <span class="number">2</span>); <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 这些情况在不同JavaScript引擎中表现不同，但仍被认为相等</span></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="number">0</span> === -<span class="number">0</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="number">0</span> === <span class="number">0</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(-<span class="number">0</span> === <span class="number">0</span>); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 要确定NaN的相等性，必须使用极为讨厌的isNaN()</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> === <span class="literal">NaN</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="literal">NaN</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><code>Object.is()</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="literal">true</span>, <span class="number">1</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(&#123;&#125;, &#123;&#125;)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="string">&quot;2&quot;</span>, <span class="number">2</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 正确的0、-0、+0相等/不等判定</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(+<span class="number">0</span>, -<span class="number">0</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(+<span class="number">0</span>, <span class="number">0</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(-<span class="number">0</span>, <span class="number">0</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 正确的NaN相等判定</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="literal">NaN</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>检查多个值，递归调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">recursivelyCheckEqual</span>(<span class="params">x, ...rest</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">Object</span>.is(x, rest[<span class="number">0</span>]) &amp;&amp;</span><br><span class="line">        (rest.length &lt; <span class="number">2</span> || recursivelyCheckEqual(...rest));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="增强的对象语法"><a href="#增强的对象语法" class="headerlink" title="增强的对象语法"></a>增强的对象语法</h2><p>ES6新增语法糖（为了让编程更简洁优美添加的语法，比如for循环就是基于while的语法糖）</p>
<p>属性值简写</p>
<ul>
<li>属性名和变量名一样<code>obj&#123;name:name&#125;</code>时可以省略成<code>obj&#123;name&#125;</code></li>
</ul>
<p>可计算属性&#x2F;符号属性</p>
<ul>
<li><p>可以使用变量的值作为属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以前</span></span><br><span class="line"><span class="keyword">const</span> a=<span class="string">&quot;aaa&quot;</span></span><br><span class="line"><span class="keyword">let</span> obj1=&#123;&#125;</span><br><span class="line">obj1[a]=<span class="string">&quot;bbb&quot;</span></span><br><span class="line"><span class="comment">// &#123;aaa: &#x27;bbb&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可计算属性</span></span><br><span class="line"><span class="keyword">let</span> obj2=&#123;</span><br><span class="line">	[a]:<span class="string">&quot;ccc&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &#123;aaa: &#x27;ccc&#x27;&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>方法名简写</p>
<ul>
<li>以前定义对象中的方法：<code>fun : function(val)&#123;...&#125;</code></li>
<li>现在简写：<code>fun(val)&#123;...&#125;</code></li>
</ul>
<h2 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h2><p>p362</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用对象解构</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;Matt&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="number">27</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">name</span>: personName, <span class="attr">age</span>: personAge &#125; = person;</span><br><span class="line"><span class="built_in">console</span>.log(personName); <span class="comment">// Matt</span></span><br><span class="line"><span class="built_in">console</span>.log(personAge); <span class="comment">// 27</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 简写，变量名和属性名一致</span></span><br><span class="line"><span class="keyword">let</span> &#123; name, age, job&#125; = person;</span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// Matt</span></span><br><span class="line"><span class="built_in">console</span>.log(age); <span class="comment">// 27</span></span><br><span class="line"><span class="built_in">console</span>.log(job); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<p>嵌套结构p364</p>
<h1 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h1><h2 id="创建对象的方式"><a href="#创建对象的方式" class="headerlink" title="创建对象的方式 *"></a>创建对象的方式 *</h2><p>ES6正式支持类和继承</p>
<p>创建对象方式：</p>
<ul>
<li>对象字面量</li>
<li>工厂模式</li>
<li>构造函数模式</li>
<li>原型模式</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">person=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;Mark&quot;</span>,</span><br><span class="line">    <span class="function"><span class="title">sayName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><p>一个工厂能提供一个创建对象的公共接口，我们可以在其中指定我们希望被创建的工厂对象的类型，也就是工厂函数就是这个接口，调用函数，返回一个实例，不需要new</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    o.name = name;</span><br><span class="line">    o.age = age;</span><br><span class="line">    o.job = job;</span><br><span class="line">    o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    	<span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p1=createPerson(<span class="string">&quot;a&quot;</span>,<span class="number">20</span>,<span class="string">&quot;student&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> p2=createPerson(<span class="string">&quot;b&quot;</span>,<span class="number">20</span>,<span class="string">&quot;teacher&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>优点</strong>：可以创建多个类似对象</p>
<p><strong>缺点</strong>：没有解决对象标识问题（不知道新创建的对象是什么类型）</p>
<h2 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    <span class="built_in">this</span>.job = job;</span><br><span class="line">    <span class="built_in">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    	<span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p1=<span class="keyword">new</span> Person(<span class="string">&quot;a&quot;</span>,<span class="number">20</span>,<span class="string">&quot;student&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> p2=<span class="keyword">new</span> Person(<span class="string">&quot;b&quot;</span>,<span class="number">20</span>,<span class="string">&quot;teacher&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>与工厂模式的区别：</p>
<ul>
<li>没有显式的new Object；属性方法赋给了this，没有return，创建对象时要new</li>
<li>另，构造函数函数名要首字母大写比较规范</li>
<li>另另，构造函数写成函数声明或是函数表达式都可以</li>
</ul>
<p><strong>优点</strong>：可以识别创建对象的类型（访问实例的Constructor属性）</p>
<p><strong>缺点</strong>：构造函数定义的方法会在每个实例都创建一遍</p>
<ul>
<li>一种解决方法是把函数定义在对象外，对象里引用，但是这样就污染了全局作用域，不好，解决方法见原型模式</li>
</ul>
<h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式 *"></a>原型模式 *</h2><p>每个函数都会创建一个<strong>prototype属性</strong>，这个属性是一个对象，包含应该由特定引用类型的实例共享的属性和方法。使用原型对象的好处是，在它上面 定义的属性和方法可以<strong>被对象实例共享</strong>。</p>
<p>可以用函数声明或函数表达式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    instance=[]</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.name=[]</span><br><span class="line">Person.prototype.age=<span class="number">20</span></span><br><span class="line">Person.prototype.job=<span class="string">&quot;student&quot;</span></span><br><span class="line">Person.prototype.sayName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p1=<span class="keyword">new</span> Person()</span><br><span class="line"><span class="keyword">let</span> p2=<span class="keyword">new</span> Person()</span><br><span class="line"><span class="built_in">console</span>.log(p1.sayName===p2.sayName) <span class="comment">// true</span></span><br><span class="line">p1.name.push(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>通过prototype定义的属性存在在原型上，被所有实例共享</li>
<li>在构造函数内定义的属性（例中instance），只有在创建实例之后，才会为每个实例单独分配一个</li>
<li>上面两者的区别在属性值为对象时很明显：第一种只要在一个实例里修改了这个对象，原型里和其它实例里都会变，第二种就是独立的</li>
</ul>
<p>优点：解决了实例属性和方法共享的问题</p>
<p>缺点：需要在外部依次定义prototype的属性，比较繁琐（不能一次性定义，因为prototype会被设置成一个通过字面量创建的新对象，它的constructor就不指向Person了，见p386）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用字面量批量定义属性会有问题！！！不要用！！！</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Person.prototype=&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;a&quot;</span>,</span><br><span class="line">	<span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">	<span class="attr">job</span>:<span class="string">&quot;student&quot;</span>,</span><br><span class="line">	<span class="function"><span class="title">sayName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    	<span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Person.rototype.constructor</span><br></pre></td></tr></table></figure>



<h3 id="01-理解原型"><a href="#01-理解原型" class="headerlink" title="01 理解原型 *"></a>01 理解原型 *</h3><p>构造函数、原型对象和实例</p>
<ul>
<li>实例与构造函数原型之间有直接的联系，但实例与构造函数之间没有。</li>
</ul>
<p>1）<strong>构造函数创建</strong>之后，自动创建一个原型对象属性prototype，指向原型对象</p>
<ul>
<li>原型对象自动获得一个constructor属性，指向与之关联的构造函数</li>
<li>在自定义构造函数时，原型对象默认只会获得constructor属性， 其他的所有方法都继承自Object。</li>
</ul>


<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> Person.prototype); <span class="comment">// object</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype);</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">// constructor: f Person(),</span></span><br><span class="line"><span class="comment">// __proto__: Object</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.constructor === Person); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.__proto__ === <span class="built_in">Object</span>.prototype); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.__proto__.constructor === <span class="built_in">Object</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.__proto__.__proto__ === <span class="literal">null</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.__proto__);</span><br></pre></td></tr></table></figure>

<p>2）每次调用构造函数<strong>创建一个新实例</strong>（person1）</p>
<ul>
<li><p>这个实例的内部**[[Prototype]]指针<strong>就会被赋值为</strong>构造函数的 原型对象**（Person.prototype）。</p>
</li>
<li><p>脚本中没有访问这个**[[Prototype]]<strong>特性的标准方式， 但Firefox、Safari和Chrome会在每个对象上暴露</strong><code>__proto__</code>属性<strong>，通 过这个属性可以</strong>访问对象的原型**。在其他实现中，这个特性完全被 隐藏了。</p>
</li>
</ul>


<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> Person(),</span><br><span class="line">    person2 = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person1 !== Person); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(person1 !== Person.prototype); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype !== Person); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person1.__proto__ === Person.prototype); <span class="comment">// true</span></span><br><span class="line">conosle.log(person1.__proto__.constructor === Person); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person1.__proto__ === person2.__proto__); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>检查、修改构造函数、原型对象和实例的关系</p>
<ul>
<li><p><strong><code>A instanceof B</code> 运算符</strong></p>
<ul>
<li>检测构造函数的 <code>prototype</code> 属性是否出现在某个实例对象的原型链上</li>
</ul>
</li>
<li><p><strong><code>isPrototypeOf()</code> 方法</strong></p>
<ul>
<li>检测原型对象和实例的关系</li>
</ul>
</li>
<li><p><code>getPrototypeOf()</code> 方法</p>
<ul>
<li>返回实例对象对应的[[Prototype]]值</li>
</ul>
</li>
<li><p><code>setPrototypeOf()</code> 方法</p>
<ul>
<li>修改实例对象对应的[[Prototype]]值，不推荐使用</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(person1 <span class="keyword">instanceof</span> Person); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(person1 <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.isPrototypeOf(person1)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.isPrototypeOf(person2)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(person1) == Person.prototype); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="02-原型层级"><a href="#02-原型层级" class="headerlink" title="02 原型层级"></a>02 原型层级</h3><p>在通过对象访问属性：按照属性名称开始搜索。</p>
<ul>
<li>先搜索对象实例本身。如果发现该属性名称，则返回对应值。</li>
<li>如果在实例对象没有找到该属性，则沿着指针进入原型对象，然后在原型对象上找到属性后，再返回对应的值。</li>
</ul>
<p>属性遮蔽：</p>
<ul>
<li>在对象实例添加属性，则会遮蔽原型对象的同名属性（不修改原型，只屏蔽访问）</li>
<li>可以通过delete操作符删除实例的属性，回复对原型的访问</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">person1.name=<span class="string">&quot;b&quot;</span></span><br><span class="line"><span class="keyword">delete</span> person1.name</span><br></pre></td></tr></table></figure>

<p><strong>判断一个对象是否包含某个属性</strong> *</p>
<ul>
<li><p>in 操作符</p>
<ul>
<li><p>通过对象<strong>可以访问</strong>指定的属性时，返回true</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">‘name’ <span class="keyword">in</span> person1;  <span class="comment">// true  </span></span><br><span class="line">‘toString’ <span class="keyword">in</span> person1; <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>hasOwnProperty()</p>
<ul>
<li><p>属性<strong>存在于实例</strong>，返回true，存在于原型或继承的false</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">person1.hasOwnProperty(‘name’); <span class="comment">//true</span></span><br><span class="line">person1.hasOwnProperty(‘toString’); <span class="comment">//false</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="03-原型和in操作符"><a href="#03-原型和in操作符" class="headerlink" title="03 原型和in操作符 *"></a>03 原型和in操作符 *</h3><p>in操作符两种使用方式：</p>
<ul>
<li><p>单独：可以通过对象访问指定的属性时，返回true</p>
</li>
<li><p><strong>for in</strong>循环：返回可以<strong>通过对象访问</strong>且<strong>可以被枚举</strong> 的属性</p>
<ul>
<li>实例属性和原型属性都可以</li>
<li>可枚举就表示属性的[[enumberable]]特性为true</li>
</ul>
</li>
</ul>
<p>获得对象上的所有属性名称（字符串）：</p>
<ul>
<li><strong>Object.keys()</strong> 返回对象<strong>自身</strong>所有可枚举属性</li>
<li>sObject.getOwnPropertyNames() 返回对象<strong>自身</strong>所有属性</li>
<li>Object.getOwnPropertySymbols() ES6新增，返回对象<strong>自身</strong>所有符号属性（见<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol">Symbol</a>）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> keys = <span class="built_in">Object</span>.keys(Person.prototype);</span><br><span class="line"><span class="built_in">console</span>.log(keys); </span><br><span class="line"><span class="comment">// &quot;[name,age,job,sayName]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> keys = <span class="built_in">Object</span>.getOwnPropertyNames(Person.prototype);</span><br><span class="line"><span class="built_in">console</span>.log(keys); </span><br><span class="line"><span class="comment">// &quot;[constructor,name,age,job,sayName]&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="04-枚举顺序"><a href="#04-枚举顺序" class="headerlink" title="04 枚举顺序"></a>04 枚举顺序</h3><p>for in 和 Object.keys() 顺序不确定 见p384</p>
<h2 id="对象迭代"><a href="#对象迭代" class="headerlink" title="对象迭代"></a>对象迭代</h2><p>ES2017新增 迭代对象的静态方法</p>
<ul>
<li><p>Object.keys()</p>
</li>
<li><p>Object.values() ：返回对象属性值的数组</p>
</li>
<li><p>Object.entries() ：返回对象属性键值对的数组</p>
</li>
</ul>
<p>注：非字符串属性会转换为字符串，符号属性会忽略，值为对象时执行浅拷贝</p>
<h3 id="04-原型的问题"><a href="#04-原型的问题" class="headerlink" title="04 原型的问题 *"></a>04 原型的问题 *</h3><p>p390</p>
<p>原型上的属性在所有实例之间共享</p>
<ul>
<li>可以 通过在实例上添加同名属性来简单地遮蔽原型上的属性</li>
<li>但是，对于<strong>包含引用值的属性</strong>，会有问题：<ul>
<li>一个实例修改了这个属性的值，其实是修改了原型上的属性值，会反映到其他所有实例上</li>
</ul>
</li>
<li>不同实例之间应该有属于自己的属性副本，所以开发时不会单独使用原型模式</li>
</ul>
<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>通过原型链实现继承</p>
<h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链 *"></a>原型链 *</h2><p>构造函数、原型 和实例的关系：</p>
<ul>
<li>构造函数都有一个原型对象，<code>Person.prototype</code></li>
<li>原型有一个属性指回 构造函数，<code>Person.prototype.constructor===Person</code></li>
<li>实例有一个内部指针指向原型。<code>person.__proto__===Person.prototype</code></li>
</ul>
<p><strong>原型链</strong>就是：<strong>一个构造函数的原型是是另一个类型的实例</strong>，这样整个原型就有一个内部指针（[[Prototype]]）指向另一个原型，即子类的原型指向父类的原型</p>
<p>ES5的继承写法：将子类的prototype对象重新定义为一个父类的实例（默认所有引用类型都是继承自Object）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">this</span>.property = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">SuperType.prototype.getSuperValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">this</span>.property;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">this</span>.subproperty = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继承SuperType</span></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</span><br><span class="line">SubType.prototype.getSubValue = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	dreturn <span class="built_in">this</span>.subproperty;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> instance = <span class="keyword">new</span> SubType();</span><br><span class="line"><span class="built_in">console</span>.log(instance.getSuperValue()); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>



<ul>
<li><p><strong><code>A instanceof B</code> 运算符</strong></p>
<ul>
<li><p>检测构造函数的 <code>prototype</code> 属性是否出现在某个实例对象的原型链上</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(instance <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(instance <span class="keyword">instanceof</span> SuperType); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(instance <span class="keyword">instanceof</span> SubType); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong><code>isPrototypeOf()</code> 方法</strong></p>
<ul>
<li><p>检测原型对象和实例的关系</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.isPrototypeOf(instance)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(SuperType.prototype.isPrototypeOf(instance)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(SubType.prototype.isPrototypeOf(instance)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="03-增加方法"><a href="#03-增加方法" class="headerlink" title="03 增加方法"></a>03 增加方法</h3><p>如果子类需要覆盖父类的方法或增加父类没有的方法，那么需要在子类的原型上定义（注意：子类的原型需要先改写成父类的实例再定义方法）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">this</span>.property = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">SuperType.prototype.getSuperValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">this</span>.property;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">this</span>.subproperty = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继承SuperType</span></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</span><br><span class="line"><span class="comment">// 新方法</span></span><br><span class="line">SubType.prototype.getSubValue = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">this</span>.subproperty;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 覆盖已有的方法</span></span><br><span class="line">SubType.prototype.getSuperValue = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="04-原型链的问题"><a href="#04-原型链的问题" class="headerlink" title="04 原型链的问题 *"></a>04 原型链的问题 *</h3><p>原型中包含的引用值会在所有实例之间共享，所以，在使用原型实现继承时</p>
<ul>
<li>子类原型是父类的实例。</li>
<li>父类的实例属性变成了子类的原型属性。<ul>
<li>实例属性本来是每个实例单独拥有的，但是变成原型属性之后就会变成共享状态</li>
</ul>
</li>
<li>属性值为对象时：由于原型属性在所有子类间共享，所以一个实例改变这个值，所有属性也都改变</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">this</span>.colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 继承SuperType</span></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</span><br><span class="line"><span class="keyword">let</span> instance1 = <span class="keyword">new</span> SubType();</span><br><span class="line">instance1.colors.push(<span class="string">&quot;black&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(instance1.colors); </span><br><span class="line"><span class="comment">// &quot;red,blue,green,black&quot;</span></span><br><span class="line"><span class="keyword">let</span> instance2 = <span class="keyword">new</span> SubType();</span><br><span class="line"><span class="built_in">console</span>.log(instance2.colors); </span><br><span class="line"><span class="comment">// &quot;red,blue,green,black&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="盗用构造函数"><a href="#盗用构造函数" class="headerlink" title="盗用构造函数 *"></a>盗用构造函数 *</h2><p>为了解决原型包含引用值导致的继承问题</p>
<p>盗用构造函数&#x2F;对象伪装&#x2F;经典继承</p>
<ul>
<li><p>在子类的构造函数中调用父类的构造函数</p>
</li>
<li><p>使用call()或apply()进行调用</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">this</span>.colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>];</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">	<span class="comment">// 盗用构造函数继承SuperType</span></span><br><span class="line">	SuperType.call(<span class="built_in">this</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> instance1 = <span class="keyword">new</span> SubType(<span class="string">&quot;ins1&quot;</span>);</span><br><span class="line">instance1.colors.push(<span class="string">&quot;black&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(instance1.colors); </span><br><span class="line"><span class="comment">// &quot;red,blue,green,black&quot;</span></span><br><span class="line"><span class="keyword">let</span> instance2 = <span class="keyword">new</span> SubType(<span class="string">&quot;ins2&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(instance2.colors); </span><br><span class="line"><span class="comment">// &quot;red,blue,green&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>优点</strong>：解决了引用值的问题，且可以在子类构造函数向父类构造函数传参</p>
<p><strong>问题</strong>：在构造函数中定义方法，会在每个实例中创建一个新的方法，因此<strong>函数不能重用</strong>，在子类也是创建一个新方法，而不是访问父类原型上定义的方法</p>
<h2 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承 **"></a>组合继承 **</h2><p>组合继承&#x2F;伪经典继承：</p>
<ul>
<li>通过原型链继承原型上的属性和方法：重用方法</li>
<li>通过盗用构造函数继承实例属性：每个实例都有单独的属性</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 实例属性</span></span><br><span class="line">	<span class="built_in">this</span>.name = name;</span><br><span class="line">	<span class="built_in">this</span>.colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 原型方法</span></span><br><span class="line">SuperType.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name, age</span>)</span>&#123;</span><br><span class="line">	<span class="comment">// 继承属性</span></span><br><span class="line">	SuperType.call(<span class="built_in">this</span>, name);</span><br><span class="line">	<span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继承方法</span></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</span><br><span class="line">SubType.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="built_in">this</span>.age);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> instance1 = <span class="keyword">new</span> SubType(<span class="string">&quot;Nicholas&quot;</span>, <span class="number">29</span>);</span><br><span class="line">instance1.colors.push(<span class="string">&quot;black&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(instance1.colors); <span class="comment">// &quot;red,blue,green,black&quot;</span></span><br><span class="line">instance1.sayName(); <span class="comment">// &quot;Nicholas&quot;;</span></span><br><span class="line">instance1.sayAge(); <span class="comment">// 29</span></span><br><span class="line"><span class="keyword">let</span> instance2 = <span class="keyword">new</span> SubType(<span class="string">&quot;Greg&quot;</span>, <span class="number">27</span>);</span><br><span class="line"><span class="built_in">console</span>.log(instance2.colors); <span class="comment">// &quot;red,blue,green&quot;</span></span><br><span class="line">instance2.sayName(); <span class="comment">// &quot;Greg&quot;;</span></span><br><span class="line">instance2.sayAge(); <span class="comment">// 27</span></span><br></pre></td></tr></table></figure>

<h2 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h2><p>适用情况：不需要单独创建构造函数，但仍然需要在对象间共享信息的场合，也就是在一个对象的基础上创建新对象</p>
<p>使用Object.create() 方法，传入参数：作为原型的对象，新增的属性（通过描述符表示）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">	<span class="attr">name</span>: <span class="string">&quot;Nicholas&quot;</span>,</span><br><span class="line">	<span class="attr">friends</span>: [<span class="string">&quot;Shelby&quot;</span>, <span class="string">&quot;Court&quot;</span>, <span class="string">&quot;Van&quot;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 原型式继承</span></span><br><span class="line"><span class="keyword">let</span> anotherPerson = <span class="built_in">Object</span>.create(person, &#123;</span><br><span class="line">	<span class="attr">name</span>: &#123;</span><br><span class="line">		<span class="attr">value</span>: <span class="string">&quot;Greg&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(anotherPerson.name); <span class="comment">// &quot;Greg&quot;</span></span><br></pre></td></tr></table></figure>

<p>优点：不在意类型和构造函数</p>
<p>缺点：和原型模式一样，引用值会共享</p>
<h2 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h2><p>创建一个实现继承的函数，以某种方式增强对象，然后返回这个对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createAnother</span>(<span class="params">original</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> clone = object(original); <span class="comment">// 通过调用函数创建一个新对象</span></span><br><span class="line">    clone.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 以某种方式增强这个对象</span></span><br><span class="line">    	<span class="built_in">console</span>.log(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> clone; <span class="comment">// 返回这个对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用createAnother函数</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">	<span class="attr">name</span>: <span class="string">&quot;Nicholas&quot;</span>,</span><br><span class="line">	<span class="attr">friends</span>: [<span class="string">&quot;Shelby&quot;</span>, <span class="string">&quot;Court&quot;</span>, <span class="string">&quot;Van&quot;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> anotherPerson = createAnother(person);</span><br><span class="line">anotherPerson.sayHi(); <span class="comment">// &quot;hi&quot;</span></span><br></pre></td></tr></table></figure>

<p>优点：不在意类型和构造函数</p>
<p>缺点：与盗用构造函数模式类似，函数难以重用</p>
<h2 id="寄生式组合继承"><a href="#寄生式组合继承" class="headerlink" title="寄生式组合继承 *"></a>寄生式组合继承 *</h2><p>3.3的组合继承存在问题：</p>
<p>子类的原型上会多出一组实例属性，因为：p403</p>
<ul>
<li><p>声明父类构造函数时，定义了实例属性</p>
</li>
<li><p>将子类原型定义成父类实例时，<strong>创建了一组实例属性</strong></p>
</li>
</ul>
<p>寄生式组合继承就是解决上面的问题</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span>(<span class="params">subType, superType</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">let</span> prototype = <span class="built_in">Object</span>.create(superType.prototype); <span class="comment">// 取得父类的原型的副本作为子类的原型</span></span><br><span class="line">	prototype.constructor = subType; <span class="comment">// 重新设置constructor使其指向子类构造函数</span></span><br><span class="line">	subType.prototype = prototype; <span class="comment">// 子类的原型指向副本</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">this</span>.name = name;</span><br><span class="line">	<span class="built_in">this</span>.colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line">SuperType.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> 	<span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">	SuperType.call(<span class="built_in">this</span>, name); <span class="comment">// 继承实例属性</span></span><br><span class="line">	<span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继承方法属性，这里跟3不一样，3用的是子类原型是父类实例</span></span><br><span class="line">inheritPrototype(SubType, SuperType);</span><br><span class="line">SubType.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">this</span>.age);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>优点：是引用类型继承的最佳模式</p>
<h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><p>ES6新加入的语法糖</p>
<h2 id="类定义"><a href="#类定义" class="headerlink" title="类定义"></a>类定义</h2><p>建议类名首字母大写</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 类声明</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 类表达式</span></span><br><span class="line"><span class="keyword">const</span> Animal = <span class="class"><span class="keyword">class</span> </span>&#123;&#125;;</span><br></pre></td></tr></table></figure>

<p>和函数的区别：</p>
<ul>
<li><p>函数声明可以提升，类定义不能</p>
</li>
<li><p>函数受函数作用域限制，类受块作用域限制</p>
</li>
</ul>
<p>类可以包含构造函数方法、实例方法、获取函数、设置函数和静态类方法（方法名前加static只能在类中调用）</p>
<h2 id="类构造函数"><a href="#类构造函数" class="headerlink" title="类构造函数"></a>类构造函数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    	<span class="built_in">this</span>.name = name || <span class="string">&quot;a&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.name</span><br><span class="line">    <span class="keyword">static</span> sayName ()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">    xhckhck</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person();</span><br><span class="line">p.name</span><br></pre></td></tr></table></figure>

<p>实例化的过程见p408</p>
<p>类构造函数和构造函数的区别：</p>
<ul>
<li>类构造函数一定要new调用！不然报错</li>
<li>普通构造函数不new的话就会默认变成全局对象</li>
</ul>
<h2 id="实例-原型-类成员"><a href="#实例-原型-类成员" class="headerlink" title="实例 原型 类成员"></a>实例 原型 类成员</h2><p>实例成员</p>
<ul>
<li>通过类构造函数的this添加，或直接给创建好的实例添加，每个实例都有唯一成员对象，不会共享</li>
</ul>
<p>原型方法</p>
<ul>
<li>类块中定义的方法，共享，等于属性，跟对象一样可以用字符串，符号，或计算的值为键，setter，getter也一样</li>
</ul>
<p>静态类方法</p>
<ul>
<li>用static关键字作前缀</li>
<li>属于类，this引用类自身，不属于类实例，只能被类调用</li>
</ul>
<p>非函数类型和类成员</p>
<ul>
<li>类块里面不能直接定义类成员，但是类块外面可以用<code>类名.成员名</code>定义</li>
</ul>
<h2 id="继承-1"><a href="#继承-1" class="headerlink" title="继承"></a>继承</h2><h3 id="01-基础"><a href="#01-基础" class="headerlink" title="01 基础"></a>01 基础</h3><p>extends关键字继承任何有[[Construct]]和原型的对象（可以继承类或构造函数，向后兼容）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 类声明</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 类表达式也可以</span></span><br><span class="line"><span class="keyword">let</span> Bar = <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Foo</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="02-构造函数"><a href="#02-构造函数" class="headerlink" title="02 构造函数 *"></a>02 构造函数 *</h3><p>通过super调用父类构造函数和静态方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    	<span class="built_in">this</span>.hasEngine = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> say1 () &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>) </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 先super()调用构造函数，不能在super前this</span></span><br><span class="line">        <span class="built_in">super</span>(); <span class="comment">// 相当于super.constructor()</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span> <span class="keyword">instanceof</span> Vehicle); <span class="comment">// true</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// Bus &#123; hasEngine: true &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用静态方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="title">say1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>.identify()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> Bus();</span><br></pre></td></tr></table></figure>

<h3 id="03-抽象基类"><a href="#03-抽象基类" class="headerlink" title="03 抽象基类"></a>03 抽象基类</h3><p>可以被其他类继承，但本身不会被实例化。虚基类？</p>
<ul>
<li><p>new.target保存通过new关键字调用的类 或函数。通过在实例化时检测new.target是不是抽象基类，可以阻止对抽象基类的实例化</p>
</li>
<li><p>通过在抽象基类构造函数中进行检查，可以要求派生类必须 定义某个方法。</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 抽象基类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">new</span>.target === Vehicle) &#123;</span><br><span class="line">        	<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Vehicle cannot be directly instantiated&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.foo) &#123;</span><br><span class="line">        	<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Inheriting class must define foo()&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;success!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 派生类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="title">foo</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 派生类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Van</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">new</span> Bus(); <span class="comment">// success!</span></span><br><span class="line"><span class="keyword">new</span> Van(); <span class="comment">// Error: Inheriting class must define foo()</span></span><br></pre></td></tr></table></figure>

<h3 id="05-类混入"><a href="#05-类混入" class="headerlink" title="05 类混入"></a>05 类混入</h3><p>多类继承：p425</p>
<ul>
<li>在一个表达式中连缀多个混入元素，这个 表达式最终会解析为一个可以被继承的类。</li>
<li>例：想要P组合ABC：B基础A，C继承B，然后P继承C</li>
<li>已抛弃，用组合模式（把方法提取到独立的类和辅助对象中， 然后把它们组合起来，但不使用继承）</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="理解原型"><a href="#理解原型" class="headerlink" title="理解原型"></a>理解原型</h2><p><strong>构造函数、原型对象和实例</strong></p>
<ul>
<li>实例与构造函数原型之间有直接的联系，但实例与构造函数之间没有。</li>
</ul>
<p>1）<strong>构造函数创建</strong>之后，自动创建一个原型对象属性prototype，指向原型对象</p>
<ul>
<li>原型对象自动获得一个constructor属性，指向与之关联的构造函数</li>
<li>在自定义构造函数时，原型对象默认只会获得constructor属性， 其他的所有方法都继承自Object。</li>
</ul>
<p>2）每次调用构造函数<strong>创建一个新实例</strong></p>
<ul>
<li>这个实例的内部**[[Prototype]]指针<strong>就会被赋值为</strong>构造函数的 原型对象**</li>
<li>脚本中没有访问这个**[[Prototype]]<strong>特性的标准方式， 但Firefox、Safari和Chrome会在每个对象上暴露</strong><code>__proto__</code>属性<strong>，通 过这个属性可以</strong>访问对象的原型**</li>
</ul>
<p><strong>在通过对象访问属性</strong>：按照属性名称开始搜索。</p>
<ul>
<li>先搜索对象实例，发现属性则返回</li>
<li>未发现，则沿着指针进入原型对象，然后在原型对象上找到属性后，再返回对应的值。</li>
</ul>
<p><strong>原型的问题</strong>：原型上的属性在所有实例之间共享</p>
<ul>
<li>可以 通过在实例上添加同名属性来简单地遮蔽原型上的属性</li>
<li>但是，对于包含<strong>引用值</strong>的属性，会有问题：<ul>
<li>一个实例修改了这个属性的值，其实是修改了原型上的属性值，会反映到其他所有实例上</li>
</ul>
</li>
<li>不同实例之间应该有属于自己的属性副本，所以开发时不会单独使用原型模式</li>
</ul>
<h2 id="理解原型链"><a href="#理解原型链" class="headerlink" title="理解原型链"></a>理解原型链</h2><p>构造函数、原型 和实例的关系：</p>
<ul>
<li>构造函数都有一个原型对象，<code>Person.prototype</code></li>
<li>原型有一个属性指回 构造函数，<code>Person.prototype.constructor===Person</code></li>
<li>实例有一个内部指针指向原型。<code>person.__proto__===Person.prototype</code></li>
</ul>
<p><strong>原型链</strong>就是：一个构造函数的原型是是另一个类型的实例，这样整个原型就有一个内部指针（[[Prototype]]）指向另一个原型，即子类的原型指向父类的原型</p>
<p><strong>原型链的问题</strong>：原型中包含的引用值会在所有实例之间共享，所以，在使用原型实现继承时</p>
<ul>
<li>子类原型是父类的实例。</li>
<li>父类的实例属性变成了子类的原型属性。<ul>
<li>实例属性本来是每个实例单独拥有的，但是变成原型属性之后就会变成共享状态</li>
</ul>
</li>
<li>属性值为对象时：由于原型属性在所有子类间共享，所以一个实例改变这个值，所有属性也都改变</li>
</ul>
<h2 id="继承的方法"><a href="#继承的方法" class="headerlink" title="继承的方法"></a>继承的方法</h2><ol>
<li><strong>原型链</strong>继承：包含引用值的属性会共享</li>
<li><strong>盗用构造函数</strong>继承：无法重用方法</li>
<li>原型链+盗用构造函数<strong>组合继承</strong>：1+2 使用最多</li>
<li>原型式继承：没有构造函数，缺点类似1</li>
<li>寄生式继承：没有构造函数，缺点类似2</li>
<li><strong>寄生式组合</strong>继承：2+4，最有效</li>
<li><strong>类</strong>继承，好</li>
</ol>
<h3 id="原型链-1"><a href="#原型链-1" class="headerlink" title="原型链"></a><strong>原型链</strong></h3><p>优点：共享原型方法</p>
<p>缺点：原型对象是引用值时，共享引用，改一个实例就全改</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 原型链</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Super</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.val=<span class="number">1</span> <span class="comment">// 实例属性</span></span><br><span class="line">&#125;</span><br><span class="line">Super.prototype.arr=[] <span class="comment">// 原型属性</span></span><br><span class="line">Super.prototype.getArr=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 原型方法</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.arr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params">val,str</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.str=str</span><br><span class="line">&#125;</span><br><span class="line">Sub.prototype=<span class="keyword">new</span> Super(<span class="built_in">this</span>.val) <span class="comment">// 继承原型</span></span><br><span class="line">Sub.prototype.getStr=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.str)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s=<span class="keyword">new</span> Sub(<span class="number">1</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> t=<span class="keyword">new</span> Sub(<span class="number">2</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(s.arr===t.arr) <span class="comment">// true 共享原型对象</span></span><br><span class="line"><span class="built_in">console</span>.log(s.getArr===t.getArr) <span class="comment">// true 共享原型方法</span></span><br></pre></td></tr></table></figure>

<h3 id="盗用构造函数-1"><a href="#盗用构造函数-1" class="headerlink" title="盗用构造函数"></a><strong>盗用构造函数</strong></h3><p>优点：实例有各自的属性值</p>
<p>缺点：方法只能定义在构造函数里，难以重用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. 盗用构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Super</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.val=val <span class="comment">// 实例属性</span></span><br><span class="line">    <span class="built_in">this</span>.arr=[]</span><br><span class="line">    <span class="built_in">this</span>.getArr=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 实例方法</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.arr)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params">val, str</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 盗用构造函数继承原型，可以传值了</span></span><br><span class="line">    Super.call(<span class="built_in">this</span>, val)</span><br><span class="line">    <span class="built_in">this</span>.str=str</span><br><span class="line">    <span class="built_in">this</span>.getStr=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    	<span class="built_in">console</span>.log(<span class="built_in">this</span>.str)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s=<span class="keyword">new</span> Sub(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">let</span> t=<span class="keyword">new</span> Sub(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(s.arr===t.arr) <span class="comment">// false 各自的实例对象</span></span><br><span class="line"><span class="built_in">console</span>.log(s.getArr===t.getArr) <span class="comment">// false 不共享方法</span></span><br></pre></td></tr></table></figure>

<h3 id="组合继承-1"><a href="#组合继承-1" class="headerlink" title="组合继承"></a><strong>组合继承</strong></h3><p>优点：实例有各自的属性值，不会干扰，方法也可以重用</p>
<p>缺点：子类的原型上会多出一组实例属性，因为：p403</p>
<ul>
<li><p>声明父类构造函数时，定义了实例属性</p>
</li>
<li><p>将子类原型定义成父类实例时，<strong>创建了一组实例属性</strong></p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3. 组合继承</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Super</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.val=val <span class="comment">// 实例属性</span></span><br><span class="line">    <span class="built_in">this</span>.arr=[]</span><br><span class="line">&#125;</span><br><span class="line">Super.prototype.getArr=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 对象方法</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.arr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params">val,str</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 盗用构造函数继承原型，可以传值了</span></span><br><span class="line">    Super.call(<span class="built_in">this</span>, val) </span><br><span class="line">    <span class="built_in">this</span>.str=str</span><br><span class="line">&#125;</span><br><span class="line">Sub.prototype=<span class="keyword">new</span> Super()</span><br><span class="line">Sub.prototype.getStr=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.str)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s=<span class="keyword">new</span> Sub(<span class="number">1</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> t=<span class="keyword">new</span> Sub(<span class="number">2</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(s.arr===t.arr) <span class="comment">// false 各自的实例对象</span></span><br><span class="line"><span class="built_in">console</span>.log(s.getArr===t.getArr) <span class="comment">// true 共享原型方法</span></span><br></pre></td></tr></table></figure>

<h3 id="寄生式组合"><a href="#寄生式组合" class="headerlink" title="寄生式组合"></a><strong>寄生式组合</strong></h3><p>优点：解决了普通组合式的问题</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 6. 寄生式组合继承</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototy</span>(<span class="params">subType,superType</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 浅复制父类的原型</span></span><br><span class="line">    <span class="keyword">let</span> prototype=<span class="built_in">Object</span>.create(subType.prototype)</span><br><span class="line">    <span class="comment">// 修正constructor</span></span><br><span class="line">    prototype.constructor=subType</span><br><span class="line">    <span class="comment">// 让子类的原型指向父类的原型</span></span><br><span class="line">    subType.prototype=prototype</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Super</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.val=val <span class="comment">// 实例属性</span></span><br><span class="line">    <span class="built_in">this</span>.arr=[]</span><br><span class="line">&#125;</span><br><span class="line">Super.prototype.getArr=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 对象方法</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.arr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params">val,str</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 盗用构造函数继承原型，可以传值了</span></span><br><span class="line">    Super.call(<span class="built_in">this</span>, val) </span><br><span class="line">    <span class="built_in">this</span>.str=str</span><br><span class="line">&#125;</span><br><span class="line">inheritPrototy(Sub,Super)</span><br><span class="line">Sub.prototype.getStr=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.str)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s=<span class="keyword">new</span> Sub(<span class="number">1</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> t=<span class="keyword">new</span> Sub(<span class="number">2</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(s.arr===t.arr) <span class="comment">// false 不共享实例属性</span></span><br><span class="line"><span class="built_in">console</span>.log(s.getArr===t.getArr) <span class="comment">// true 共享原型方法</span></span><br></pre></td></tr></table></figure>

<h3 id="类-1"><a href="#类-1" class="headerlink" title="类"></a>类</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Super</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.val=val</span><br><span class="line">        <span class="built_in">this</span>.arr=[]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">getArr</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.arr)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Super</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">val,str</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(val)</span><br><span class="line">        <span class="built_in">this</span>.str=str</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">getStr</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.str)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s=<span class="keyword">new</span> Sub(<span class="number">1</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> t=<span class="keyword">new</span> Sub(<span class="number">2</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(s.arr===t.arr) <span class="comment">// false 不共享实例属性</span></span><br><span class="line"><span class="built_in">console</span>.log(s.getArr===t.getArr) <span class="comment">// true 共享原型方法</span></span><br></pre></td></tr></table></figure>

<h2 id="区别：prototype和-proto"><a href="#区别：prototype和-proto" class="headerlink" title="区别：prototype和__proto__"></a>区别：<code>prototype</code>和<code>__proto__</code></h2><h3 id="构造函数方法"><a href="#构造函数方法" class="headerlink" title="构造函数方法"></a>构造函数方法</h3><p>每一个构造函数有一个prototype指针，指向构造函数声明时自动创建的原型对象</p>
<p>只要是对象就会有一个[[Prototype]]内部属性，这个属性在chrome浏览器中可以被<code>__proto__</code>属性暴露出来</p>
<ul>
<li>new出来的实例对象的<code>__proto__</code>指向<strong>构造函数</strong>的<strong>原型对象</strong></li>
<li>构造函数的<code>__proto__</code>指向<strong>Function</strong>的<strong>原型对象</strong>，因为本质上它是一个函数</li>
<li>任何原型对象的<code>__proto__</code>指向<strong>Object</strong>的<strong>原型对象</strong>，因为本质上它是一个对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> p=<span class="keyword">new</span> Person()</span><br><span class="line">Person.prototype===p.__proto__ <span class="comment">// true</span></span><br><span class="line">Person.__proto__===<span class="built_in">Function</span>.prototype <span class="comment">// true</span></span><br><span class="line">Person.prototype.__proto__===<span class="built_in">Object</span>.prototype <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="构造函数继承"><a href="#构造函数继承" class="headerlink" title="构造函数继承"></a>构造函数继承</h3><p>原型链继承时，本质上是把子类的原型指向父类的实例，因为父类的实例的<code>__proto__</code>指针能指向父类原型</p>
<ul>
<li><p>子类的原型上的<code>__proto__</code>指向父类原型</p>
</li>
<li><p>子类实例上的<code>__proto__</code>指向子类原型，本质上是父类的实例</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Adult</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">Adult.prototype=<span class="keyword">new</span> Person()</span><br><span class="line"><span class="keyword">let</span> a=<span class="keyword">new</span> Adult()</span><br><span class="line">Adult.prototype.__proto__===Person.prototype <span class="comment">// true</span></span><br><span class="line">Adult.prototype===a.__proto__ <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="类继承"><a href="#类继承" class="headerlink" title="类继承"></a>类继承</h3><p>使用class声明类时<code>prototype</code>和<code>__proto__</code>的指向跟构造函数时<strong>完全一样</strong></p>
<ul>
<li>new出来的实例对象的<code>__proto__</code>指向<strong>构造函数</strong>的<strong>原型对象</strong></li>
<li>构造函数的<code>__proto__</code>指向<strong>Function</strong>的<strong>原型对象</strong>，因为本质上它是一个函数</li>
<li>类的原型对象的<code>__proto__</code>指向<strong>Object</strong>的<strong>原型对象</strong>，因为本质上它是一个对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> p=<span class="keyword">new</span> Person()</span><br><span class="line">Person.prototype===p.__proto__ <span class="comment">// true</span></span><br><span class="line">Person.__proto__===<span class="built_in">Function</span>.prototype <span class="comment">// true</span></span><br><span class="line">Person.prototype.__proto__===<span class="built_in">Object</span>.prototype <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<ul>
<li>子类的原型上的<code>__proto__</code>指向父类原型</li>
<li>子类实例上的<code>__proto__</code>指向子类原型</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adult</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> a=<span class="keyword">new</span> Adult()</span><br><span class="line">Adult.prototype.__proto__===Person.prototype <span class="comment">// true</span></span><br><span class="line">Adult.prototype===a.__proto__ <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><em>注意，*<em>类的成员方法就是定义在类的原型上的</em></em></p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>JavaScript笔记</category>
      </categories>
      <tags>
        <tag>front end</tag>
        <tag>JavaScript</tag>
        <tag>对象</tag>
        <tag>继承</tag>
      </tags>
  </entry>
  <entry>
    <title>廖雪峰js学习笔记1：基础</title>
    <url>/2021/07/14/frontend/jsNote1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><h2 id="代码书写"><a href="#代码书写" class="headerlink" title="代码书写"></a>代码书写</h2><p>HTML+CSS+JavaScript三件套</p>
<p>在编辑器VS Code中直接键入<code>doc</code>可以快速创建html结构</p>
<p><strong>在html中嵌入CSS样式：</strong></p>
<p>在<code>&lt;head&gt;</code>中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;./chatroom.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>在html中嵌入js脚本：</strong></p>
<p>一般在<code>&lt;body&gt;</code>末尾</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;test1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p><strong>直接嵌入</strong></p>
<p>将JavaScript代码放在<code>&lt;head&gt;</code>的<code>&lt;script&gt;</code>中，将直接被浏览器执行</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    alert(<span class="string">&#x27;Hello, world&#x27;</span>);</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>引用外部文件</strong></p>
<p>把JavaScript代码放到一个单独的<code>.js</code>文件，然后在HTML中通过<code>&lt;script src=&quot;...&quot;&gt;&lt;/script&gt;</code>引入这个文件，这样，<code>/static/js/abc.js</code>就会被浏览器执行</p>
<ul>
<li><p>如果是DOM无关的，可以放在<code>head</code>里</p>
</li>
<li><p>如果要操作DOM，放在<code>body</code>的末尾</p>
</li>
<li><p>jQuery没有直接操作DOM，放哪都行</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/static/js/abc.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>把JavaScript代码放入一个单独的<code>.js</code>文件中更利于维护代码，并且多个页面可以各自引用同一份<code>.js</code>文件。<br>可以在同一个页面中引入多个.js文件，还可以在页面中多次编写<script> js代码... </script>，浏览器按照顺序依次执行。</p>
<h2 id="代码调试"><a href="#代码调试" class="headerlink" title="代码调试"></a>代码调试</h2><p>使用chrome浏览器，点击菜单“查看(View)”-“开发者(Developer)”-“开发者工具(Developer Tools)”，快捷键<code>F12</code><br>在<code>Elements</code>可以查看页面源代码，在<code>Console</code>可以输入js指令。</p>
<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><table>
<thead>
<tr>
<th>代码</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><code>;</code></td>
<td>结束语句</td>
</tr>
<tr>
<td><code>&#123;…&#125;</code></td>
<td>语句块</td>
</tr>
<tr>
<td><code>//</code></td>
<td>注释单行</td>
</tr>
<tr>
<td><code>/*...*/</code></td>
<td>注释多行语句</td>
</tr>
</tbody></table>
<p>JavaScript是大小写敏感的</p>
<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h2><p>JavaScript不区分整数和浮点数，统一用Number表示，以下都是合法的Number类型：</p>
<table>
<thead>
<tr>
<th>Number</th>
<th>类型</th>
</tr>
</thead>
<tbody><tr>
<td>123;</td>
<td>整数123</td>
</tr>
<tr>
<td>0.456;</td>
<td>浮点数0.456</td>
</tr>
<tr>
<td>1.2345e3;</td>
<td>科学计数法表示1.2345x1000，等同于1234.5</td>
</tr>
<tr>
<td>-99;</td>
<td>负数</td>
</tr>
<tr>
<td>NaN;</td>
<td>NaN表示Not a Number，当无法计算结果时用NaN表示</td>
</tr>
<tr>
<td>Infinity;</td>
<td>Infinity表示无限大，当数值超过Number所能表示的最大值时，就表示为Infinity</td>
</tr>
</tbody></table>
<p>Number可以直接做四则运算<code>+</code>,<code>-</code>,<code>*</code>,<code>/</code>,<code>%</code>(求余) </p>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串是以单引号<code>&#39;</code>或双引号<code>&quot;</code>括起来的任意文本<br>转义字符<code>\</code>，<code>\n</code>换行，<code>\t</code>制表符，<code>\\</code>表示\，<code>\x##</code>可以表示ASCII码<br>多行字符串<code>…</code><br>字符串连接+<br>模板字符串<code>…$&#123;varname&#125;…</code>用变量替换<code>$&#123;&#125;</code>的内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var name = &#x27;小明&#x27;; var age = 20;</span><br><span class="line">console.log(`你好, $&#123;name&#125;, 你今年$&#123;age&#125;岁了!`);</span><br></pre></td></tr></table></figure>
<p><strong>常用属性&#x2F;函数</strong></p>
<table>
<thead>
<tr>
<th>属性&#x2F;函数</th>
<th>解释</th>
<th>用例</th>
</tr>
</thead>
<tbody><tr>
<td>length</td>
<td>字符串长度属性</td>
<td><code>var s = &#39;Hello, world!&#39;  s.length; // 13</code></td>
</tr>
<tr>
<td>[]</td>
<td>字符串索引</td>
<td><code>s[12]; // &#39;!&#39;  s[13]; // undefined</code></td>
</tr>
<tr>
<td>toUpperCase()</td>
<td>全部变为大写</td>
<td><code>s.toUpperCase() // &quot;HELLO, WORLD!&quot;</code></td>
</tr>
<tr>
<td>toLowerCase()</td>
<td>全部变为小写</td>
<td><code>s.toLowerCase() // &quot;hello, world!&quot;</code></td>
</tr>
<tr>
<td>indexOf()</td>
<td>搜索指定字符串出现的位置</td>
<td><code>s.indexOf(“world”) //7</code></td>
</tr>
<tr>
<td>substring()</td>
<td>返回指定索引区间的子串</td>
<td><code>s.substring(0, 5); // 从0到5（不包括5），返回&#39;hello&#39;</code></td>
</tr>
</tbody></table>
<h2 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h2><p>有<code>true</code>、<code>false</code>两种值</p>
<p>布尔运算：<code>&amp;&amp;</code>与运算，<code>||</code>或运算，<code>!</code>非运算</p>
<p><strong>比较运算符</strong></p>
<p>当我们对Number做比较时，可以通过比较运算符得到一个布尔值，<code>&lt;,&gt;,&lt;=,&gt;=,==,===,!==</code><br>JavaScript允许对任意数据类型做比较，注意：</p>
<ol>
<li><p>&#x3D;&#x3D;和&#x3D;&#x3D;&#x3D;</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="literal">false</span> == <span class="number">0</span>; <span class="comment">// true</span></span><br><span class="line"><span class="literal">false</span> === <span class="number">0</span>; <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>==</code>，它会自动转换数据类型再比较，很多时候，会得到非常诡异的结果；</li>
<li><code>===</code>，它不会自动转换数据类型，如果数据类型不一致，返回false，如果一致，再比较。</li>
<li>由于JavaScript这个设计缺陷，不要使用<code>==</code>比较，<strong>始终坚持使用<code>===</code>比较</strong>。</li>
</ul>
</li>
<li><p><code>NaN</code>与所有其他值都不相等，包括它自己：<br>唯一能判断<code>NaN</code>的方法是通过<code>isNaN()</code>函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">isNaN</span>(<span class="literal">NaN</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>浮点数的相等比较<br>要比较两个浮点数是否相等，只能计算它们之差的绝对值，看是否小于某个阈值<code>Math.abs&lt;阈值</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Math.abs(1 / 3 - (1 - 2 / 3)) &lt; 0.0000001; // true</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="null和undefined"><a href="#null和undefined" class="headerlink" title="null和undefined"></a>null和undefined</h2><ul>
<li><code>null</code>表示一个“空”的值，辨析：<ul>
<li><code>0</code>是一个数值，</li>
<li><code>&#39;&#39;</code>表示长度为0的字符串</li>
</ul>
</li>
<li><code>undefined</code>表示值未定义。</li>
</ul>
<p>区分两者的意义不大。大多数情况下，我们都应该用<code>null</code>。<code>undefined</code>仅仅在判断函数参数是否传递的情况下有用。</p>
<p>另，在变量前加<code>!!</code>判断可以将<code>null</code>和<code>undefined</code>都变成布尔值<code>false</code></p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p><a href="https://www.runoob.com/jsref/jsref-obj-array.html">https://www.runoob.com/jsref/jsref-obj-array.html</a><br>数组是一组按顺序排列的集合，集合的每个值称为元素。JavaScript的数组可以包括任意数据类型。</p>
<ol>
<li><p>数组的创建<br>法一：数组用[]表示，元素之间用,分隔。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[1, 2, 3.14, &#x27;Hello&#x27;, null, true];</span><br></pre></td></tr></table></figure>

<p>法二：通过Array()函数实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Array(1, 2, 3); // 创建了数组[1, 2, 3]</span><br></pre></td></tr></table></figure>

<p>然而，出于代码的可读性考虑，强烈建议直接使用[]。</p>
</li>
<li><p>数组元素的访问<br>数组的元素可以通过索引来访问。索引的起始值为0：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var arr = [1, 2, 3.14, &#x27;Hello&#x27;, null, true];</span><br><span class="line">arr[0]; // 返回索引为0的元素，即1</span><br><span class="line">arr[5]; // 返回索引为5的元素，即true</span><br><span class="line">arr[6]; // 索引超出了范围，返回undefined</span><br></pre></td></tr></table></figure>


</li>
<li><p>常用属性&#x2F;方法</p>
<table>
<thead>
<tr>
<th>length</th>
<th>数组长度</th>
<th>arr.length</th>
</tr>
</thead>
<tbody><tr>
<td><code>[]</code></td>
<td>数组索引</td>
<td><code>arr[0]</code></td>
</tr>
<tr>
<td><code>indexOf()</code></td>
<td>搜索指定元素位置</td>
<td><code>arr.indexOf(10)</code></td>
</tr>
<tr>
<td><code>slice()</code></td>
<td>截取数组的部分元素</td>
<td><code>arr.slice(0,3) //从索引0开始到3，不包括3 </code> <br> <code>arr.slice()   //复制arr</code></td>
</tr>
<tr>
<td><code>push()</code></td>
<td>向数组末尾添加若干元素  返回数组长度</td>
<td><code>arr.push(1,2)</code></td>
</tr>
<tr>
<td><code>pop()</code></td>
<td>删除数组的最后一个元素  返回删除的元素</td>
<td><code>arr.pop()</code></td>
</tr>
<tr>
<td><code>unshift()</code></td>
<td>向数组头部添加若干元素  返回数组长度</td>
<td><code>arr.unshift(‘a’,’b’)</code></td>
</tr>
<tr>
<td><code>shift()</code></td>
<td>删除数组的第一个元素  返回删除的元素</td>
<td><code>arr.shift()</code></td>
</tr>
<tr>
<td><code>sort()</code></td>
<td>对数组排序，默认顺序</td>
<td><code>arr.sort()</code></td>
</tr>
<tr>
<td><code>reverse()</code></td>
<td>反转数组</td>
<td><code>arr.reverse()</code></td>
</tr>
<tr>
<td><code>splice()</code></td>
<td>从指定索引开始删除，添加元素  返回删除的元素</td>
<td><code>var arr=[1,2,3,4,5];  arr.splice(2, 3, &#39;a&#39;, &#39;b&#39;); // 返回[3,4,5]</code><br><code> arr;         // [1,2,’a’,’b’]</code></td>
</tr>
<tr>
<td><code>concat()</code></td>
<td>连接两个数组，返回新的数组</td>
<td><code>arr.concat(1.2.[3,4]); //在arr后面连接1,2,3,4</code></td>
</tr>
<tr>
<td><code>join()</code></td>
<td>把数组元素用指定字符连起来  返回字符串</td>
<td><code>arr.join(‘-‘)</code></td>
</tr>
</tbody></table>
</li>
<li><p>多维数组<br>如果数组的某个元素又是一个Array，则可以形成多维数组<br>练习：1）如何通过索引取到500这个值    2）打印数组元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> arr = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">400</span>, <span class="number">500</span>, <span class="number">600</span>], <span class="string">&#x27;-&#x27;</span>];</span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;小红&#x27;</span>, <span class="string">&#x27;大军&#x27;</span>, <span class="string">&#x27;阿黄&#x27;</span>];</span><br><span class="line">arr.sort();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`欢迎<span class="subst">$&#123;arr[<span class="number">0</span>]&#125;</span>,<span class="subst">$&#123;arr[<span class="number">1</span>]&#125;</span>,<span class="subst">$&#123;arr[<span class="number">2</span>]&#125;</span>和<span class="subst">$&#123;arr[<span class="number">3</span>]&#125;</span>同学`</span>);</span><br><span class="line"><span class="comment">//console.log(`欢迎$&#123;arr.sort().slice(0,-1)&#125;和$&#123;arr.sort().slice(-1)&#125;同学!`);</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>JavaScript的对象是一组由键-值组成的无序集合，例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Bob&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">tags</span>: [<span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;web&#x27;</span>, <span class="string">&#x27;mobile&#x27;</span>],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>对象的键都是字符串类型，值可以是任意数据类型。<br>其中每个键又称为对象的属性，要获取一个对象的属性，用<code>对象变量.属性名</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">person.name; <span class="comment">// &#x27;Bob&#x27;</span></span><br></pre></td></tr></table></figure>

<p>判断一个对象是否包含某个属性</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>解释</th>
<th>用例</th>
</tr>
</thead>
<tbody><tr>
<td><code>in </code></td>
<td>返回true&#x2F;false，对于变量继承的属性也会判为真</td>
<td><code>‘name’ in person;  // true</code> <br>  <code>‘toString’ in person; // true</code></td>
</tr>
<tr>
<td><code>hasOwnProperty()</code></td>
<td>判断属性是否是变量自身拥有的而不是继承的</td>
<td><code>person.hasOwnProperty(‘name’); //true</code> <br> <code>person. hasOwnProperty(‘toString’); //false</code></td>
</tr>
</tbody></table>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量名规范：大小写英文、数字、$和_的组合，且不能用数字开头，不能是JavaScript的关键字，一般是<strong>驼峰式</strong>命名</p>
<ul>
<li>申明变量用<code>var</code>语句，只能申明一次<ul>
<li><code>let</code>和<code>const</code>都是块级声明，不同点在于<code>const</code>声明后值无法修改</li>
<li>详见<a href="https://www.cnblogs.com/forcheng/p/13033976.html">var, let, const异同</a></li>
</ul>
</li>
<li>变量赋值用<code>=</code>，JavaScript是动态语言，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，可以是不同类型的变量</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a; <span class="comment">// 申明了变量a，此时a的值为undefined</span></span><br><span class="line"><span class="keyword">var</span> $b = <span class="number">1</span>; <span class="comment">// 申明了变量$b，同时给$b赋值，此时$b的值为1</span></span><br><span class="line"><span class="keyword">var</span> s_007 = <span class="string">&#x27;007&#x27;</span>; <span class="comment">// s_007是一个字符串</span></span><br><span class="line"><span class="keyword">var</span> Answer = <span class="literal">true</span>; <span class="comment">// Answer是一个布尔值true</span></span><br><span class="line"><span class="keyword">var</span> t = <span class="literal">null</span>; <span class="comment">// t的值是null</span></span><br></pre></td></tr></table></figure>

<p>要显示变量的内容，可以用<code>console.log(x)</code></p>
<p><strong>strict模式</strong></p>
<p>JavaScript中，如果一个变量没有通过<code>var</code>申明就被使用，那么该变量就自动被申明为全局变量：</p>
<p>strict模式下，强制通过<code>var</code>申明变量，未使用<code>var</code>申明变量就使用的，将导致运行错误。<br>启用strict模式的方法是在JavaScript代码的第一行写上：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>这是一个字符串，不支持strict模式的浏览器将报错</p>
<h1 id="条件和循环"><a href="#条件和循环" class="headerlink" title="条件和循环"></a>条件和循环</h1><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> () &#123;</span><br><span class="line">	…</span><br><span class="line">&#125; elseif () &#123;</span><br><span class="line">	…</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	…</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="For"><a href="#For" class="headerlink" title="For"></a>For</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=<span class="number">100</span>; i++) &#123;</span><br><span class="line">	…</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="For-in"><a href="#For-in" class="headerlink" title="For in"></a>For in</h3><p>遍历<strong>对象、数组、字符串</strong>的<code>key</code></p>
<p>遍历对象，可以用<code>hasOwnProperty()</code>过滤继承的属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">city</span>: <span class="string">&#x27;Beijing&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> o) &#123;</span><br><span class="line">    <span class="keyword">if</span> (o.hasOwnProperty(key)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(key); <span class="comment">// &#x27;name&#x27;, &#x27;age&#x27;, &#x27;city&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>遍历数组，索引就是<code>key</code>，可以通过索引循环访问</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> a) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i); <span class="comment">// &#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;</span></span><br><span class="line">    <span class="built_in">console</span>.log(a[i]); <span class="comment">// &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="for-of"><a href="#for-of" class="headerlink" title="for of"></a>for of</h3><p>遍历<strong>对象、数组、字符串</strong>的<code>value</code>，比较快捷</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line">myArray.name = <span class="string">&quot;数组&quot;</span>;</span><br><span class="line">myArray.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="built_in">this</span>.name; &#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> value <span class="keyword">of</span> myArray) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="While"><a href="#While" class="headerlink" title="While"></a>While</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">while () &#123;…&#125;</span><br><span class="line">do &#123;…&#125; while ()</span><br></pre></td></tr></table></figure>

<h1 id="Iterable：Map-amp-Set"><a href="#Iterable：Map-amp-Set" class="headerlink" title="Iterable：Map &amp; Set"></a>Iterable：Map &amp; Set</h1><p>JavaScript的对象有个小问题，就是键必须是字符串。但实际上Number或者其他数据类型作为键也是非常合理的。</p>
<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>Map是一组key-value键值对结构，具有极快的查找速度。对一个key多次赋不同的value会覆盖之前的值</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>解释</th>
<th>用例</th>
</tr>
</thead>
<tbody><tr>
<td><code>new Map()</code></td>
<td>创建Map</td>
<td><code>var m = new Map(); // 空Map</code></td>
</tr>
<tr>
<td><code>set(key,value)</code></td>
<td>添加键值对</td>
<td><code>m.set(&#39;Adam&#39;, 67); // 添加新的key-value</code></td>
</tr>
<tr>
<td><code>has(key) </code></td>
<td>检验key是否存在</td>
<td><code>m.has(&#39;Adam&#39;); // 是否存在key &#39;Adam&#39;: true</code></td>
</tr>
<tr>
<td><code>get(key) </code></td>
<td>访问key对应的值</td>
<td><code>m.get(&#39;Adam&#39;); // 67</code></td>
</tr>
<tr>
<td><code>delete(key) </code></td>
<td>删除元素</td>
<td><code>m.delete(&#39;Adam&#39;); // 删除key &#39;Adam&#39;</code></td>
</tr>
</tbody></table>
<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>Set和Map类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在Set中，没有重复的key，重复的元素会自动被过滤。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>解释</th>
<th>用例</th>
</tr>
</thead>
<tbody><tr>
<td><code>new Set()</code></td>
<td>创建Set</td>
<td><code>var s1 = new Set(); // 空Set</code> <br><code>var s2 = new Set([1, 2, 3]); // 含1, 2, 3</code></td>
</tr>
<tr>
<td><code>add(key)</code></td>
<td>添加元素，可以重复添加，但不会有效果</td>
<td><code>s.add(4);</code></td>
</tr>
<tr>
<td><code>delete(key)</code></td>
<td>删除元素</td>
<td><code>s.delete(3);</code></td>
</tr>
</tbody></table>
<h2 id="Iterable"><a href="#Iterable" class="headerlink" title="Iterable"></a>Iterable</h2><p>ES6标准引入了新的iterable类型，Array、Map和Set都属于iterable类型。</p>
<p>在<code>for … in</code>循环中，它遍历的是对象的属性，所以如果给Array对象手动增加属性，会导致属性也被遍历。</p>
<p>通过新的<code>for ... of</code>循环来遍历，可以解决这个问题</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>]);</span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="number">1</span>, <span class="string">&#x27;x&#x27;</span>], [<span class="number">2</span>, <span class="string">&#x27;y&#x27;</span>], [<span class="number">3</span>, <span class="string">&#x27;z&#x27;</span>]]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">of</span> a) &#123; <span class="comment">// 遍历Array</span></span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">of</span> s) &#123; <span class="comment">// 遍历Set</span></span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">of</span> m) &#123; <span class="comment">// 遍历Map</span></span><br><span class="line">  <span class="built_in">console</span>.log(x[<span class="number">0</span>] + <span class="string">&#x27;=&#x27;</span> + x[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此外，iterable还内置了<code>forEach()</code>方法</p>
<p><strong>Array</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>];</span><br><span class="line">a.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// element: 指向当前元素的值</span></span><br><span class="line">  <span class="comment">// index: 指向当前索引</span></span><br><span class="line">  <span class="comment">// array: 指向Array对象本身</span></span><br><span class="line">  <span class="built_in">console</span>.log(element + <span class="string">&#x27;, index = &#x27;</span> + index);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>Set</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>]);</span><br><span class="line">s.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">element, sameElement, set</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(element);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>Map</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="number">1</span>, <span class="string">&#x27;x&#x27;</span>], [<span class="number">2</span>, <span class="string">&#x27;y&#x27;</span>], [<span class="number">3</span>, <span class="string">&#x27;z&#x27;</span>]]);</span><br><span class="line">m.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value, key, map</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数基础"><a href="#函数基础" class="headerlink" title="函数基础"></a>函数基础</h2><p><strong>函数定义</strong></p>
<p><code>function 函数名(参数) &#123;函数体&#125;</code></p>
<p><code>return</code>语句返回结果，没有<code>return</code>返回<code>undefined</code></p>
<p><code>var 函数名=function(参数) &#123;函数体&#125;;</code></p>
<p>注意第二种定义最后要加分号<code>;</code></p>
<p><strong>函数调用</strong></p>
<p>函数名(输入参数)，按顺序输入参数，参数比定义的多或少都不会报错，但会因为参数为undefined不能完成功能，可以在函数中进行参数检查</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abs</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> x !== <span class="string">&#x27;number&#x27;</span>) &#123;<span class="keyword">throw</span> <span class="string">&#x27;Not a number&#x27;</span>;&#125;</span><br><span class="line">    …</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>arguments</strong></p>
<p>只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数，即使函数没有定义形参也能获取实参，常用于判断传入参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;x = &#x27;</span> + <span class="built_in">arguments</span>[<span class="number">0</span>]); <span class="comment">// 10</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">​    <span class="built_in">console</span>.log(<span class="string">&#x27;arg &#x27;</span> + i + <span class="string">&#x27; = &#x27;</span> + <span class="built_in">arguments</span>[i]); <span class="comment">// 10, 20, 30</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">foo(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br></pre></td></tr></table></figure>

<p><strong>rest参数</strong></p>
<p>指向除了函数内已定义参数的其他输入参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">...rest</span>) </span>&#123;</span><br><span class="line">  s=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;rest.length;i++)&#123;</span><br><span class="line">​    <span class="keyword">if</span> (<span class="keyword">typeof</span> rest[i]===<span class="string">&#x27;number&#x27;</span>)&#123;</span><br><span class="line">​      s+=rest[i];</span><br><span class="line">​    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i, args = [];</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=<span class="number">100</span>; i++) &#123;</span><br><span class="line">  args.push(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sum() !== <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;测试失败: sum() = &#x27;</span> + sum());</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum(<span class="number">1</span>) !== <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;测试失败: sum(1) = &#x27;</span> + sum(<span class="number">1</span>));</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum(<span class="number">2</span>, <span class="number">3</span>) !== <span class="number">5</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;测试失败: sum(2, 3) = &#x27;</span> + sum(<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum.**apply**(<span class="literal">null</span>, args) !== <span class="number">5050</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;测试失败: sum(1, 2, 3, ..., 100) = &#x27;</span> + sum.apply(<span class="literal">null</span>, args));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;测试通过!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br></pre></td></tr></table></figure>

<p>由于JavaScript引擎会自动在句末添加分号，可能会导致语句无法执行，正确的写法是把<code>return &#123;</code>写在一行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="comment">// 这里不会自动加分号，因为&#123;表示语句尚未结束</span></span><br><span class="line">​    name: <span class="string">&#x27;foo&#x27;</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="变量作用域与结构赋值"><a href="#变量作用域与结构赋值" class="headerlink" title="变量作用域与结构赋值"></a>变量作用域与结构赋值</h2><p><strong>作用域</strong></p>
<p>函数内部声明的变量作用域为整个函数</p>
<p>嵌套的函数内部可以访问外部函数的变量</p>
<p>JavaScript编译时会先扫描函数体把所有声明的变量提升到函数顶部，所以通常首先声明所有变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  **<span class="keyword">var</span>**</span><br><span class="line">​    x = <span class="number">1</span>, <span class="comment">// x初始化为1</span></span><br><span class="line">​    y = x + <span class="number">1</span>, <span class="comment">// y初始化为2</span></span><br><span class="line">​    z, i; <span class="comment">// z和i为undefined</span></span><br><span class="line">  <span class="comment">// 其他语句:</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不在函数内部声明的变量就是<strong>全局变量</strong>，默认绑定到全局对象<code>window</code></p>
<p><strong>名字空间</strong></p>
<p>全局变量会绑定到<code>window</code>上，不同的js文件如果使用了相同的全局变量，或者定义了相同名字的顶层函数，都会造成命名冲突</p>
<p>减少冲突的一个方法是把自己的所有变量和函数全部绑定到一个全局变量中。例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 唯一的全局变量MYAPP:</span></span><br><span class="line"><span class="keyword">var</span> MYAPP = &#123;&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 其他变量:</span></span><br><span class="line">MYAPP.name = <span class="string">&#x27;myapp&#x27;</span>;</span><br><span class="line">MYAPP.version = <span class="number">1.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他函数:</span></span><br><span class="line">MYAPP.foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>局部作用域</strong></p>
<p>用关键字let替代var声明变量，可以使for循环等语句中定义的变量具有块级（函数）作用域</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (**<span class="keyword">let</span>** i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;...&#125;</span><br></pre></td></tr></table></figure>

<p><strong>常量</strong></p>
<p><code>const</code>定义常量，具有块级作用域</p>
<p><strong>解构赋值</strong></p>
<p>直接对多个变量同时赋值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> [x, y, z] = [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;JavaScript&#x27;</span>, <span class="string">&#x27;ES6&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> [x, [y, z]] = [<span class="string">&#x27;hello&#x27;</span>, [<span class="string">&#x27;JavaScript&#x27;</span>, <span class="string">&#x27;ES6&#x27;</span>]];</span><br><span class="line"><span class="keyword">let</span> [, , z] = [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;JavaScript&#x27;</span>, <span class="string">&#x27;ES6&#x27;</span>];</span><br></pre></td></tr></table></figure>

<p>从一个对象中取出若干属性，对象中嵌套的属性也可以</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">  <span class="attr">passport</span>: <span class="string">&#x27;G-12345678&#x27;</span>,</span><br><span class="line"><span class="attr">school</span>: <span class="string">&#x27;No.4 middle school&#x27;</span></span><br><span class="line"><span class="attr">address</span>: &#123;</span><br><span class="line">​    city: <span class="string">&#x27;Beijing&#x27;</span>,</span><br><span class="line">​    street: <span class="string">&#x27;No.1 Road&#x27;</span>,</span><br><span class="line">​    zipcode: <span class="string">&#x27;100001&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123;name, age, passport&#125; = person;</span><br><span class="line"><span class="keyword">var</span> &#123;gender, <span class="attr">address</span>: &#123;city, zip&#125;&#125; = person;</span><br><span class="line"><span class="string">``</span><span class="string">`    </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">如果要使用的变量名和属性名不一致，可以用下面的语法获取</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js </span><br><span class="line"><span class="keyword">let</span> &#123;name, <span class="attr">passport</span>:id&#125; = person;</span><br><span class="line">name; <span class="comment">// &#x27;小明&#x27;</span></span><br><span class="line">id; <span class="comment">// &#x27;G-12345678&#x27;，passport不是变量</span></span><br></pre></td></tr></table></figure>

<p>解构赋值还可以使用默认值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> &#123;name, single=<span class="literal">true</span>&#125; = person;</span><br></pre></td></tr></table></figure>

<p>如果变量已经被声明了，使用{}批量赋值会报错，可以用小括号括起来</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(&#123;x, y&#125; = &#123; <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>, <span class="attr">x</span>: <span class="number">100</span>, <span class="attr">y</span>: <span class="number">200</span>&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>实例</strong></p>
<p>交换两个变量的值：<code>[x,y]=[y,x]</code></p>
<p>快速获取当前页面的域名和路径：<code>var &#123;hostname:domain, pathname:path&#125; = location;</code></p>
<p>如果函数把对象作为参数，可以直接把对象属性绑定到变量上，如输入<code>Date</code>对象</p>
<p><code>function buildDate(&#123;year, month, day, hour=0, minute=0, second=0&#125;)&#123;...&#125;</code></p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>绑定到对象上的函数称为方法，在一个方法内部，<code>this</code>是一个特殊变量，它始终指向当前对象</p>
<p>用<code>var that = this</code>;，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">    <span class="attr">birth</span>: <span class="number">1990</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> that = <span class="built_in">this</span>; <span class="comment">// 在方法内部一开始就捕获this</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">getAgeFromBirth</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> y = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">            <span class="keyword">return</span> y - that.birth; <span class="comment">// 用that而不是this</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> getAgeFromBirth();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">xiaoming.age(); <span class="comment">// 25</span></span><br></pre></td></tr></table></figure>

<p><strong>apply</strong></p>
<p>要指定函数的<code>this</code>指向哪个对象，可以用函数本身的<code>apply</code>方法，它接收两个参数，第一个参数就是需要绑定的<code>this</code>变量，第二个参数是<code>Array</code>，表示函数本身的参数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> y = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">    <span class="keyword">return</span> y - <span class="built_in">this</span>.birth;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">    <span class="attr">birth</span>: <span class="number">1990</span>,</span><br><span class="line">    <span class="attr">age</span>: getAge</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">xiaoming.age(); <span class="comment">// 25</span></span><br><span class="line">getAge.apply(xiaoming, []); <span class="comment">// 25, this指向xiaoming, 参数为空</span></span><br></pre></td></tr></table></figure>

<p><strong>call</strong></p>
<p>与<code>apply()</code>类似，区别是：</p>
<p><code>apply()</code>把参数打包成Array再传入；</p>
<p><code>call()</code>把参数按顺序传入。</p>
<p>比如调用<code>Math.max(3, 5, 4)</code>，分别用<code>apply()</code>和<code>call()</code>实现如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, [<span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>]); <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">Math</span>.max.call(<span class="literal">null</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>
<p>对普通函数调用，我们通常把<code>this</code>绑定为<code>null</code>。</p>
<p><strong>修饰器</strong></p>
<p>利用<code>apply()</code>，我们还可以动态改变函数的行为。JavaScript的所有对象都是动态的，即使内置的函数，我们也可以重新指向新的函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> oldParseInt = <span class="built_in">parseInt</span>; <span class="comment">// 保存原函数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.parseInt = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  count += <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> oldParseInt.apply(<span class="literal">null</span>, <span class="built_in">arguments</span>); <span class="comment">// 调用原函数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>JavaScript笔记</category>
      </categories>
      <tags>
        <tag>front end</tag>
        <tag>JavaScript</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>DL笔记1：Linear Regression</title>
    <url>/2021/07/14/deeplearning/dl1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>参考资料：</strong><br><a href="https://cuijiahua.com/blog/2018/10/dl-7.html">感知器</a><br><a href="https://cuijiahua.com/blog/2018/11/dl-8.html">线性单元</a><br><a href="https://www.bilibili.com/video/BV1JE411g7XF?p=3">李宏毅2020:Regression</a><br><a href="https://datawhalechina.github.io/leeml-notes/#/chapter3/chapter3">李宏毅2020:Regression-文字版</a></p>
<h1 id="感知器"><a href="#感知器" class="headerlink" title="感知器"></a>感知器</h1><p>感知器，激活函数是阶跃函数，和神经元的本质上一样，只是激活函数不同<br>上世纪提出的感知器的概念，现在<br><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/DL/pics/regression/1.png"></p>
<h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><ul>
<li>输入<ul>
<li>特征向量 $x&#x3D;(x_1,x_2,…x_n)$</li>
<li>权值 $w&#x3D;(w_1,w_2,…,w_n)$</li>
<li>偏置项 $b$</li>
</ul>
</li>
<li>激活函数<ul>
<li>$f(z)&#x3D;\left{\begin{array}{lr}<br>1 &amp; z&gt;0 \<br>0 &amp; \text { otherwise }<br>\end{array}\right.$</li>
</ul>
</li>
<li>输出<ul>
<li>$y&#x3D;f(wx+b)$</li>
</ul>
</li>
</ul>
<h3 id="二分类问题"><a href="#二分类问题" class="headerlink" title="二分类问题"></a>二分类问题</h3><p>感知器模型可以用于解决二分类问题：对给定输入，输出0或1</p>
<h4 id="例-感知器实现布尔运算"><a href="#例-感知器实现布尔运算" class="headerlink" title="例 感知器实现布尔运算"></a>例 感知器实现布尔运算</h4><p>输入: $x&#x3D;(x_1,  x_2)$<br>输出: $y&#x3D;f(w·x+b)$</p>
<p>激励函数: 阶跃函数 实现二分类</p>
<ol>
<li><p>and 与运算<br>$w 1&#x3D;0.5, \quad w 2&#x3D;0.5, \quad b&#x3D;-0.8$<br>$f(z)&#x3D;\left{\begin{array}{l}1 &amp; z&gt;0 \ 0 &amp; \text { otherwise }\end{array}\right.$</p>
</li>
<li><p>or 或运算<br>$w 1&#x3D;0.5, \quad w 2&#x3D;0.5, \quad b&#x3D;-0.3$<br>$f(z)&#x3D;\left{\begin{array}{l}1 &amp; z&gt;0 \ 0 &amp; \text { otherwise }\end{array}\right.$</p>
</li>
</ol>
<p>上述例子是线性可分的问题<br>如图 and 用线性函数可以把true和false分开<br><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/DL/pics/regression/2.png"></p>
<h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><p>优化目标：使损失最小的输入权值w和偏置项b</p>
<h3 id="感知器训练算法"><a href="#感知器训练算法" class="headerlink" title="感知器训练算法"></a>感知器训练算法</h3><ol>
<li>初始化<br> $w$和$b$初始化为0</li>
<li>迭代<br> $\begin{aligned} &amp;w_{i} &amp; \leftarrow &amp;\quad w_{i}+\Delta w_{i} \ &amp;b &amp; \leftarrow &amp;\quad b+\Delta b \end{aligned}$<br> 其中<br> $\begin{aligned} &amp;\Delta w_{i} &amp; &#x3D;&amp;\quad \eta (t-y)x_i \ &amp;\Delta b &amp; &#x3D;&amp;\quad \eta (t-y) \end{aligned}$</li>
</ol>
<table>
<thead>
<tr>
<th>数学表达</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>$y$</td>
<td>感知器的输出值</td>
</tr>
<tr>
<td>$t$</td>
<td>target&#x2F;label，训练样本的真实值</td>
</tr>
<tr>
<td>$\eta $</td>
<td>学习速率</td>
</tr>
</tbody></table>
<h1 id="线性单元"><a href="#线性单元" class="headerlink" title="线性单元"></a>线性单元</h1><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>DeepLearning</category>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>DeepLearning</tag>
        <tag>LHY2020</tag>
      </tags>
  </entry>
  <entry>
    <title>爱してるばんざーい</title>
    <url>/2021/07/08/karaoke/karaoke1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=26111167&auto=1&height=66"></iframe>
<span id="more"></span>

<p>爱してるばんざーい!<br>aishiteru banzai!<br>ここでよかった　私たちの今がここにある<br>koko de yokatta    watashitachi no ima ga koko ni aru<br>爱してるばんざーい!<br>aishiteru banzai!<br>始まったばかり　明日もよろしくね　<br>hajimatta bakari     ashita mo yoroshikune </p>
<p>笑ってよ　悲しいなら吹きとばそうよ<br>waratteyo kanashii- nara    fukitoba sou–yo<br>笑えたら変わる景色　晴れ间がのぞく<br>warae tara kawaru keshiki    harema ga nozoku<br>不安でもしあわせへと繋がる道が<br>fuan demo shiawase eto tsunagaru michi ga<br>见えてきたよな青空<br>mietekita yona aozora<br>时々雨が降るけど水がなくちゃたいへん<br>tokidoki ame ga furukedo mizu ga nakucha taihen<br>乾いちゃだめだよ　みんなの梦の木よ育て<br>kawaicha damedayo    minna no yume no kiyo sodate—</p>
<p>さあ!<br>saa!<br>大好きだばんざーい!<br>daisukida banzai!<br>まけないゆうき　私たちは今を楽しもう<br>makenai yuuki    watashitachi wa ima o tanoshimou–<br>大好きだばんざーい!<br>daisukida banzai!<br>顽张れるから　昨日に手をふって　<br>ganbareru kara    kinou ni te o futte<br>ほら前向いて<br>hora    mae muite</p>
<p>进んでよ　苦しくても隣にいてよ<br>susundeyo kurushiku temo    tonari ni iteyo<br>进んだら燃える太阳　东を照らす<br>susundara moeru taiyou     higashi o terasu<br>迷ってた答えがない先への道は<br>mayotteta kokotae ga nai saki eno michi wa<br>谁も知らない言えない<br>dare mo shiranai ienai<br>突然岚のなかへ落ちる银のひかり<br>totsuzen arashi no naka e     ochiru gin no hikari<br>怯えちゃだめだよみんなの梦の木は强い<br>obiecha damedayo minna no yume no ki wa tsuyoi</p>
<p>さあ!<br>saa!<br>爱してるばんざーい!<br>aishiteru banzai!<br>ここでよかった　私たちの今がここにある<br>koko de yokatta watashitachi no ima ga koko ni aru</p>
<p>爱してるばんざーい!<br>aishiteru banzai!<br>始まったばかり　明日もよろしくね　<br>hajimatta bakari    ashita mo yoroshikune<br>まだゴールじゃない<br>mada GOORU janai</p>
<p>时々雨が降るんだ　风で干が揺れる<br>tokidoki ame ga furunda    kaze de miki ga yureru<br>一绪にいくんだ　みんなの梦の木よ育て<br>issho ni ikunda minna no yume no ki yo sodate</p>
<p>さあ!<br>saa<br>大好きだばんざーい!<br>daisukida banzai<br>まけないゆうき　私たちは今を楽しもう<br>makenai yuuki    watashitachi wa ima wo    tanoshi mou–<br>大好きだばんざーい!<br>daisukida banzai<br>顽张れるから　昨日に手をふって　<br>ganbareru kara   kinou ni te wofutte<br>ほら前向いて<br>hora    mae mui te</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>KTV小助手</category>
        <category>LoveLive</category>
      </categories>
      <tags>
        <tag>karaoke</tag>
        <tag>LL</tag>
      </tags>
  </entry>
  <entry>
    <title>残酷な天使のテーゼ</title>
    <url>/2021/07/08/karaoke/karaoke10/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=657666&auto=1&height=66"></iframe>
<span id="more"></span>

<p>残酷な天使のように 少年よ 神话になれ<br>zankoku na tenshi no youni    shounen yo shinwa ni na re</p>
<p>苍い风がいま 胸のドアを叩いても<br>aoi kaze ga ima    mune no doa wo tatai temo<br>私だけを ただ见つめて 微笑んでるあなた<br>watashi dake wo    tada mitsume te    hohoen deru anata<br>そっとふれるもの もとめることに梦中で<br>sotto fureru mono    motomeru koto ni muchuu de<br>运命さえ まだ知らない いたいけな瞳<br>unmei sae    mada shiranai    itai ke na hi to mi</p>
<p>だけどいつか气付くでしょう その背中には<br>dakedo itsuka kitsuku deshyou    sono senaka ni wa<br>遥か未来 めざすための 羽根があること<br>haruka mirai mezasu tame no hane ga aru koto</p>
<p>残酷な天使のテ－ゼ 窗边からやがて飞び立つ<br>zankoku na tenshi no teeze    madobe kara yagate tobitatsu<br>ほとばしる热いパトスで 思い出を里切るなら<br>hotoba shiru atsui patosu de    omoide wo uragiru nara<br>この宇宙を抱いて辉く 少年よ 神话になれ<br>kono sora wo daite kagayaku    shounen yo shinwa ni na re</p>
<hr>
<p>ずっと眠ってる 私の爱の摇りかご<br>tsutto nemu u teru    watashi no ai no yurikago<br>あなただけが 梦の使者に 呼ばれる朝がくる<br>anata dake ga    yume no shisha ni    yobareru asa ga kuru<br>细い首筋を 月あかりが映してる<br>hosoi kubisuji wo    tsuki akari ga utsushi te ru<br>世界中の时を止めて 闭じこめたいけど<br>sekai chu u no toki wo tomete    tojikome tai ke do</p>
<p>もしもふたり逢えたことに 意味があるなら<br>moshimo futari aeta koto ni    imi ga aru na ra<br>私はそう 自由を知る ためのバイブル<br>watashi wa sou jiyuu wo shiru tame no baiburu</p>
<p>残酷な天使のテ－ゼ 悲しみがそしてはじまる<br>zankoku na tenshi no teeze    kanashimi ga soshite hajimaru<br>抱きしめた命のかたち その梦に目觉めたとき<br>dakishime ta inochi no katachi    so no yume ni mezameta toki<br>谁よりも光を放つ 少年よ 神话になれ<br>dare yori mo hikari wo hanatsu shounen yo shinwa ni na re</p>
<p>人は爱をつむぎながら 历史をつくる<br>hito wa ai wo tsumugi na ga ra    rekishi wo tsukuru<br>女神なんてなれないまま 私は生きる<br>megami nante nare nai mama    watashi wa ikiru</p>
<p>残酷な天使のテ－ゼ 窗边からやがて飞び立つ<br>zankoku na tenshi no teeze    madobe kara yagate tobitatsu<br>ほとばしる热いパトスで 思い出を里切るなら<br>hotoba shiru atsui patosu de    omoide wo uragiru nara<br>この宇宙を抱いて辉く 少年よ 神话になれ<br>kono sora wo daite kagayaku    shounen yo shinwa ni na re</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>KTV小助手</category>
      </categories>
      <tags>
        <tag>karaoke</tag>
        <tag>EVA</tag>
      </tags>
  </entry>
  <entry>
    <title>Komm, süsser Tod</title>
    <url>/2021/07/08/karaoke/karaoke11/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=1483488615&auto=1&height=66"></iframe>
<span id="more"></span>

<p>I know, I know I’ve let you down<br>我知道 我知道 是我让你失望了<br>I’ve been a fool to myself<br>对自己来说我不过是傻瓜<br>I thought that I could live for no one else<br>我一直以为我只能是为你而活<br>But now, through all the hurt and pain<br>但是现在却只是通过伤害和苦痛<br>It’s time for me to respect<br>到了我该有所敬畏的时候了<br>the ones you love mean more than anything<br>你爱的人比什么都重要<br>So with sadness in my heart<br>这真让我感觉满心苦楚<br>feel the best thing I could do<br>我想我真的该做<br>Is end it all and leave forever<br>结束了所有的一切 再永远地离开<br>What’s done is done it feels so bad<br>应该做的都已经做完 那是多么浩大的伤感<br>What once was happy now is sad<br>曾经的快乐现在成了悲伤<br>I’ll never love again my world is ending<br>我失去了再爱的心 我的世界已经完了<br>I wish that I could turn back time<br>我希望我能让时间倒转<br>‘Cos now the guilt is all mine<br>因为这都是我的罪孽<br>Can’t live without the trust from those you love<br>倘若是没有了你爱的信任我会无法生存<br>I know we can’t forget the past<br>我知道我们无法遗忘那些过去<br>You can’t forget love and pride<br>你也不能忘却爱和骄傲<br>Because of that it’s killing me inside<br>因为这样 这将把我扼杀</p>
<p>It all returns to nothing<br>一切化为乌有<br>It all comes tumbling down<br>所有的一切都倒下来吧<br>Tumbling down, tumbling down<br>倒下来 倒下来<br>It all returns to nothing<br>一切都化为了乌有<br>I just keep letting me down<br>我也让自己让我失望<br>Letting me down, letting me down<br>让我失望 让我失望<br>In my heart of hearts<br>在我内心深处<br>I know that I could never love again<br>我知道我再也不会有爱<br>I’ve lost everything, everything<br>我已经失去了所有<br>Everything that matters to me, matters in this world<br>一切与我有关的与这个世界有关的麻烦<br>I wish that I could turn back time<br>我希望我能让时间倒转<br>Cause now the guilt is all mine<br>因为这都是我的罪孽<br>Can’t live without the trust from those you love<br>倘若是没有了你爱的信任我会无法生存<br>I know we can’t forget the past<br>我知道我们无法遗忘那些过去<br>You can’t forget love and pride<br>你也不能忘却爱和骄傲<br>Because of that it’s killing me inside<br>因为这样 这将把我扼杀</p>
<p>It all returns to nothing<br>一切化为乌有<br>It just keeps tumbling down<br>所有的一切都倒下来吧<br>Tumbling down, tumbling down<br>倒下来 倒下来<br>It all returns to nothing<br>一切都化为了乌有<br>I just keep letting me down<br>我也让自己让我失望<br>Letting me down, letting me down<br>让我失望 让我失望</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>KTV小助手</category>
      </categories>
      <tags>
        <tag>karaoke</tag>
        <tag>EVA</tag>
      </tags>
  </entry>
  <entry>
    <title>VOYAGER～日付のない墓標</title>
    <url>/2021/07/08/karaoke/karaoke12/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=1854433633&auto=1&height=66"></iframe>
<span id="more"></span>

<p>傷ついた友達さえ<br>Kizutsuita tomodachi sae<br>置き去りにできるソルジャー<br>Okizari ni dekiru sorujā(soldier)<br>あなたの苦しさを私だけに<br>Anata no kurushi-sa o watashi dakeni<br>つたえていってほしい<br>Tsutaete i  tte hoshī<br>忘れない<br>Wasurenai<br>自分のためだけに<br>Jibun no tame dake ni<br>生きられなかった淋さみしいひと<br>Iki rarenakatta Samishī hito</p>
<p>私があなたと知り合えたことを<br>Watashi ga anata to shiriaeta koto o<br>私があなたを愛してたことを<br>Watashi ga anata o aishi teta koto o<br>死ぬまで死ぬまで誇りにしたいから<br>Shinu made shinu made hokori ni shitaikara</p>
<p>冷い夢に乗り込んで<br>Tsumetai yume ni norikonde<br>宇宙に消えるヴォイジャー<br>aosora ni kieru vu~oijā(voyager)<br>いつでも人々を変えるものに<br>Itsu demo hitobito o kaeru mono ni<br>人々は気づかない<br>Hitobito wa kidzukanai<br>行く先は どれくらい遠いの<br>Yukusaki wa dore kurai tōi no<br>もう二度と戻れないの<br>Mō nidoto modorenai no</p>
<p>私があなたと知り合えたことを<br>Watashi ga anata to shiriaeta koto o<br>私があなたを愛してたことを<br>Watashi ga anata o aishi teta koto o<br>死ぬまで死ぬまで誇りにしたいから<br>Shinu made shinu made hokori ni shitaikara</p>
<p>私があなたと知り合えたことを<br>Watashi ga anata to shiriaeta koto o<br>私があなたを愛してたことを<br>Watashi ga anata o aishi teta koto o<br>死ぬまで死ぬまで誇りにしたいから<br>Shinu made shinu made hokori ni shitaikara<br>私があなたと知り合えたことを<br>Watashi ga anata to shiriaeta koto o<br>私があなたを愛してたことを<br>Watashi ga anata o aishi teta koto o<br>死ぬまで死ぬまで誇りにしたいから<br>Shinu made shinu made hokori ni shitaikara</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>KTV小助手</category>
      </categories>
      <tags>
        <tag>karaoke</tag>
        <tag>EVA</tag>
        <tag>演歌</tag>
      </tags>
  </entry>
  <entry>
    <title>START:DASH!!</title>
    <url>/2021/07/08/karaoke/karaoke14/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=26218091&auto=1&height=66"></iframe>

<span id="more"></span>

<p>I say…<br>Hey,hey,hey,START:DASH!!<br>Hey,hey,hey,START:DASH!!<br>うぶ毛の小鸟たちも<br>ubuke no kotoritachi mo<br>いつか空に羽ばたく<br>itsuka sora ni habataku<br>大きな强い翼で飞ぶ<br>ookina tsuyoi tsubasa de tobu<br>谛めちゃダメなんだ<br>akiramecha dame nanda<br>その日が绝対来る<br>sono hi ga zettai kuru<br>君も感じてるよね<br>kimi mo kanjiteruyone<br>始まりの鼓动<br>hajimari no kodou<br>明日よ変われ!<br>ashitayo kaware !<br>希望に変われ!<br>kibou ni kaware !<br>眩しい光に照らされて変われ<br>mabushii hikari ni terasarete kaware<br>START!!</p>
<p>悲しみに闭ざされて<br>kanashimi ni tozasarete<br>泣くだけの君じゃない<br>naku dakeno kimi janai<br>热い胸　きっと未来を切り开く筈さ<br>atsui mune kitto mirai wo kiri hiraku hazusa<br>悲しみに闭ざされて<br>kanashimi ni tozasarete<br>泣くだけじゃつまらない<br>naku dakeja tsumaranai<br>きっと （きっと） 君の （梦の）<br>kitto ( kitto ) kimi no ( yume no )<br>チカラ （いまを） 动かすチカラ<br>chikara ( ima wo ) ugokasu chikara<br>信じてるよ…だから START!!<br>shinjiteruyo … dakara START!!</p>
<p>雨上がりの気分で<br>ame agari no kibun de<br>高まる期待のなか<br>takamaru kitai no naka<br>踬いたことさえも<br>tsumazuita koto saemo<br>思い出にしよう<br>omoide ni shiyou<br>明日が咲くよ!<br>ashita ga sakuyo !<br>希望が咲くよ!<br>kibou ga sakuyo !<br>楽しいメロディー口ずさみ咲いた<br>tanoshii merodei(melody)^ kuchi zusami saita<br>DASH!!</p>
<p>喜びを受けとめて<br>yorokobi wo uketomete<br>君と仆つながろう<br>kimi to boku tsunagarou<br>迷い道　やっと外へ抜けだした筈さ<br>mayoi michi yatto soto e nuke dashita hazusa<br>喜びを受けとめて<br>yorokobi wo uketomete<br>君と仆　进むだろう<br>kimi to boku susumu darou<br>それは （それは） 远い （梦の）<br>sore wa ( sore wa ) tooi ( yume no )<br>カケラ （だけど） 爱しいカケラ<br>kakera ( dakedo ) itoshii kakera<br>彼方へと…仆は DASH!!<br>kanata eto … boku wa DASH!!<br>またひとつ　梦が生まれ…</p>
<p>mata hitotsu yume ga umare …<br>悲しみに闭ざされて<br>kanashimi ni tozasarete<br>泣くだけの君じゃない<br>naku dakeno kimi janai<br>热い胸　きっと未来を切り开く筈さ<br>atsui mune kitto mirai wo kiri hiraku hazusa<br>喜びを受けとめて<br>yorokobi wo uketomete<br>君と仆つながろう<br>kimi to boku tsunagarou<br>迷い道　やっと外へ抜けだした筈さ<br>mayoi michi yatto soto e nuke dashita hazusa<br>喜びを受けとめて<br>yorokobi wo uketomete<br>君と仆　进むだろう<br>kimi to boku susumu darou<br>それは （それは） 远い （梦の）<br>sore wa ( sore wa ) tooi ( yume no )<br>カケラ （だけど） 爱しいカケラ<br>kakera ( dakedo ) itoshii kakera<br>彼方へと…仆は DASH!!<br>kanata eto … boku wa DASH!!</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>KTV小助手</category>
        <category>LoveLive</category>
      </categories>
      <tags>
        <tag>karaoke</tag>
        <tag>LL</tag>
      </tags>
  </entry>
  <entry>
    <title>銀の龍の背に乗って</title>
    <url>/2021/07/08/karaoke/karaoke13/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=28661544&auto=1&height=66"></iframe>
<span id="more"></span>

<p>あの苍（あお）ざめた海の彼方で<br>ano aozameta umi no kanata de<br>今まさに谁かが伤んでいる<br>ima masani dareka ga itande iru<br>まだ飞べない雏たちみたいに<br>mada tobenai hina-tachi mitai ni<br>仆はこの非力を叹いている<br>boku wa kono hiriki o nageite iru</p>
<p>急げ悲しみ 翼に変われ<br>isoge kanashimi tsubasa ni kaware<br>急げ伤迹 罗针盤になれ<br>isoge kizuato rashinban ni nare<br>まだ飞べない雏たちみたいに<br>mada tobenai hina-tachi mitai ni<br>仆はこの非力を叹いている<br>boku wa kono hiriki o nageite iru</p>
<p>梦が迎えに来てくれるまで<br>yume ga mukae ni kite kureru made<br>震えて待ってるだけだった昨日<br>furuete matte rudakeda  tta kinō<br>明日 仆は龙の足元へ崖を登り<br>ashita boku wa ryū no ashimoto e gake o nobori<br>呼ぶよ「さあ、行（い）こうぜ」<br>yobu yo &#96;sā, ikou ze’</p>
<p>银の龙の背に乗って<br>gin’no ryū no seni notte<br>届けに行こう 命の砂漠へ<br>todoke ni ikou inochi no sabaku e<br>银の龙の背に乗って<br>gin’no ryū no seni notte<br>运んで行こう 雨云の涡を<br>hakonde ikou amagumo no uzu o</p>
<p>失うものさえ失ってなお<br>ushinau mono sae ushinatte nao<br>人はまだ谁かの指にすがる<br>hito wa mada dareka no yubi ni sugaru<br>柔らかな皮肤しかない理由（わけ）は<br>yawarakana hifu shika nai wake wa<br>人が人の伤みを聴くためだ<br>hito ga hito no itami o kiku tameda</p>
<p>急げ悲しみ 翼に変われ<br>isoge kanashimi tsubasa ni kaware<br>急げ伤迹 罗针盤になれ<br>isoge kizuato rashinban ni nare<br>まだ飞べない雏たちみたいに<br>mada tobenai hina-tachi mitai ni<br>仆はこの非力を叹いている<br>boku wa kono hiriki o nageite iru</p>
<p>わたボコリみたいな翼でも<br>wata bokori mitaina tsubasa demo<br>木の芽みたいな頼りない爪でも<br>kinome mitaina tayorinai tsume demo<br>明日 仆は龙の足元へ崖を登り<br>ashita boku wa ryū no ashimoto e gake o nobori<br>呼ぶよ「さあ、行（い）こうぜ」<br>yobu yo &#96;sā, ikou ze’</p>
<p>银の龙の背に乗って<br>gin’no ryū no seni notte<br>届けに行こう 命の砂漠へ<br>todoke ni ikou inochi no sabaku e<br>银の龙の背に乗って<br>gin’no ryū no seni notte<br>运んで行こう 雨云の涡を<br>hakonde ikou amagumo no uzu o</p>
<p>银の龙の背に乗って<br>gin’no ryū no seni notte<br>运んで行こう 雨云の涡を<br>hakonde ikou amagumo no uzu o</p>
<p>银の龙の背に乗って<br>gin’no ryū no seni notte<br>银の龙の背に乗って<br>gin’no ryū no seni notte</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>KTV小助手</category>
      </categories>
      <tags>
        <tag>karaoke</tag>
        <tag>演歌</tag>
      </tags>
  </entry>
  <entry>
    <title>硝子の花園</title>
    <url>/2021/07/08/karaoke/karaoke15/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=28341947&auto=1&height=66"></iframe>

<span id="more"></span>

<p>ユメの迷路…ユリの迷路…<br>Yume no meiro… Yuri no meiro…<br>憧れを語る目が<br>Akogare o kataru me ga<br>遠くを探してる時<br>Tōku o sagashi teru toki<br>寂しくなる私は<br>Sabishiku naru Watashi wa <br>ここにいると言いたいの<br>koko ni iru to iitai no<br>Ah!ふたりきりで硝子の花園へと<br>Ah! Futari kiri de   garasu no hanazono e to<br>誰もいない 誰もいらない<br>Dare mo inai   dare mo iranai<br>そっと＿（こ）われそうに咲きたい<br>Sotto koware-sō ni sakitai</p>
<p>秘密のブランコ<br>Himitsu no buranko<br>あなたと揺られながら今<br>Anata to yurenagara ima<br>ただ優しく見つめあうの<br>Tada yasashiku mitsume au no<br>恋に恋する少女の静かな溜息は<br>Koi ni koisuru shōjo no shizukana tameiki wa<br>Lonely…満ち足りたLonely<br>Lonely… Michitarita Lonely…</p>
<p>閉じこめたい心を<br>Tojikometai kokoro o<br>どこにも行かない様に<br>Dokoni mo ikanai yō ni<br>寂しいのよ<br>Sabishī no yo<br>私と＿＿（ここ）にいてよいつまでも<br>Watashi to koko ni iteyo itsu made mo<br>Ah!ユメの迷路 硝子の蝶々たちは<br>Ah! Yume no meiro garasu no chōchō-tachi wa<br>誘いながら 誘われてる<br>Sasoinagara sasowa re teru<br>指で＿（こ）われそうな羽ばたき<br>Yubi de koware-sōna habataki</p>
<p>内緒のロマンス<br>Naisho no romansu<br>あなたを感じたいのに<br>Anata o kanjitai noni<br>まだ切なく見つめるだけ<br>Mada setsunaku mitsumeru dake<br>恋を恋する少女でいられない気持ちに<br>Koi o koisuru shōjo de i rarenai kimochi ni<br>なぜ…苦しくなるの？<br>Naze… Kurushiku naru no?<br>ふたりきりの花園で眠りにつく<br>Futari kiri no hanazono de nemurini tsuku<br>髪を撫でるその手が好き もっと…<br>Kami o naderu sono-te ga suki motto…</p>
<p>内緒のロマンス<br>Naisho no romansu<br>あなたを感じたいのに<br>Anata o kanjitainoni<br>まだ切なく見つめるだけ<br>Mada setsunaku mitsumeru dake<br>恋を恋する少女でいられない気持ちに<br>Koi o koisuru shōjo de i rarenai kimochi ni<br>なぜ…苦しくなるの？<br>Naze… Kurushiku naru no?</p>
<p>秘密のブランコ<br>Himitsu no buranko<br>あなたと揺られながら今<br>Anata to yurenagara ima<br>ただ優しく見つめあうの<br>Tada yasashiku mitsume au no<br>恋に恋する少女の静かな溜息は<br>Koi ni koisuru shōjo no shizukana tameiki wa<br>Lonely…満ち足りたLonely<br>Lonely… Michitarita Lonely…<br>ユメの迷路…ユリの迷路…<br>Yume no meiro… Yuri no meiro…</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>KTV小助手</category>
        <category>LoveLive</category>
      </categories>
      <tags>
        <tag>karaoke</tag>
        <tag>LL</tag>
      </tags>
  </entry>
  <entry>
    <title>美しきもの</title>
    <url>/2021/07/08/karaoke/karaoke16/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=1384973305&auto=1&height=66"></iframe>
<span id="more"></span>

<p>君(きみ)の大好(だいす)きな<br>kimi no daisukina<br>この旋律(Melodie)…<br>kono Melodie…<br>大空(おおぞら)へと<br>oosora e to<br>响(ひび)け口风琴(Harmonica)…<br>hibi ke Haramonica…</p>
<p>*天使(てんし)が抱(いだ)いた<br>*tenshi ga idaita<br>まどわくの画布(Tolie)…<br>mado waku no Tolie(toiwa)…<br>ねえ…その风景画(Paysage)…<br>nee…sono Paysage…<br>绮丽(きれい)かしら?<br>kirei kashira?</p>
<p>(C’est)——<br>C’est–<br>风(かぜ)が运(はこ)んだ…<br>kaze ga hakonda…<br>淡(あわ)い花弁(はなびら)…<br>awai hanabira…<br>春(はる)の追想(ついそう)…<br>haru no tsui sou…</p>
<p>绮丽(きれい)な音(ね)…<br>kirei na ne…<br>呗(うた)うモニカ…<br>uta u Monica…<br>鸟(とり)の啭(さえず)り…<br>tori no saezuri…<br>针(はり)は进(すす)んだ<br>hari wa susunda</p>
<p>(C’est)——<br>C’est–<br>苍(あお)が繋(つな)いで…<br>ao ga tsunaide…<br>流(なが)れる云(くも)…<br>nagareru kumo…<br>夏(なつ)の追想(ついそう)…<br>natsu no tsuisou…<br>绮丽(きれい)な音(ね)…<br>kirei na ne…<br>谣(うた)うモニカ…<br>utau Monica<br>蝉(せみ)の时雨(しぐれ)…<br>semi no shigure…<br>针(はり)は进(すす)んだ<br>hari wa susun da</p>
<p>绮丽(きれい)だと…<br>kireidato…<br>君(きみ)が言(い)った景色(けしき)…<br>kimi ga itta keshiki…<br>きつと忘(わす)れない…<br>kitsuto wasurenai…</p>
<p>『美(うつく)しきもの』…<br>『utsuku shi kimono』…<br>集(あつ)める为(ため)に…<br>atsu meru tameni…<br>生命(ひと)はやあって来(く)る … …<br>hito wa yaatekuru</p>
<p>君(きみ)が抱(だ)きしめた<br>kimi ga dakishimeta<br>短(みじか)い季节(Saison)…<br>mijikai Saison…<br>痛(いた)みの雨(あめ)に<br>itami no ame ni<br>打(う)たれながら…<br>utare nagara…</p>
<p>「心配(しんぱい)ないよ」…<br>「shinbai naiyo」…<br>笑(わら)って言(い)った…<br>warate itta…<br>君(きみ)の様相(Visage)<br>kimi no Visage<br>忘(わす)れないよ… …<br>wasurenaiyo……</p>
<p>(C’est)——<br>C’est–<br>夜(よる)の窓(まど)边(べ)に…<br>yoru no madobe ni…<br>微笑(ほほえ)む月(つき)…<br>hohoemu tsuki…<br>秋(あき)の追想(ついそう)…<br>aki no tsuisou…</p>
<p>绮丽(きれい)な音(ね)<br>kireina ne<br>咏(うた)うモニカ…<br>utau Monica<br>虫(むし)の羽音(はおと)…<br>mushi no haoto<br>针(はり)は进(すす)んだ<br>hari wa susunda</p>
<p>(C’est)——<br>C’est–<br>大地(だいち)を包(つつ)み…<br>daichi wo tsutsumi…<br>微睡(まどろ)む雪(ゆき) …<br>madoro mu yuki…<br>冬(ふゆ)の追想(ついそう)<br>fuyu no tsuisou</p>
<p>绮丽(きれい)な音(ね)…<br>kirei na ne…<br>讴(うた)うモニカ…<br>utau Monica…<br>时(とき)の木枯(こが)らし…<br>toki no kogarashi…<br>针(はり)は进(すす)んだ →<br>hari wa susunda →</p>
<p>绮丽(きれい)だね…<br>kirei dane…<br>君(きみ)が生(い)きた景色(けしき)…<br>kimi ga ikita keshiki…<br>ずつと忘(わす)れない…<br>zutto wasure nai…</p>
<p>『美(うつく)しきもの』…<br>『utsuku shi kimono』…<br>集(あつ)める为(ため)に…<br>atsumeru tameni…<br>生命(いの)は过(す)ぎて行(ゆ)く…<br>ino wa sugiteyuku…</p>
<p>君(きみ)が駆(か)け抜(ぬ)けた<br>kimi ga kakenuketa<br>眩(まばゆ)い季节(Saison)…<br>mabayui Saison…<br>病(やまい)の焔(ほむら)に<br>tamai no homura ni<br>焼(や)かれながら…<br>yakarenagara…</p>
<p>「呜呼(ああ)…绮丽(きれい)だね」…<br>「aa…kirei dane」…<br>笑(わら)って逝(い)った<br>waratte itta<br>君(きみ)の面影(Image)<br>kimi no Image<br>忘(わす)れないよ…<br>wasurenaiyo…</p>
<p>君(きみ)が生(う)まれた朝(あさ)…<br>kimi ga umare ta asa…<br>泣(な)き虫(むし)だつた私(わたし)は…<br>naki mushi datsuta watashi wa…<br>小(ちい)さくても姉(あね)となつた——<br>chiisa ku temo ane to natsuta–</p>
<p>嬉(うれ)しくて<br>ureshikute<br>少(すこ)し照(て)れくさくて…<br>sukoshi tereku sakute…<br>とても夸(ほこ)らしかった… …<br>totemo hokorashi katta……</p>
<p>苦(くる)しみに摇荡(ゆうか)う<br>kuru shimi ni yukau<br>生(なま)の荒野(あらの)を<br>nama no arano wo<br>「美(うつく)しきもの」探(さが)すように<br>「utsuku shi kimo 」saga suyouni<br>駆(か)け抜(ぬ)けた<br>kake nu keta</p>
<p>果(は)てしなき地平(ちへい)へ<br>hateshi naki chiei e<br>旅立(たびだ)つ君(きみ)の<br>tabi da tsu kimi no<br>寝颜(ねがお)何(なに)より<br>negeo nani yori<br>美(うつく)しいと思(おも)ったよ… …<br>utsuku shii to omo tsu tayo……</p>
<p>君(きみ)の大好(だいす)きな<br>kimi no daisukina<br>この旋律(Melodie)…<br>kono Melodie…<br>大空(おおぞら)へと<br>oosora e to<br>响(ひび)け口风琴(Harmonica)…<br>hibi ke Haramonica…</p>
<p>*天使(てんし)が抱(いだ)いた<br>*tenshi ga idaita<br>まどわくの画布(Tolie)…<br>mado waku no Tolie(toiwa)…<br>ねえ…その风景画(Paysage)…<br>nee…sono Paysage…<br>绮丽(きれい)かしら?<br>kirei kashira?</p>
<p>私(わたし)は 世界(せかい)で一番(いちばん)<br>美(うつく)しい光(ひかり)を见(みる)つた<br>watashi wa sekai de ichi ban<br>utsuku shii hikari wo miru tsuta<br>その花(はな)を胸(むね)に抱(いだ)いて<br>sono hana wo mune ni idaite<br>laurantの分(ぶん)も 咏(うた)い続(つづ)けよう<br>laurant no fun mo utaitsutsuke you<br>「其処(そのか)にロマンは在(あ)るのかしら?」<br>「sono ka ni ROMANSU wa aru no kashira?」</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>KTV小助手</category>
      </categories>
      <tags>
        <tag>karaoke</tag>
      </tags>
  </entry>
  <entry>
    <title>Soldier Game</title>
    <url>/2021/07/12/karaoke/karaoke17/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=26214458&auto=1&height=66"></iframe>

<span id="more"></span>

<p>Three,two,one,zero!<br>Three, two, one zero<br>ここで登场<br>Koko de toujou<br>见てなさい 私の本气<br>Mite nasai watashi no honki<br>スリルと美意识で胜つのよ必ず<br>Thrill to biishiki de katsu no yo kanarazu        </p>
<p>优しげな言叶ささやく<br>Yasashigena kotoba sasayaku<br>伪(にせ)のさじゃなくて<br>Nise no kawaisa janakute<br>冷たく强く守らなきゃ<br>Tsumetaku, tsuyoku, mamoranakya<br>切なモノ达 弱きモノ达<br>Taisetsuna monotachi, yowaki monotachi        </p>
<p>私は谁でしょ? 知りたくなったでしょう?<br>Watashi wa dare desho, shiritaku natta deshou<br>ならば恋かも<br>Naraba koi kamo<br>私のには秘密があるとして<br>Watashi no naka ni wa himitsu ga aru to shite<br>それを君はどうするの<br>Sore wo kimi wa do suru no<br>It’s soldier game<br>It’ s soldier game<br>またえた 讯こうかな<br>Mata aeta toki, kikou ka na        </p>
<p>Three,two,one,zero!<br>Three, two, one zero<br>つぎの作战<br>Tsugi no sakusen<br>见てなさい 私は本气<br>Mitenasai watashi wa honki<br>シグナル受けとめて未を顶く<br>Signal uketomete mirai wo itadaku        </p>
<p>微笑みよりも甘いのは<br>Hohoemi yori mo amai no wa<br>嘘が招いた泪よ<br>Uso ga maneita namida yo<br>儚さ脆さ隐してる<br>Hakanasa, morosa kakushiteru<br>切なモノなの 弱きモノなの<br>Taisetsuna mono nano yowaki mono nano        </p>
<p>私とるでしょ? 触れたくなったでしょう?<br>Watashi to kuru desho, furetaku natta deshou<br>すでに恋だよ<br>Sude ni koi da yo<br>私といつかは战うべき相手<br>Watashi to itsuka wa tatakaubeki aite<br>それは君の理性かも<br>Sore wa kimi no risei kamo<br>I’m soldier heart<br>I’m soldier heart<br>负けないからね It’s soldier game<br>Makenai kara ne, it’s soldier game        </p>
<p>Come on!<br>Come on!<br>いまが胜负よ!<br>Ima ga shoubu yo<br>私は谁でしょ? 知りたくなったでしょう?<br>Watashi wa dare deshou, shiritaku natta deshou<br>ならば恋かも<br>Naraba koi kamo<br>私のには秘密があるとして<br>Watashi no naka ni wa himitsu ga aru to shite<br>それを君は?<br>Sore wo kimi wa        </p>
<p>私とるでしょ? 触れたくなったでしょう?<br>Watashi to kuru desho, furetaku natta deshou<br>すでに恋だよ<br>Sude ni koi da yo<br>私といつかは战うべき相手<br>Watashi to itsuka wa tatakaubeki aite<br>それは君の理性かも<br>Sore wa kimi no risei kamo<br>It’s soldier game<br>It’s soldier game<br>またえたのに I’m soldier heart<br>Mata aeta no ni, I’m soldier heart        </p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>KTV小助手</category>
        <category>LoveLive</category>
      </categories>
      <tags>
        <tag>karaoke</tag>
        <tag>LL</tag>
      </tags>
  </entry>
  <entry>
    <title>トライアングラー (triangular)</title>
    <url>/2021/07/12/karaoke/karaoke18/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=589146&auto=1&height=66"></iframe>

<span id="more"></span>

<p>君(きみ)は谁(だれ)とキスをする <br>kimi wa dare to kisu wo suru<br>私(わたし)それともあの子(こ)？<br>watashi soretomo watashi<br>君(きみ)は谁(だれ)とキスをする<br>kimi wa dare to kisu wo suru<br>星(ほし)を巡(めぐ)るよ纯情(じゅんじょう)<br>hoshi wo meguru yo junjou        </p>
<p>弱虫(よわむし)泣(な)き虫(むし)连(つ)れて<br>yowamushi nakimushi tsurete<br>また行(い)くんだと思(おも)う私(わたし)<br>mada ikun da to omou watashi<br>爱(あい)するより求(もと)めるより<br>aisuru yori motomeru yori<br>疑(うたが)う饱和(ほうわ)がずっと<br>utagau hou ga zutto<br>容易(たやす)い 自分(じぶん)が悔(くや)しい<br>tayasui jibun ga kuyashii        </p>
<p>痛(いた)いよ<br>itai yo<br>味方(みかた)だけど  爱(あい)してないとか<br>mikata dakedo aishitenai toka<br>守(まも)るけど 傍(そば)に居(い)れないとか<br>mamoru dakedo soba ni irenai toka<br>二律背反(にりつはいはん) <br>nigai niritsuhaihan<br>今(いま)すぐ Touch me<br>imasugu tacchimi-<br>运命(うんめい)ならば 繋(つな)がせて<br>unmei naraba tsunagasete        </p>
<p>君(きみ)は谁(だれ)とキスをする <br>kimi wa dare to kisu wo suru<br>私(わたし)それともあの子(こ)？<br>watashi soretomo watashi<br>心(こころ)揺(ゆ)らす言叶(ことば)より<br>kokoro yurasu kotoba yori<br>无责任(むせきにん)に抱(だ)いて限界(げんかい)<br>musekinin ni daite genkai        </p>
<p>妄想(もうそう)の砂漠(さばく)をきって <br>mousou wo sabaku okite<br>后(うし)ろから蹴(け)り上(あ)げたら<br>ushiro kara keriagetara<br>むき出(だ)しの恋(こい)によろけた<br>mukidashi no koi ni yoroketa<br>呼吸(こきゅう)だけで精一杯(せいいっぱい)<br>kokyuu dake de seiippai<br>迎(むか)えに来(き)て  覚(おぼ)えてるから<br>mukae ni kite oboreteru kara        </p>
<p>痛(いた)いよ<br>itai yo<br>前向(まえむ)きな嘘(うそ)  真(まな)に受(う)けるのは<br>maemuki na uso ma ni ukeru nowa<br>笑(わら)ってると 正解(せいかい)が无(な)いから<br>waratteru koe segamenai kara<br>持(も)て余(あま)して <br>mirai moteamashita<br>今(いま)すぐ Hold me<br>imasugu hold me<br>理性(りせい)なんて 押(お)し倒(たお)して<br>risei nante oshitaoshite        </p>
<p>君(きみ)は谁(だれ)とキスをする <br>kimi wa dare to kisu wo suru<br>私(わたし)それともあの子(こ)？<br>watashi soretomo watashi<br>涙(なみだ)まるで役立(やくだ)たず<br>namida marude yakutatazu<br>星(ほし)を翔(かけ)けるよ纯情(じゅんじょう)<br>hoshi wo kakeru yo junjou        </p>
<p>君は誰とキスをする<br>kimi wa dare to kisu wo suru<br>君は誰とキスをする<br>kimi wa dare to kisu wo suru<br>私それともあの子？<br>watashi soretomo watashi<br>たった一つ命を盾に<br>tatta hitotsu inochi wo tate ni<br>今振りかざす感傷<br>ima furikazasu kanshou        </p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>KTV小助手</category>
      </categories>
      <tags>
        <tag>karaoke</tag>
        <tag>Macross</tag>
      </tags>
  </entry>
  <entry>
    <title>snow halation</title>
    <url>/2021/07/08/karaoke/karaoke2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=28768036&auto=1&height=66"></iframe>
<span id="more"></span>

<p>不思议だね いまの気持ち<br>fushigi dane    imano kimochi<br>空から降ってきたみたい<br>sora ka ra   futte kita mitai–<br>特别な季节の色が ときめきを见せるよ<br>tokubetsu na kisetsu no iro ga    tokimekiwo mise ruyo<br>初めて出会った时から<br>hajimete deatta toki kara<br>予感に騒ぐ心のMelody<br>yokan ni sawagu    kokoro no Melody<br>とめられないとまらない な??ぜ<br>tomerarenai tomaranai    naze</p>
<p>届けて<br>todoke te<br>切なさには名前をつけようか“Snow halation”<br>setsuna saniwa    namae wo    tsukeyouka “ Snow halation “<br>想いが重なるまで待てずに<br>omoi ga    kasana rumade    mate zuni<br>悔しいけど好きって纯情<br>kuyashi ikedo    suki tte junjou<br>微热の中 ためらってもダメだね<br>binetsu no naka    tamerattemo dame dane<br>飞び込む勇気に賛成 まもなくStart!!<br>tobikomu yuuki ni sansei    mamonaku Start!!</p>
<p>音もなく 気配もなく<br>oto monaku    kehai- monaku<br>静かに运命は変わる<br>shizuka ni un-mei wa kawa ru<br>これからの未来に胸の 鼓动が早くなる<br>korekarano mirai ni mune no    kodou ga hayaku naru<br>例えば困った时には<br>tatoeba    komatta tokini wa<br>すぐ駆けつけて抱きしめたくて<br>sugu kake tsukete    daki shimetakute<br>どこにいてもどこでも Fly high<br>dokoniitemo dokodemo    Fly high</p>
<p>急いで<br>isoi de<br>いつの间にか大きくなりすぎた“True emotion”<br>itsuno mani ka    ookiku narisugita “ True emotion “<br>梦だけみてる様じゃつらいよ<br>yume dake miteru you ja    tsuraiyo<br>恋人は君って言いたい<br>koibito wa kimi tte ii tai<br>优しい目が とまどってるイヤだよ<br>yasashii me ga    tomadotteru iya dayo<br>このまま一気に爱情 あずけて Please!!<br>konomama ikki ni aijou azukete Please!!</p>
<p>届けて<br>todoke te<br>切なさには名前をつけようか“Snow halation”<br>setsuna saniwa    namae wo    tsukeyouka “ Snow halation “<br>想いが重なるまで待てずに<br>omoi ga kasana rumade     mate zuni<br>悔しいけど好きって纯情<br>kuyashi ikedo    suki tte junjou<br>微热の中 ためらってもダメだね<br>binetsu no naka    tamerattemo dame dane<br>飞び込む勇気に賛成 まもなくStart!!<br>tobikomu yuuki ni sansei    mamonaku Start!!</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>KTV小助手</category>
        <category>LoveLive</category>
      </categories>
      <tags>
        <tag>karaoke</tag>
        <tag>LL</tag>
      </tags>
  </entry>
  <entry>
    <title>辉夜の城で踊りたい</title>
    <url>/2021/07/08/karaoke/karaoke4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=26279806&auto=1&height=66"></iframe>
<span id="more"></span>

<p>おいで!おいで!诱惑のDance again<br>oide! oide! yuuwaku no Dance again<br>おいでよおいで!辉夜(かぐや)の城へ<br>oide yo oide! kaguya no shiro e<br>出逢いがあやつるミステリー<br>deai ga ayatsuru misuteri-<br>危険なペルソナ<br>kikenna perusona</p>
<p>踊ろう!踊ろう!终わらないDance beat<br>odorou! odorou! owaranai Dance beat<br>踊ろうよ踊ろう!辉夜の城で<br>odorou yo odorou! kaguya no shiro de<br>夜空を切りとるレーザービーム<br>yozora wo kiritoru re-za-bi-mu<br>私と见てよ?<br>watashi to mite yo?</p>
<p>まばゆい星が照らす想い<br>mabayui hoshi ga terasu omoi<br>今宵の梦よ永远(とわ)に<br>koyoi no yume yo towa ni<br>明日(あす)のことは忘れたいの<br>asu no    koto wa    wasuretai no</p>
<p>私は红い蔷薇の姫よ 优しくさらわれたい<br>watashi wa akai bara no hime yo yasashiku sarawaretai<br>そっと嗫いて意味ありげに目をそらす<br>sotto sasayaite imiarige ni me wo sorasu<br>あなたは白い月の骑士(ナイト) 触れた手がまだ热い<br>anata wa shiroi tsuki no naito fureta te ga mada atsui<br>のがさずに抱きしめて<br>nogasazu ni dakishimete<br>この奇迹を恋と呼ぶのね<br>kono kiseki wo koi to yobu no ne</p>
<p>おいで!おいで!情热でDance again<br>oide! oide! jounetsu de Dance again<br>おいでよおいで!辉夜の城へ<br>oide yo oide! kaguya no shiro e<br>迷いを饮みこむエナジー<br>mayoi wo nomikomu enaji-<br>眠らぬパッショネイト<br>nemuranu passhoneito</p>
<p>踊ろう!踊ろう!止まらないDance beat<br>odorou! odorou! tomaranai Dance beat<br>踊ろうよ踊ろう!辉夜の城で<br>odorou yo odorou! kaguya no shiro de<br>星座が织りなすディスコティーク<br>seiza ga orinasu disukoti-ku<br>私も混ぜて?<br>watashi mo    mazete?</p>
<p>きらめく星に誓う心<br>kirameku hoshi ni chikau kokoro<br>儚い梦でいいわ<br>hakanai yume de ii wa<br>明日は明日の风が吹くの<br>asu wa asu no kaze ga fuku no<br>私は黒い蔷薇の姫よ 激しくさらわれたい<br>watashi wa kuroi bara no hime yo hageshiku sarawaretai<br>だから微笑んで追いかけてと目が诱う<br>dakara hohoende oikakete to me ga sasou<br>あなたも黒い月の骑士 瞳の奥は热い<br>anata mo kuroi tsuki no naito hitomi no oku wa atsui<br>つかまえて抱きしめて<br>tsukamaete dakishimete<br>この奇迹は恋を呼ぶのね<br>kono kiseki wa koi wo yobu no ne</p>
<p>私は红い蔷薇の姫よ 优しくさらわれたい<br>watashi wa akai bara no hime yo yasashiku sarawaretai<br>そっと嗫いて意味ありげに目をそらす<br>sotto sasayaite imiarige ni me wo sorasu<br>あなたは白い月の骑士 触れた手がまだ热い<br>anata wa shiroi tsuki no naito fureta te ga mada atsui<br>のがさずに抱きしめて<br>nogasazu ni dakishimete<br>この奇迹を恋と呼ぶのね<br>kono kiseki wo koi to yobu no ne</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>KTV小助手</category>
        <category>LoveLive</category>
      </categories>
      <tags>
        <tag>karaoke</tag>
        <tag>LL</tag>
      </tags>
  </entry>
  <entry>
    <title>cutie panther</title>
    <url>/2021/07/08/karaoke/karaoke3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=28592856&auto=1&height=66"></iframe>
<span id="more"></span>

<p>捕まえちゃう!<br>Tsukamae chau !<br>(どこにいるの? ムリよムリよ どこにいたってムリよ)<br>( dokoni iruno?    muriyo muriyo    dokoni itatte muriyo )<br>捕まえちゃう!<br>Tsukamae chau !<br>(だれといるの? ダメよダメよ わたし外はダメよ)<br>( dareto iruno?    dameyo dameyo    watashi igai wa dameyo )</p>
<p>甘いよ甘い そんな装备じゃ<br>amai yo amai    sonna sōbija<br>逃げられるわけいじゃないか<br>nigera reru wake nai janai ka<br>狙いをつけて密かに背后から<br>nerai o tsukete hisokani    haigo kara</p>
<p>I love you 私のことをきになるはず<br>I love you    watashi no kotoo    sukini naru hazu<br>I love you そこに义があるの<br>I love you    sokoni seigi ga aruno</p>
<p>Hi,hi!(何度も言わせるつもりなの?)おやおや<br>Hi , hi !( nandomo iwaseru tsumori nano ?) o ya o ya<br>Hi,hi!(抵抗するならしてごらん!)いがいと<br>Hi , hi !( teikō surunara shite goran !) i ga i to<br>我が尽だと知ってるけれど<br>wagamama dato    shitteru keredo<br>私のが手(うわて)なようね<br>watashino hōga uwatena yō ne<br>冷たい言叶 优しい视线 获物は…君だよ!<br>tsumetai kotoba yasashii shisen    emono wa? kimi dayo !</p>
<p>Cutie Panther 私どこでも行くよ<br>Cutie Panther watashi    dokodemo ikuyo<br>君の君の盗んでみせるよ<br>Kimino kimino    kokoro nusunde  miseru yo<br>Cutie Panther 私どこでも行くよ<br>Cutie Panther watashi    dokodemo ikuyo<br>君の君のを离さない<br>kimino kimino    kokoro o hanasa nai</p>
<p>热いよ热い のルールは<br>atsui yo  atsui    ai no rūru wa<br>破られるためるんだよ<br>yaburareru tame arun- dayo<br>ずるい罠へと诱(いざな)う微笑みは<br>zurui wana eto izanau    hohoemiwa</p>
<p>I miss you きのせいだし悪くないでしょ<br>I miss you    suki no seidashi    waruku nai desho<br>I miss you それが重度の恋よ<br>I miss you    sorega jūdo no koi yo</p>
<p>Hi,hi(绝対全てをいただくよ?)おやおや<br>Hi , hi ( zettai subete    oitadakuyo ?) o ya o ya<br>Hi,hi(反抗するならしてごらん!)てごわい<br>Hi , hi ( hankōsuruna    rashite goran !) te go wa i<br>伪りだって疑うよりも<br>itsuwari datte    utagau yorimo<br>私の事信じてみてよ<br>watashi no koto    shinjite miteyo<br>优しい言叶 冷たい视线 获物は…君だよ!<br>yasashii kotoba    tsumetai shisen    emono wa? kimi dayo !</p>
<p>Cutie Panther 君の瞳が欲しい<br>Cutie Panther kimino    hitomi ga hoshii<br>私きっときっと盗んでみせるよ<br>watashi kiitto    kitto nusunde miseru yo<br>Cutie Panther 君の瞳が欲しい<br>Cutie Panther kimino     hitomi ga hoshii<br>私きっと素早く逃さない<br>watashi kiitto    subayaku nogasa nai</p>
<p>Hi,hi!(何度も言わせるつもりなの?)おやおや<br>Hi , hi !( nandomo iwaseru tsumori nano ?) o ya o ya<br>Hi,hi!(抵抗するならしてごらん!)いがいと<br>Hi , hi !( teikōsuru nara shite goran !) i ga i to<br>我が尽だと知ってるけれど<br>wagamama dato    shitteru keredo<br>私のが手(うわて)なようね<br>watashino hōga uwatena yō ne<br>冷たい言叶 优しい视线 获物は…君だよ!<br>tsumetai kotoba yasashii shisen    emono wa? kimi dayo !</p>
<p>Cutie Panther 私どこでも行くよ<br>Cutie Panther watashi    dokodemo ikuyo<br>君の君の盗んでみせるよ<br>Kimino kimino    kokoro nusunde  miseru yo<br>Cutie Panther 私どこでも行くよ<br>Cutie Panther watashi    dokodemo ikuyo<br>君の君のを离さない<br>kimino kimino    kokoro o hanasa nai</p>
<p>捕まえちゃう!<br>Tsukamae chau !<br>(どこにいるの? ムリよムリよ どこにいたってムリよ)<br>( dokoni iruno?    muriyo muriyo    dokoni itatte muriyo )<br>捕まえちゃう!<br>Tsukamae chau !<br>(だれといるの? ダメよダメよ わたし外はダメよ)<br>( dareto iruno?    dameyo dameyo    watashi igai wa dameyo )</p>
<p>捕まえちゃう!<br>Tsukamae chau !<br>(どこにいるの? ムリよムリよ どこにいたってムリよ)<br>( dokoni iruno?    muriyo muriyo    dokoni itatte muriyo )<br>捕まえちゃう!<br>Tsukamae chau !<br>(だれといるの? ダメよダメよ わたし外はダメよ)<br>( dareto iruno?    dameyo dameyo    watashi igai wa dameyo )</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>KTV小助手</category>
        <category>LoveLive</category>
      </categories>
      <tags>
        <tag>karaoke</tag>
        <tag>LL</tag>
      </tags>
  </entry>
  <entry>
    <title>星間飛行</title>
    <url>/2021/07/08/karaoke/karaoke5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=589160&auto=1&height=66"></iframe>
<span id="more"></span>

<p>Su i men ga yu ra gu<br>Ka ze no wa ga hi ro ga ru<br>Fu re a tta yu bi sa ki no<br>A o i den ryuu<br>Mi tsu me a u da ke de<br>Ko do ku na ka so ku do ga<br>I sshu n ni ku da ke chi ru<br>A na ta ga su ki yo</p>
<p>To u me i na shi n ju no yo u ni<br>Chuu ni u ku na mi da<br>Hi ge ki da tte ka ma wa na i<br>A na ta to i ki ta i<br>Ki ra !</p>
<p>Ryuu se i ni ma ta ga tte<br>A na ta ni kyuu ko u ka ah ah<br>No u ko n no ho shi zo ra ni<br>Wa ta shi ta chi ha na bi mi ta i<br>Ko ko ro ga hi ka ri no ya wo ha na tsu</p>
<p>Ka i wa na do na shi ni<br>U chi ga wa ni mo gu tte<br>Ka n ga e ga yo mi to re ru<br>Fu shi gi na yo ru<br>A na ta no na Ju mo n mi ta i ni<br>Mu ge n no ri pī to*<br>Ni ku ra shi ku te te no ko u ni<br>Tsu me wo ta te te mi ru<br>Ki ra !</p>
<p>Ka ra da go to su ki to o ri<br>E no yo u ni ta da yo u uh uh<br>Ke shi tsu bu no i no chi* de mo<br>Wa ta shi ta chi Ma ta ta i te ru<br>Ta ma shi i ni gi n ga Na da re te ku<br>Ryuu se i ni ma ta ga tte<br>A na ta wa kyuu jou shou oh oh<br>No u ko n no ho shi zo ra ni<br>Wa ta shi ta chi ha na bi mi ta i<br>Ko ko ro ga hi ka ri no ya wo ha na tsu<br>Ke shi tsu bu no i no chi de mo<br>Wa ta shi ta chi ma ta i te ru<br>Ta ma shi i ni gi n ga Na da re te ku<br>Ta ma shi i ni gi n ga Na da re te ku</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>KTV小助手</category>
      </categories>
      <tags>
        <tag>karaoke</tag>
      </tags>
  </entry>
  <entry>
    <title>and I&#39;m home</title>
    <url>/2021/07/08/karaoke/karaoke6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=496902073&auto=1&height=66"></iframe>
<span id="more"></span>

<p>【红】<br>锖びつbaiいた心、音もない世界du、何を见てるの？<br>Sabitsuita kokoro, otomonai sekai, nani o miteruno?</p>
<p>またzhiねを言える颜を探すよそdaoれを缲り返すだけ<br>Matanewo ieru kaoo sagasuyo sore o kurikaesu dake</p>
<p>【蓝】<br>気づけばそこには　ひとりきりで泣く後ろ姿<br>Kizukeba soko niwa     hitorikiri de naku ushiro sugata</p>
<p>【红】辛いような、【蓝】寂しいような、<br>Tsurai youna, sabishii youna, </p>
<p>【合】<br>场所　手を繋いでいたいんだ<br>basho    te o tsunaide itainda</p>
<p>何度目の気持ちだろう　ここにある温もりは<br>Nandome no kimochi darou    koko ni aru nukumori wa</p>
<p>间违いでも构わない、傍にいること<br>Machigai demo kamawanai, soba ni iru koto</p>
<p>涙の音、ため息の色　今、确かめる现在地<br>Namida no oto , tameiki no iro    ima, tashika meru genzaichi</p>
<p>冗谈みたいな毎日　见たい、见たい、未来<br>Joudan mitai na mainichi    mitai, mitai, mirai</p>
<p>【蓝】<br>强がりの声も掠れたな、と梦に落ちるの<br>Tsuyogari no koe mo kasureta nato    yume ni ochiru no</p>
<p>抱えた膝、目を落とすとすぐに崩れてしまいそうで<br>Dakaeta hiza, me o otosu to sugu ni    kuzurete shimai soude</p>
<p>【红】<br>このまま、このまま　ふたりきり駆け込む远い出口<br>Konomama, konomama   futarikiri kakekomu tooi deguchi</p>
<p>【蓝】<br>まだ、期待しているの。<br>Mada, kitai shiteiru no. </p>
<p>【合】<br>さあ　笑って见つめ合うんだ<br>Saa waratte mitsume aunda</p>
<p>単纯で无邪気な颜　くしゃくしゃの思い抱いて<br>Tanjun de mujaki na kao    kushakusha no omoi daite</p>
<p>迷い込んだ场所さえ优しすぎて<br>Mayoikonda basho sae    yasashi sugite</p>
<p>何度でも名前を呼ぶよ　不确かな未来でも<br>Nando demo namae o yobu yo futashika na mirai demo</p>
<p>离せないもの、思うだけ心が痛いよ<br>Hanasenai mono, omou dake kokoro ga itai yo</p>
<p>ここにいるよ<br>Koko ni iru yo</p>
<p>ここにいるよ<br>Koko ni iru yo</p>
<p>帰る场所はここだよ？<br>kaeru basho wa koko da yo?</p>
<p>いつだって変わらない　思いを残すの<br>Itsudatte kawaranai omoi o nokosu no</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>KTV小助手</category>
      </categories>
      <tags>
        <tag>karaoke</tag>
      </tags>
  </entry>
  <entry>
    <title>フリージア 希望之花</title>
    <url>/2021/07/08/karaoke/karaoke8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=459925524&auto=1&height=66"></iframe>
<span id="more"></span>

<p>漂う宇宙(そら)のどこか遠く<br>tada you sorano    dokoka too ku</p>
<p>祈り通ずる惑星(ほし)があるとしたら<br>inori tsuuzuru    hoshiga aru toshitara</p>
<p>僕らはそこへ向かうだろうか<br>bokuraha sokoe    mukau darou- ka</p>
<p>そして何を祈るのだろう<br>soshite naniwo inoru no darou-</p>
<p>果たせなかった約束や<br>hatase nakatta    yakusoku ya</p>
<p>犠牲になった高潔の光<br>gisei ni na-tta    kouketsu no hikari</p>
<p>残る物など何もないとしても<br>nokoru mono nado    nanimo nai toshitemo</p>
<p>今は信じた道をただ進め<br>ima wa shinjita michi wo  tada susume</p>
<p>希望の花 繋いだ絆が<br>kibou no hana    tsunaida kizuna ga</p>
<p>今僕らの胸の中にあるから<br>ima bokura no    muneno naka    ni aru kara</p>
<p>決して散ることはない<br>keshite chiru koto wa nai</p>
<p>生きる力<br>ikiru chikara</p>
<p>希望の花 繋いだ絆を<br>kibou no hana    tsunaida kizuna wo</p>
<p>力にして明日を強く咲き誇れ<br>chikara ni shite    asu wo tsuyoku    sakiho kore</p>
<p>戻る場所なんてない辿り着くべき場所<br>motoru basho nante nai    tadori tsuku beki basho heto</p>
<p>迷いのない旗を高く掲げて<br>mayoi no nai    hata wo takaku kakagete</p>
<p>今を生きていく<br>ima wo ikite i ku</p>
<p>見えないものに 怯えていた<br>mie nai mono ni     obiete i ta</p>
<p>弛むことない この世界の中<br>tayumu koto nai     kono sekai no naka</p>
<p>それでも一つ 心の波間に<br>sore demo hitotsu     kokoro no namima ni</p>
<p>変わらないもの 浮かべながら<br>kawara nai mono     ukabe nagara</p>
<p>希望の花 繋いだ絆が<br>kibou no hana    tsunaida kizuna ga</p>
<p>今僕らの胸の中にあるから<br>ima bokura no    muneno naka    ni aru kara</p>
<p>綻びを縫い合い<br>hokorobi wo    nui a i</p>
<p>強くなれる<br>tsuyoku  nareru</p>
<p>希望の花 繋いだ絆を<br>kibou no hana    tsunai da kizuna wo</p>
<p>力にして 明日を強く咲き誇れ<br>chikara ni shite    asu wo tsuyoku    saki hokore</p>
<p>何の為向かうのか見失いそうな時に<br>nan nno tame muka unoka    miushi nai souna tokini</p>
<p>守り抜きたいものがあること<br>mamori nuki tai     mono ga aru koto-</p>
<p>気付いたんだ<br>kitsui tan nda</p>
<p>傷を隠し 一人泣いた夜に<br>ki zu wo    ka ku shi     hitori naita yoru ni</p>
<p>くれた優しさ 溢れ出したのは<br>kureta yasashisa     afureda shita no wa</p>
<p>未来を誓った「決意の涙」<br>mirai wo chika-tta     ketsui no    namita</p>
<p>希望の花 繋いだ絆が<br>kibou no hana    tsunaida kizuna ga</p>
<p>今僕らの胸の中にあるから<br>ima bokura no    muneno naka    ni aru kara</p>
<p>決して散ることはない<br>keshite chiru koto wa nai</p>
<p>生きる力<br>ikiru chikara</p>
<p>希望の花 繋いだ絆を<br>kibou no hana    tsunaida kizuna wo</p>
<p>力にして明日を強く咲き誇れ<br>chikara ni shite    asu wo tsuyoku    sakiho kore</p>
<p>戻る場所なんてない辿り着くべき場所<br>motoru basho nante nai    tadori tsuku beki basho heto</p>
<p>迷いのない旗を高く掲げて<br>mayoi no nai    hata wo takaku kakagete</p>
<p>今を生きていく<br>ima wo ikite i ku</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>KTV小助手</category>
      </categories>
      <tags>
        <tag>karaoke</tag>
      </tags>
  </entry>
  <entry>
    <title>Magnet</title>
    <url>/2021/07/08/karaoke/karaoke7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=33916400&auto=1&height=66"></iframe>
<span id="more"></span>

<p>【MIKU】<br>か细い火が 心の端にbai灯る<br>ka hosoi hi ga kokoro no hashini tomoru<br>いつの间にか燃え広がるdu热情zhi<br>itsuno manika moe hirogaru netsujou<br>私の蝶 不规则に飞び回り<br>watashi no chou fukisoku ni tobi mawari<br>あなたの手に鳞粉daoを付けた<br>anata no te ni rinpun wo duketa</p>
<p>【LUKA】<br>络み合う指ほどいて 唇から舌へと<br>karami au yubi hodo ite kuchibiru kara shitahe to<br>许されない事ならば 尚更燃え上がるの<br>yurusarenai koto naraba naosara moe agaruno</p>
<p>【合唱】<br>抱き寄せて欲しい 确かめて欲しい<br>dakiyosete hoshii tashikame te hoshii<br>间违いなど无いんだと 思わせて<br>machiga i na do nai<del>n da</del>to omo wase te<br>キスをして 涂り替えて欲しい<br>kisu wo shite nuri kaete hoshii<br>魅惑の时に酔いしれ溺れていたいの<br>miwaku no toki ni yoi shire oborete~itaino</p>
<p>【LUKA】<br>束缚して もっと必要として<br>sokubaku shi te motto hitsuyou to shi te<br>爱しいなら执着を见せつけて<br>i to shii nara shuu chaku wo mise tsukete<br>「おかしい」のが たまらなく好きになる<br>(o ka shi i) noga tamara na ku suki ninaru<br>行けるトコまで行けばいいよ<br>ikeru toko made    ikeba iiyo<br>【MIKU】<br>迷い込んだ心なら 简単に融けてゆく<br>mayoikon da kokoro nara kantan ni tokete yuku<br>优しさなんて感じる暇など 无い位に<br>yasashi sa nante kanjiru hima nado nai kurai ni<br>【合唱】<br>缲り返したのは あの梦じゃなくて<br>kurikae shi ta no ha    ano yume ja naku te<br>纷れも无い现実の私达<br>magire mo nai genjitsu no watashi tachi<br>触れてから 戻れないと知る それでいいの…<br>furete kara modore nai to shiru    sore de iino…<br>谁よりも大切なあなた<br>dare yori mo taisetsu na anata</p>
<p>【MIKU】<br>夜明けが来ると不安で 泣いてしまう私に<br>yo a ke ga ku ru to fu an de na i te shi ma u wa ta shi ni<br>「大丈夫」と嗫いたあなたも 泣いていたの？<br>(dai jou bu) to sa sa ga i ta a na ta mo na i te i ta no?</p>
<p>【合唱】<br>抱き寄せて欲しい 确かめて欲しい<br>daki yosete hoshii    tashika me te hoshii<br>间违いなど无いんだと 思わせて<br>machi ga i nado nai<del>n da</del>to omo wasete<br>キスをして 涂り替えて欲しい 魅惑の时に<br>kisu wo shite    nurika e te hoshii    miwaku no toki ni<br>酔いしれ溺れたい<br>yoi shi re obo re tai<br>引き寄せて マグネットのように<br>biki yo sete    magunetto no you ni<br>例えいつか离れても巡り会う<br>tatoe itsuka hanarete mo meguri a u<br>触れていて 戻れなくていい それでいいの<br>furete i te    modore naku te ii    sorede ii no<br>谁よりも大切なあなた<br>dare yori mo taisetsu na anata</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>KTV小助手</category>
      </categories>
      <tags>
        <tag>karaoke</tag>
      </tags>
  </entry>
  <entry>
    <title>3年目の浮気</title>
    <url>/2021/07/08/karaoke/karaoke9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=4902185&auto=1&height=66"></iframe>
<span id="more"></span>

<p>（男）马鹿いってんじゃないよ お前と俺は<br>baka ittenjanaiyo o mae to ore wa<br>（男）ケンカzhiもしたけどひとつ屋根の下暮らして来たんだぜ<br>kenka mo shita kedo hitotsu yane no shita kurashi te kitan daze<br>（男）马鹿いってんじゃないよ お前の事だけは<br>baka ittenjanaiyo o mae no koto dakewa<br>（男）一日たりとも 忘れた事など无かった俺だぜ<br>ichinichi taritomo wasure ta koto nado naka tta ore daze</p>
<p>（女）よくいうわ いつもだましてばかりで<br>yokuiuwa itsumodamashitebakaride<br>（女）私が何にも知らないとでも思っているのね<br>watashi ga nani nimo shira naitodemo omotte irunone</p>
<p>（男）よくいうよ 惚れたお前の负けだよ<br>yokuiuyo hore tao mae no make dayo<br>（男）もてない男が好きなら 俺も考えなおすぜ<br>motenai otoko ga suki nara ore mo kangae naosuze</p>
<p>（女）马鹿いってんじゃないわ<br>baka ittenjanaiwa<br>（男）马鹿いってんじゃないよ<br>baka ittenjanaiyo<br>（女）あそばれてるのわからないなんてかわいそうだわ<br>asobareterunowakaranainantekawaisoudawa<br>（男）3年目の浮気ぐらい大目にみろよ<br>3 nenme no uwaki gurai oome nimiroyo<br>（女）ひらきなおるその态度が気にいらないのよ<br>hirakinaorusono taido ga kini iranainoyo<br>（男）3年目の浮気ぐらい大目にみてよ<br>3 nenme no uwaki gurai oome nimiteyo<br>（女）両手をついてあやまったって 许してあげない<br>ryoute wotsuiteayamattatte yurushi teagenai</p>
<p>（男）马鹿やってんじゃないよ 本気でそんな<br>baka yattenjanaiyo    honki desonna<br>（男）荷物をまとめて 涙もみせずに旅だてるのかよ<br>nimotsu wo matome te    namida mo misezu ni tabi da teru no ka yo<br>（男）马鹿やってんじゃないよ 男はそれなりに<br>baka yattenjanaiyo    otoko wa sore narini<br>（男）浮気もするけど 本気になれない可爱いもんだぜ<br>uwaki mo suru kedo    honki ni narenai    kawaii mondaze</p>
<p>（女）よくいうわ そんな胜手なことばが<br>yokuiuwa sonna katte nakotobaga<br>（女）あなたの口から出てくるなんて 心うたがうわ<br>anatano kuchi kara dete kurunante kokoro utagauwa</p>
<p>（男）よくいうよ いつもあまえてばかりで<br>yokuiuyo itsumo amaete bakari de<br>（男）やきもちやいても可爱くないぜ 大人になりなよ<br>yakimochi yaitemo kawai ku    naize otona ni narinayo</p>
<p>（女）马鹿やってんじゃないわ<br>baka yattenjanaiwa<br>（男）马鹿やってんじゃないよ<br>baka yattenjanaiyo<br>（女）私にだってその気になれば 相手はいるのよ<br>watashi nidattesono kini nareba aite wairunoyo<br>（男）3年目の浮気ぐらい大目にみろよ<br>3 nenme no uwaki gurai oome nimi ro yo<br>（女）ひらきなおるその态度が気にいらないのよ<br>hirakinaorusono taido ga kini iranainoyo<br>（男）3年目の浮気ぐらい大目にみてよ<br>3 nenme no uwaki gurai oome nimi te yo<br>（女）両手をついてあやまったって 许してあげない<br>ryoute wotsuiteayamattatte yurushi teagenai</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>KTV小助手</category>
      </categories>
      <tags>
        <tag>karaoke</tag>
        <tag>演歌</tag>
      </tags>
  </entry>
  <entry>
    <title>Grayskull为何物？</title>
    <url>/2021/07/07/shera/shera1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>&amp;emsp;&amp;emsp;本文旨在梳理动画She-Ra and the Princess of Power中一些隐藏的背景设定，以帮助同好们更好地理解She-Ra的故事。文中大部分的信息整理自该作品的Fandom和Wikipedia页面。<br>&amp;emsp;&amp;emsp;为了更好的传达作品的本意，本文中出现的人物和势力的名称均采用英文原文。  </p>
<hr>
<p>&amp;emsp;&amp;emsp;下面我们正式开始探寻为什么女主人公Adora的变身台词是“<strong>For the honor of Grayskull</strong>”。<br>&amp;emsp;&amp;emsp;众所周知，新She-Ra作为一部重启类型的作品，它的很多设定确实是从前作中移植过来的，所以在解释这部作品的设定问题之前，我们先铺垫一下整个系列的背景：  </p>
<span id="more"></span>

<h1 id="He-Man-and-the-Masters-of-the-Universe"><a href="#He-Man-and-the-Masters-of-the-Universe" class="headerlink" title="He-Man and the Masters of the Universe"></a>He-Man and the Masters of the Universe</h1><p>作为系列动画的开端，这是一部1983年播出的的电视动画。</p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera1/heman.jpg"></p>
<p>&amp;emsp;&amp;emsp;He-man讲述了一位叫Adam的王子为了保护他的星球Eternia和一座名为Grayskull的城堡，变身成为宇宙巨人He-Man，与邪恶骷髅势力战斗的故事。和所有超级英雄一样，He-Man的力量是一个秘密，所以平时Adam是一般通过王子，遇敌时就会偷偷变身，而且没有人能认出他的真实身份。而作为系列的第一个主人公，Adam的招牌动作就是在变身时，高举魔法剑并大喊“For the honor of Grayskull”。<br>&amp;emsp;&amp;emsp;回到我们的问题，什么是Grayskull呢？设定上，Grayskull是一座位于Eternia星球的神秘古堡，蕴藏着巨大的魔法力量，这种力量可以征服整个星球，所以它成为了邪恶的势力争夺的焦点。事实上He-Man的第一个画面就是定格在Grayskull上，邪恶反派干部正要打开这座城堡的大门，这时英雄He-Man从里面走出来，守卫城堡并把坏人都打跑了。而主人公的变身能力也是由守护Grayskull的女巫授予的，是以变身He-Man时需要咏唱Grayskull堡。还有个有趣的细节，动画制作之前，概念设计师认为Grayskull堡属于邪恶骷髅势力，所以做成了骷髅外型，这也是它名称的由来，但是最后这个地标被设定成主角方要守护的地点。<br>&amp;emsp;&amp;emsp;而这座城堡之所以这么重要，其核心原因是卖！玩！具！Masters of the Universe这个IP其实是由玩具制造公司Mattel打造的，之后他们联合动画公司Filmation推出了这一系列动画，而Grayskull城堡套装玩具正式当时公司玩具生产线的主打产品，动画大火，玩具也颇受欢迎，被称为是20世纪80年代男孩们最想要的圣诞礼物。  </p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera1/grayskull.jpg" alt="grayskull" title="Castle Grayskull玩具套装"></p>
<h1 id="She-Ra-Princess-of-Power"><a href="#She-Ra-Princess-of-Power" class="headerlink" title="She-Ra: Princess of Power"></a>She-Ra: Princess of Power</h1><p>He-Man大卖之后制作方想要拓宽女性市场<br>于是就有了1985年播出的，以女性为主角的续作She-Ra。</p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera1/shera.jpg" alt="shera" title="She-Ra: Princess of Power"></p>
<p>&amp;emsp;&amp;emsp;该作的女主人公Adora是前作男主Adam的孪生姐妹。Adora的故事发生在一个新的星球Etheria上。作为Eternia的公主，她儿时被反派Hordak（千面魔）绑架到了Etheria，Adora就此被洗脑培养为反派阵营Horde军团的小干部。<br>&amp;emsp;&amp;emsp;前作的大人气主角Adam受到Grayskull女巫的指示，带着守护之剑来找到Adora并与她相认，Adora就此解除了洗脑，并举起神剑，继承了Adam的变身台词“For the honor of Grayskull”，变身成She-Ra，成为了反抗军Great Rebellion的领袖，同Horde势力战斗。之后就是Adora和Etheria的本土英雄一起对抗邪恶的故事。顺便一提，Horde军团代表的是新兴的科技力量对传统农耕社会的侵略，所以动画中Horde使用高科技武器，而反抗军则用传统冷兵器和魔法与其搏斗（也就是魔法封建贵族带领农民打钢枪大炮的故事）。<br>&amp;emsp;&amp;emsp;She-Ra的很多设定其实都是跟He-Man的呼应，所以两个人名字相似，两颗星球的名字类似，而且两个人都有魔法剑和魔法坐骑，都会变身，都是变了身就没人能认得出的秘密英雄。为了和Adam的Grayskull堡对照（顺便推出新玩具），Adora也有她自己的专属城堡Crystal Castle，这个城堡住着Light Hope，主要负责在She-Ra遇到困难时提供帮助。至于为什么Adora变身时咏唱的是Grayskull，我想是因为希瑞的神剑来自前作的Grayskull堡女巫，并且Grayskull玩具真的很好卖……  </p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera1/crystal.jpg" alt="crystal" title="Crystal Castle玩具套装"></p>
<h1 id="She-Ra-and-the-Princess-of-Power"><a href="#She-Ra-and-the-Princess-of-Power" class="headerlink" title="She-Ra and the Princess of Power"></a>She-Ra and the Princess of Power</h1><p>结束了关于老作品的啰嗦，让我们来到2018年推出的新She-Ra。</p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera1/shera_new.jpg" alt="shera_new" title="She-Ra and the Princess of Power"></p>
<p>&amp;emsp;&amp;emsp;新的故事是在1985 She-Ra的基础上继承发扬的，做了很多剧情和设定上的改动，在这里我简单列举几个：  </p>
<ul>
<li>作品彻底摆脱了Adam的存在</li>
<li>Adora不是被Hordak绑架的，而是被捡到的</li>
<li>Adora的母星Eternia代表的不再是魔法势力，而是比Horde更先进更古老的科技势力</li>
<li>角色设计更加多元化，彩虹，彩虹，更多的彩虹</li>
<li>以及，<strong>CATRADORAAAAAAA</strong></li>
</ul>
<p>&amp;emsp;&amp;emsp;关于Etheria的地理环境和主线剧情的问题我将在之后的文章叙述，本文我们继续关注Grayskull。在1-4季中，我们的Adora依然继承了前作中的变身台词“For the honor of Grayskull”，并且剧集没有对这句口令作出任何解释，直到第五季才终于打上了补丁。</p>
<h2 id="She-Ra的第一次变身"><a href="#She-Ra的第一次变身" class="headerlink" title="She-Ra的第一次变身"></a>She-Ra的第一次变身</h2><p>首先我们来回顾一下S01E01中Adora第一次见到Light Hope的场景：</p>
<blockquote>
<p><em>Adora无意中激活了神剑，她的面前出现了Light Hope的投影</em></p>
<p><strong>Light Hope:</strong> 你好，Adora。我的名字是Light Hope，我等了你很久了，但是在你与这柄剑建立纽带之前，我无法与你沟通。<br><strong>Adora:</strong> 你是送来这柄剑的人？<br><strong>Light Hope:</strong> 这柄剑注定是属于你的。Etheria需要你，Adora。你愿意回应它的召唤吗？你愿意为 Grayskull的荣誉而战吗？（Will you fight for the honor of Grayskull?）<br><strong>Adora:</strong> 你在说什么？什么是Grayskull？你说的没头没尾的，我听不懂。<br><strong>Light Hope:</strong> 你会懂的。</p>
</blockquote>
<p>而下面是Adora第一次变身的场景：</p>
<blockquote>
<p><em>Adora以神剑御敌，神剑被激活。</em><br><em>闪现一些画面：Etheria星球的全景，一颗火球坠落在地表，闪耀的Crystal Castle，草原上一个被激活的传送门中传出婴儿的声音，高举神剑的女战士的背影。</em></p>
<p>Light Hope的声音响起，她问“<strong>Adora, Will you fight for the honor of Grayskull?<strong>”<br>于是Adora顺势喊出了“</strong>For the honor of Grayskull</strong>”，并变身为She-Ra。</p>
</blockquote>
<p>&amp;emsp;&amp;emsp;可以看到，一开始我们的主角Adora完全不理解这个变身台词的含义，而之后不管是她还是观众们都自然而然地接受了这只是一个设定好的用于激活神剑的口令这一事实，只能说这种设计是出于情怀考虑。但是好在第五季编剧终于对这个问题作出了解释。</p>
<h2 id="上一代She-Ra的起义"><a href="#上一代She-Ra的起义" class="headerlink" title="上一代She-Ra的起义"></a>上一代She-Ra的起义</h2><p>&amp;emsp;&amp;emsp;She-Ra之所以能变身是因为她们是守护之剑的制造者，The First Ones，任命的管理员。The First Ones是一个拥有先进科技的古老文明，随着1-4季的故事展开，我们知道这个文明在跨星系殖民扩张，他们最初生活在母星Eternia，之后殖民了我们的星球Etheria，他们利用科技吸取整个星球的魔法能量，将能量贮存在星球的核心，把星球改造成了毁灭性的武器，上述计划被称为Etheria之心计划（The Heart of Etheria Project）。而上一代She-Ra，Mara试图阻止这个把星球变成武器的可怕计划，但是她的斗争失败了，于是她只能开启传送门，将星球传送到了Despondos，一个荒凉而封闭的维度空间，这样The First Ones就无法接触到Etheria，是以能够保护整个星球。<br>&amp;emsp;&amp;emsp;在S05E10中，Bow和Glimmar找到了Bow的父亲，两位致力于研究theFirst Ones文明的学者。学者们发现Mara其实并不是孤军奋战，她与一群起义军并肩作战。Light Hope播放了数据库中的一段录音：</p>
<blockquote>
<p>这是我们最后一次传递信息，如果有人听到，请你认真听。<br>Etheria之心有自动防故障装置，你们可以通过它彻底摧毁Etheria之心，它就位于Arxia前哨。<br>一周前我们与Arxia失去了联络，如果那边还有幸存者，你一定要找到它，Mara给我们争取了时间，但我们已经来不及。<br><strong>我们是Grayskull起义军中队，这是我们的最后一次联络。</strong></p>
</blockquote>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera1/grayskull_new.jpg" alt="grayskull_new" title="Grayskull的最后留言"></p>
<p>&amp;emsp;&amp;emsp;可以看到在本作中的Grayskull是一个起义军中队的名称，这个中队找到了阻止Etheria之心计划的方法，但也就此牺牲了。虽然剧集中没有明确指出，但是我个人的推测是，Mara可能是为了纪念这一支牺牲的起义军而将守护之剑的口令设置成了 “For the honor of Grayskull”。所以Grayskull从一个虚幻的力量象征，变成了一个实实在在的革命群体的代号，体现了革命精神的传承性，这还是有很大的进步意义的。</p>
<hr>
<p>&amp;emsp;&amp;emsp;下一篇文章我打算探讨星球Etheria的地理特征，主要是关于各个势力的地理位置分布，以及它们与1985 She-Ra的区别，感谢你阅读到这里！</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>shera系列考据</category>
      </categories>
      <tags>
        <tag>shera</tag>
      </tags>
  </entry>
  <entry>
    <title>Ethria地理志</title>
    <url>/2021/07/07/shera/shera2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>&amp;emsp;&amp;emsp;本文旨在梳理动画She-Ra and the Princess of Power中一些隐藏的背景设定，以帮助同好们更好地理解She-Ra的故事。文中大部分的信息整理自该作品相关的Fandom、Wikipedia和Reddit页面。<br>&amp;emsp;&amp;emsp;为了更好的传达作品的本意，本文中出现的人物、地名和势力的名称均采用英文原文。</p>
<hr>
<p>&amp;emsp;&amp;emsp;在上一篇介绍Grayskull的文章中，我们厘清了在2018 She-Ra中，故事的主要舞台是我们魔法与科技并存的星球Etheria，但是纵观新全5季，我们似乎从没有见过整个Etheria的世界地图，仅有的是远远的从太空俯瞰的星球七彩的轮廓，和一些局部的抽象化的战略地图。通过各种网上冲浪，我发现，动画制作组可能真的没怎么考虑过Etheria的全景地图到底是什么样的这件事，不过这不妨碍爱好者们寻找各种关于Etheria地理环境的蛛丝马迹。  </p>
<span id="more"></span>

<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera2/p1.png" alt="p1" title="S01中最初的Etheria，只有两个卫星，因为旧She-Ra中是这样设定的"></p>
<p>上图展示了S01中最初的Etheria，只有两个卫星，因为旧She-Ra中是这样设定的。</p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera2/p2.png" alt="p2" title="S05的Etheria，有12个卫星，这也是目前的官方设定"></p>
<p>而S05的Etheria有12个卫星，这也是目前的官方设定。</p>
<h1 id="势力划分"><a href="#势力划分" class="headerlink" title="势力划分"></a>势力划分</h1><p>在着手处理地图的问题之前，我们先来搞清楚Etheria上到底有哪几个主要势力。</p>
<h2 id="国家"><a href="#国家" class="headerlink" title="国家"></a>国家</h2><p>&amp;emsp;&amp;emsp;首先，根据Fandom上的星球介绍，Etheria上有着7个正式的国家。它们是Bright Moon，Plumeria，Salineas，Kingdom of Snows，Dryl，Mystacor，以及Fright Zone。<br>为了方便把这些地名对应到我们脑海里的那些角色上，我们先简单地遍历一下这几个国家和它们的统治者。  </p>
<h3 id="Bright-Moon"><a href="#Bright-Moon" class="headerlink" title="Bright Moon"></a>Bright Moon</h3><p>明月王国，Etheria最大的国家，它是反抗军和公主联盟的总部。<br>统治者：Queen Angella &amp; Glimmer  </p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera2/k1.png" alt="k1"></p>
<h3 id="Plumeria"><a href="#Plumeria" class="headerlink" title="Plumeria"></a>Plumeria</h3><p>森林植被覆盖的农业国家，居民大部分都热爱和平，远离争端，军事力量非常薄弱。<br>统治者：Perfuma  </p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera2/k2.png" alt="k2"></p>
<h3 id="Salineas"><a href="#Salineas" class="headerlink" title="Salineas"></a>Salineas</h3><p>海洋之国，一道Sea Gate将它与外界隔绝起来以保护它的国民。<br>统治者：Mermista  </p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera2/k3.png" alt="k3"></p>
<h3 id="Kingdom-of-Snows"><a href="#Kingdom-of-Snows" class="headerlink" title="Kingdom of Snows"></a>Kingdom of Snows</h3><p>Etheria的第二大国，位于极地，常年被冰雪覆盖。因为遥远和寒冷，它很少受到Horde的骚扰，所以最开始选择保持中立。<br>统治者：Frosta  </p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera2/k4.png" alt="k4"></p>
<h3 id="Dryl"><a href="#Dryl" class="headerlink" title="Dryl"></a>Dryl</h3><p>主要发展矿业和科技的王国，是唯一一个没有魔法元素的国度，似乎没有什么居民。<br>统治者：Entrapta  </p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera2/k5.png" alt="k5"></p>
<h3 id="Mystacor"><a href="#Mystacor" class="headerlink" title="Mystacor"></a>Mystacor</h3><p>巫师的国度，位于一座浮岛之上，比起国家，它更像是一个学院。<br>统治者：Castaspella  </p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera2/k6.png" alt="k6"></p>
<h3 id="Fright-Zone"><a href="#Fright-Zone" class="headerlink" title="Fright Zone"></a>Fright Zone</h3><p>Horde的老巢。曾经是Scorpia的国家，但是后来Hordak登录在星球上并占领了这片区域，让它充满了科技和污染的气息。<br>统治者：Hordak  </p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera2/k7.png" alt="k7"></p>
<hr>
<p>&amp;emsp;&amp;emsp;看到这里差不多大家能建立一个初步的印象：我们有5个由公主代表的国家，其中有3个在内陆，1个在海洋，1个在极地；还有一个特殊的由巫师统治的国家，它位于一座浮空岛上；最后还有一个我们都很熟悉的反派国家，它也在大陆上，并一直试图侵占他国的领土。</p>
<h2 id="区域和城镇"><a href="#区域和城镇" class="headerlink" title="区域和城镇"></a>区域和城镇</h2><p>除了上述的国家，还有一些值得注意的地区。</p>
<h3 id="Whispering-Woods"><a href="#Whispering-Woods" class="headerlink" title="Whispering Woods"></a>Whispering Woods</h3><p>充满魔法力量的森林，它位于Fright Zone和Bright Moon之间，形成了一道天然屏障。森林里还有我们的Crystal Castle和Madame Razz的家。Bow的家人和他们的图书馆也位于森林中。</p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera2/a1.png" alt="a1"></p>
<h3 id="Crystal-Castle"><a href="#Crystal-Castle" class="headerlink" title="Crystal Castle"></a>Crystal Castle</h3><p>The First Ones的遗迹，城堡里是我们的超级AI，Light Hope。Adora在这里获取了很多关于She-Ra的知识，不过部分都是经由Light Hope粉饰过的错误的历史。</p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera2/a2.png" alt="a2"></p>
<h3 id="Thaymor"><a href="#Thaymor" class="headerlink" title="Thaymor"></a>Thaymor</h3><p>整个动画第一场战役发生的城镇，也是catradora正式分手的地点。本来Adora应该和Catra一起占领这个城镇，但是在这里Adora发现了Horde的暴行，并决心投身于反叛军。</p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera2/a3.png" alt="a3"></p>
<h3 id="Crimson-Waste"><a href="#Crimson-Waste" class="headerlink" title="Crimson Waste"></a>Crimson Waste</h3><p>一片沙漠之地，也是法外之地，没有国籍的恶棍们聚集在这里。第三季中，Adora等人为了追寻有关Mara的真相来这里进行调查。这里有一座名为Valley of the Lost的城镇。</p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera2/a4.png" alt="a4"></p>
<h3 id="Beast-Island"><a href="#Beast-Island" class="headerlink" title="Beast Island"></a>Beast Island</h3><p>Horde的监狱，充满野兽和未知恐怖的岛屿，岛上的精神污染信号会使人迷失，Entrapta和Glimmer的父亲Micah都曾被流放到这座岛上。这座岛的一切异常都是源于The First Ones失控的科技。</p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera2/a5.png" alt="a5"></p>
<hr>
<p><strong>那么回到我们的问题，这些地点是如何分布的呢？</strong></p>
<p>&amp;emsp;&amp;emsp;在动画里，我们完全没有看到过完整的地图，目前唯一官方给出的地图，是在官方漫画Legendof the Fire Princess里的一张简略的大陆轮廓图。不过幸好，我们还有1985 She-Ra，为了卖玩具，他们确实有好好地画出一张完整的地图。</p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera2/m1.png" alt="m1" title="Legend of the Fire Princess中的地图"></p>
<h1 id="1985-She-Ra的世界地图"><a href="#1985-She-Ra的世界地图" class="headerlink" title="1985 She-Ra的世界地图"></a>1985 She-Ra的世界地图</h1><p>以下是作为玩具配件的Ehteria地图。</p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera2/m2.png" alt="m2" title="1985 She-Ra的大地图"></p>
<p>&amp;emsp;&amp;emsp;事实上这个地图还有一个更小巧的版本，它被印刷在Crystal Castle玩具套装的一个小圆桌上，想了解玩具的可以看看<a href="https://www.youtube.com/watch?v=6qpUXIG6fe0">这个视频</a>。</p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera2/m3.png" alt="m3" title="1985 She-Ra的小地图"></p>
<p>&amp;emsp;&amp;emsp;因为地图的字体比较小，所以我把一部分比较重要的地点名称放大。本文主要关注比较详细的大地图的内容。</p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera2/m4.png" alt="m4" title="较大的字体表示国家区域，较小的表示城镇"></p>
<p>下面我们来正式地分析一下地图。<br>&amp;emsp;&amp;emsp;在这个版本中，大陆的轮廓和新She-Ra漫画中的基本一致，所以新动画应该是参考了这张老地图的，它作为我们现在能找到的唯一官方地图，非常具有参考价值。<br>&amp;emsp;&amp;emsp;大陆的中央就是故事开始的地方——<strong>Fright Zone</strong>，Horde的老巢，它将整个大陆纵切为两块。西边的区域属于法外之地，而东边的区域则都是反抗军的领土。  </p>
<h2 id="中部和西部"><a href="#中部和西部" class="headerlink" title="中部和西部"></a>中部和西部</h2><p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera2/m5.png" alt="m5" title="中西部大陆"></p>
<p>&amp;emsp;&amp;emsp;<strong>Fright Zone</strong>的西南角落是Beast Island，它是一个被水环绕的监狱岛屿。而东北方向是Crimson Waste，在1985版本里，这里是由Scorpia统治的，而那时她也是Hordak的忠实追随者，所以这部分也算是Horde领地。</p>
<p>&amp;emsp;&amp;emsp;西边的大陆大部分是Valley of the Lost，在老版本里，这是一个神秘黑暗的山谷，传说去的人没有一个能回来，而且山谷里还有一座神秘的图书馆。在新版本中，咱们的动画组把老设定重组了一下，Valley of the Lost和Crimson Waste变成了同一个地方，而图书馆被挪到了Whispering Woods。</p>
<h2 id="东部、极地和海洋"><a href="#东部、极地和海洋" class="headerlink" title="东部、极地和海洋"></a>东部、极地和海洋</h2><p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera2/m6.png" alt="m6" title="东部大陆"></p>
<p>&amp;emsp;&amp;emsp;东边的大陆主要的公主们的地盘。可以看到<strong>Kingdom of Snows</strong>远远的在北极，所以Horde够不到它。而这张图上并没有画出海洋王国<strong>Salineas</strong>在哪，鉴于这里只标出了一个海洋Growling Sea，我们就假设它就在那里吧。</p>
<p>&amp;emsp;&amp;emsp;<strong>Bright Moon</strong>在大陆最东边，一条名为SingingRiver的河流把整个国家和大陆其他部分隔离开了，它的北方是Whispering Woods，勉强算是这个森林阻挡了Horde进犯的步伐吧。中间的位置还有我们的明星城市Thaymor，看这个位置确实是当之无愧是战略要塞。<strong>Mystactor</strong>在稍微西边一点的位置，鉴于它是一个飘在空中的浮岛，即使它比较靠近Horde，基本上也不会受到威胁。</p>
<p>&amp;emsp;&amp;emsp;新She-Ra的7个国家中还剩下2个，Dryl和Plumeria。不过在1985版本中，它们并不是国家。<strong>Dryl</strong>只是一个经营矿业的城镇；而Entrapta也不是公主，她是土生土长的Horde小干部。Perfuma也不是公主，没有领地，只是会使用植物魔法；而<strong>Plumeria</strong>，那时候还不存在。</p>
<p>&amp;emsp;&amp;emsp;以上是1985版本的世界地图，它只能解决我们的一部分问题，譬如说，Fright Zone在中间，Kingdom of Snows在北极，Salineas在海里，Bright Moon在最东边，Mystactor、Dryl和Plumeria在内陆的某个地方……剩下的地图，只能由粉丝自己在脑子里补完了。</p>
<h1 id="粉丝制作的Etheria地图"><a href="#粉丝制作的Etheria地图" class="headerlink" title="粉丝制作的Etheria地图"></a>粉丝制作的Etheria地图</h1><p>国外的She-Ra爱好者跟我们一样好奇世界地图的问题，而且已经有不少人做了深度研究了，这里我放一张完成度最高的粉丝作品。</p>
<p>&amp;emsp;&amp;emsp;这是由JavaRogers根据漫画地图制作的，考据真的很详细。这里放上发布这张地图的<a href="https://www.reddit.com/r/PrincessesOfPower/comments/js3z7v/doing_work_on_a_map_of_etheria/">Reddit页面</a>，这位朋友还整理了新She-Ra中出现过的<a href="https://www.reddit.com/r/PrincessesOfPower/comments/jr8d5e/list_of_location_details_from_shera_and_the/">所有地点</a>，感兴趣的可以去支持。</p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera2/m7.png" alt="m7" title="JavaRogers绘制的新She-Ra地图"></p>
<p>&amp;emsp;&amp;emsp;在这张地图上，FrightZone、Bright Moon、Kingdom of Snows、Mystacor的位置都没怎么变。Crimson Waste和Valley of the lost合并了，被安排在大陆西边。Salineas被安排在Growling Sea，而且更靠近Bright Moon的海岸线。Dryl在原本Scorpian Hill的位置，Plumeria在靠近Fright Zone的内陆。Whispering Woods往南边移了一点，好让它更符合“保护Bright Moon”的设定。都蛮符合动画的内容的，很合理，<strong>谢谢你，JavaRogers！</strong></p>
<hr>
<p>&amp;emsp;&amp;emsp;感谢你看到这里，这篇文章地名比较多，希望没有写得太让人头晕。下一篇文章应该是关于She-Ra主线剧情的梳理，又或者是新老She-Ra的人设对比，下次见啦~</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>shera系列考据</category>
      </categories>
      <tags>
        <tag>shera</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 1. 两数之和</title>
    <url>/2021/07/21/leetcode/leetcode1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://leetcode-cn.com/problems/two-sum/">https://leetcode-cn.com/problems/two-sum/</a></p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 <strong>和为目标值 target</strong> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。<br>你可以按任意顺序返回答案。</p>
<span id="more"></span>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [2,7,11,15], target = 9</span><br><span class="line">输出：[0,1]</span><br><span class="line">解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</span><br></pre></td></tr></table></figure>

<h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ul>
<li>2 &lt;&#x3D; nums.length &lt;&#x3D; 104</li>
<li>-109 &lt;&#x3D; nums[i] &lt;&#x3D; 109</li>
<li>-109 &lt;&#x3D; target &lt;&#x3D; 109</li>
<li>只会存在一个有效答案</li>
</ul>
<p>进阶：你可以想出一个时间复杂度小于 $O(n^2)$ 的算法吗？</p>
<h1 id="解一：哈希法"><a href="#解一：哈希法" class="headerlink" title="解一：哈希法"></a>解一：哈希法</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>遍历数组，扫描到数字a时，计算b&#x3D;target-a</p>
<ul>
<li>如果b在哈希表中，直接返回结果</li>
<li>否则，将a存入哈希表，继续遍历</li>
</ul>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><a href="https://blog.csdn.net/yiyueqinghui/article/details/112876881">ES6 new Map()</a><br>Map字典是以[键，值]的形式存储<br><code>set()</code><br>设置键名key对应的键值为value，然后返回整个 Map 结构</p>
<p><code>get()</code><br>get方法读取key对应的键值，如果找不到key，返回undefined</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">target</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> len=nums.length;</span><br><span class="line">    <span class="comment">//新建Map对象</span></span><br><span class="line">    <span class="keyword">let</span> sumMap=<span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="comment">//0号元素在它之前一定没有元素与之匹配，所以先存入哈希表</span></span><br><span class="line">    sumMap.set(nums[<span class="number">0</span>],<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//从1号元素开始遍历</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;len;i++)&#123;</span><br><span class="line">        match=target-nums[i];</span><br><span class="line">        <span class="comment">//如果match在Map中，即找到目标数对</span></span><br><span class="line">        <span class="comment">//返回Map中存储的数对应的索引和当前索引</span></span><br><span class="line">        <span class="keyword">if</span>(sumMap.get(match)!==<span class="literal">undefined</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> [sumMap.get(match),i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//否则，即match不在Map中</span></span><br><span class="line">        <span class="comment">//将它的值和索引存入Map，方便之和根据值查索引</span></span><br><span class="line">        sumMap.set(nums[i],i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>空间换时间<br>哈希时间复杂度$O(1)$，遍历n次<br>时间复杂度$O(N)$，空间复杂度$O(N)$</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>leetcode</category>
        <category>数组</category>
        <category>简单</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>数组</tag>
        <tag>哈希</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 26. 删除有序数组中的重复项</title>
    <url>/2021/07/21/leetcode/leetcode2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/">https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/</a></p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。</p>
<p>不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。</p>
<span id="more"></span>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,1,2]</span><br><span class="line">输出：2, nums = [1,2]</span><br><span class="line">解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。</span><br><span class="line">不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure>

<h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ul>
<li>$0 &lt;&#x3D; nums.length &lt;&#x3D; 3 * 10^4$</li>
<li>$-10^4 &lt;&#x3D; nums[i] &lt;&#x3D; 10^4$</li>
<li>nums 已按升序排列</li>
<li>返回数组长度<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。</span><br><span class="line">for (int i = 0; i &lt; len; i++) &#123;</span><br><span class="line">    print(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="解一：双指针法"><a href="#解一：双指针法" class="headerlink" title="解一：双指针法"></a>解一：双指针法</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>双指针，指定两个指针slow和fast，同时扫描串<br>保持fast指向的值应该的slow指向的下一个值</p>
<ul>
<li>相等时，slow不动，fast前进1</li>
<li>不等时，slow前进1<ul>
<li>如果前进后的slow与fast值不等，则把它赋值为fast指向的值</li>
<li>fast前进1</li>
</ul>
</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> /**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeDuplicates = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> n=nums.length</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">1</span>) <span class="keyword">return</span> nums;</span><br><span class="line">    <span class="keyword">let</span> slow=<span class="number">0</span>,fast=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(fast&lt;n)&#123;</span><br><span class="line">        <span class="comment">//如果指针指向的数不相等</span></span><br><span class="line">        <span class="keyword">if</span>(nums[slow]!==nums[fast])&#123;</span><br><span class="line">            slow++;</span><br><span class="line">            <span class="keyword">if</span>(nums[slow]!==nums[fast]) nums[slow]=nums[fast];</span><br><span class="line">        &#125;</span><br><span class="line">        fast++;</span><br><span class="line">    &#125;</span><br><span class="line">    slow++;</span><br><span class="line">    <span class="comment">//题目要求返回数组长度</span></span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>时间复杂度$O(N)$，空间复杂度$O(1)$</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>leetcode</category>
        <category>数组</category>
        <category>简单</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>数组</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 27. 移除元素</title>
    <url>/2021/07/21/leetcode/leetcode3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://leetcode-cn.com/problems/remove-element/">https://leetcode-cn.com/problems/remove-element/</a></p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</p>
<p>不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。</p>
<p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p>
<span id="more"></span>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,2,2,3], val = 3</span><br><span class="line">输出：2, nums = [2,2]</span><br><span class="line">解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。</span><br></pre></td></tr></table></figure>

<h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ul>
<li>$0 &lt;&#x3D; nums.length &lt;&#x3D; 100</li>
<li>$0 &lt;&#x3D; nums[i] &lt;&#x3D; 50$</li>
<li>$0 &lt;&#x3D; val &lt;&#x3D; 100$</li>
<li>返回数组长度<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。</span><br><span class="line">for (int i = 0; i &lt; len; i++) &#123;</span><br><span class="line">    print(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="解一：双指针法"><a href="#解一：双指针法" class="headerlink" title="解一：双指针法"></a>解一：双指针法</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>把前面扫描到的需要删除的元素用最后的元素替换<br>双指针，指定两个指针head和tail，分别在串的首尾<br>head从头到尾扫描，找到与val相等的元素后</p>
<ul>
<li>tail从尾到头扫描</li>
<li>用第一个与val不等的元素替换head指向的元素<br>当head&#x3D;tail时结束，返回head</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">val</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeElement = <span class="function"><span class="keyword">function</span>(<span class="params">nums, val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> n=nums.length</span><br><span class="line">    <span class="keyword">if</span>(n===<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//分配首尾指针</span></span><br><span class="line">    <span class="keyword">let</span> head=<span class="number">0</span>,tail=n-<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//当head位于tail前面时</span></span><br><span class="line">    <span class="keyword">while</span>(head&lt;=tail)&#123;</span><br><span class="line">        <span class="comment">//如果head指针指向的值等于val</span></span><br><span class="line">        <span class="keyword">if</span>(nums[head]===val)&#123;</span><br><span class="line">            <span class="comment">//找到最后一个不等于val的元素</span></span><br><span class="line">            <span class="keyword">while</span>(tail&gt;<span class="number">0</span> &amp;&amp; nums[tail]===val) tail--;</span><br><span class="line">            <span class="comment">//如果tail在head左边了，说明没有可以替换的元素</span></span><br><span class="line">            <span class="comment">//即结束，返回处理好的数组长度head-1+1=head</span></span><br><span class="line">            <span class="keyword">if</span>(head&gt;=tail) <span class="keyword">return</span> head;</span><br><span class="line">            <span class="comment">//否则，将用tail元素替换head元素，tail左移</span></span><br><span class="line">            nums[head]=nums[tail--];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//head指向的元素处理完成，右移一位</span></span><br><span class="line">        head++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//head左边的元素都处理完成，返回长度head-1+1=head</span></span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>时间复杂度$O(N)$，空间复杂度$O(1)$</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>leetcode</category>
        <category>数组</category>
        <category>简单</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>数组</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 35. 搜索插入位置</title>
    <url>/2021/07/22/leetcode/leetcode4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://leetcode-cn.com/problems/search-insert-position/">https://leetcode-cn.com/problems/search-insert-position/</a></p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p>
<p>请必须使用时间复杂度为 O(log n) 的算法。</p>
<span id="more"></span>

<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: nums = [1,3,5,6], target = 5</span><br><span class="line">输出: 2</span><br><span class="line">输入: nums = [1,3,5,6], target = 7</span><br><span class="line">输出: 4</span><br><span class="line">输入: nums = [1,3,5,6], target = 0</span><br><span class="line">输出: 0</span><br></pre></td></tr></table></figure>

<h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>nums 为无重复元素的升序排列数组</p>
<h1 id="解一：二分查找"><a href="#解一：二分查找" class="headerlink" title="解一：二分查找"></a>解一：二分查找</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>维护三个指针l,r,m<br>初始化l和r在数组首尾<br>循环：当l&lt;r时<br>m取(l+r)&#x2F;2向下取整</p>
<ul>
<li>如果target&lt;nums[m],r-m-1</li>
<li>如果nums[m]&lt;target,l&#x3D;m+1<br>循环结束时l&#x3D;r，比较target和nums[l]</li>
<li>等于，命中，返回l</li>
<li>小于，插入到l的位置，返回l</li>
<li>大于，插入到l右边，返回l+1</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">target</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> searchInsert = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> l=<span class="number">0</span>,r=nums.length-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> m=<span class="built_in">parseInt</span>((l+r)/<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(nums[l]&gt;target) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(nums[r]&lt;target) <span class="keyword">return</span> r+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">        m=<span class="built_in">parseInt</span>((l+r)/<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span>(target&lt;=nums[m]) r=m-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> l=m+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums[l]&gt;=target?l:l+<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>时间复杂度$O(\log n)$</p>
<h1 id="解二：直接遍历"><a href="#解二：直接遍历" class="headerlink" title="解二：直接遍历"></a>解二：直接遍历</h1><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>直接遍历数组，因为是升序排序的</p>
<ul>
<li>直接命中，返回索引</li>
<li>找到第一个比target大的元素，返回索引</li>
<li>没找到，加在后面，返回数组长度</li>
</ul>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> searchInsert = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] &gt;= target) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums.length;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h2><p>$O(n)$</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>leetcode</category>
        <category>数组</category>
        <category>简单</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>数组</tag>
        <tag>BST</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 53. 最大子序和</title>
    <url>/2021/07/22/leetcode/leetcode5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://leetcode-cn.com/problems/maximum-subarray/">https://leetcode-cn.com/problems/maximum-subarray/</a></p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>
<span id="more"></span>

<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [-2,1,-3,4,-1,2,1,-5,4]</span><br><span class="line">输出：6</span><br><span class="line">解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。</span><br></pre></td></tr></table></figure>

<h1 id="解一：动态规划"><a href="#解一：动态规划" class="headerlink" title="解一：动态规划"></a>解一：动态规划</h1><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>用 $f(i)$ 代表以第 i 个数结尾的「连续子数组的最大和」，问题可以转换为：<br>$$\max_{0 \leq i \leq n-1} { f(i) }$$<br>我们只需要求出每个位置的 $f(i)$，然后返回最大值即可。</p>
<p>如何求 $f(i)$ ：<br>考虑 $nums[i]$ 单独成为一段还是加入 $f(i-1)$ 对应的那一段，这取决于 $nums[i]$ 和 $f(i−1)+nums[i]$ 的大小，取较大者，列出动态规划转移方程：<br>$$f(i) &#x3D; \max { f(i-1) + nums[i], nums[i] }$$</p>
<p>数据结构：  </p>
<ul>
<li>变量maxf维护当前最大的$f(i)$</li>
<li>变量pre维护当前$f(i),f(i-1)</li>
</ul>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><code>forEach()</code><br><a href="https://developer.mozilla.org/zh-CN/docs/orphaned/Web/JavaScript/Reference/Global_Objects/Array/forEach">文档</a></p>
<p>对数组的每个元素执行一次给定的函数。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> maxSubArray = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> pre = <span class="number">0</span>, maxf = nums[<span class="number">0</span>];</span><br><span class="line">    nums.forEach(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//选择f(i-1)+nums[i]还是nums[i]</span></span><br><span class="line">        pre = <span class="built_in">Math</span>.max(pre + x, x);</span><br><span class="line">        <span class="comment">//维护最大的f</span></span><br><span class="line">        maxf = <span class="built_in">Math</span>.max(maxf, pre);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> maxf;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="复杂度分析："><a href="#复杂度分析：" class="headerlink" title="复杂度分析："></a>复杂度分析：</h2><p>时间复杂度O(n)、空间复杂度O(n)</p>
<h1 id="解二：分治"><a href="#解二：分治" class="headerlink" title="解二：分治"></a>解二：分治</h1><h2 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h2><p>自上而下：分解成子问题，求解子问题<br>自下而上：合并子问题</p>
<p>求a序列在区间[l,r]内的最大子段和<br>以m分开每一次取一半来解决，最大子段和可能出现在3个位置</p>
<ul>
<li>左边内部</li>
<li>右边内部</li>
<li>包含了左边和右边的一部分</li>
</ul>
<h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">getSubSum=<span class="function"><span class="keyword">function</span>(<span class="params">nums,l,r</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l===r) <span class="keyword">return</span> nums[l];</span><br><span class="line">    <span class="keyword">let</span> m=<span class="built_in">parseInt</span>((l+r)/<span class="number">2</span>);</span><br><span class="line">    <span class="comment">//求左边内部</span></span><br><span class="line">    <span class="keyword">let</span> lsum=getSubSum(nums,l,m);</span><br><span class="line">    <span class="comment">//求右边内部</span></span><br><span class="line">    <span class="keyword">let</span> rsum=getSubSum(nums,m+<span class="number">1</span>,r); </span><br><span class="line">    <span class="comment">//求横跨左边和右边</span></span><br><span class="line">    <span class="keyword">let</span> ltemp=<span class="number">0</span>,lmax=nums[m];</span><br><span class="line">    <span class="comment">//从右往左遍历左边的元素，维护累加器和最大值</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=m;i&gt;=l;i--) &#123;</span><br><span class="line">        ltemp+=nums[i];</span><br><span class="line">        <span class="keyword">if</span>(ltemp&gt;lmax) lmax=ltemp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//从左往右遍历右边的元素，维护累加器和最大值</span></span><br><span class="line">    <span class="keyword">let</span> rtemp=<span class="number">0</span>,rmax=nums[m+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=m+<span class="number">1</span>;i&lt;=r;i++) &#123;</span><br><span class="line">        rtemp+=nums[i];</span><br><span class="line">        <span class="keyword">if</span>(rtemp&gt;rmax) rmax=rtemp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max(lsum,rsum,lmax+rmax);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> maxSubArray = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getSubSum(nums,<span class="number">0</span>,nums.length-<span class="number">1</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>一共logn层，每一层全部扫描n<br>时间复杂度$O(n\log n)$</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>leetcode</category>
        <category>数组</category>
        <category>中等</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>数组</tag>
        <tag>动态规划</tag>
        <tag>分治</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 88. 合并两个有序数组</title>
    <url>/2021/07/23/leetcode/leetcode6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://leetcode-cn.com/problems/merge-sorted-array/">https://leetcode-cn.com/problems/merge-sorted-array/</a></p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给你两个有序整数数组 nums1 和 nums2，请你将 nums2 合并到 nums1 中，使 nums1 成为一个有序数组。</p>
<p>初始化 nums1 和 nums2 的元素数量分别为 m 和 n 。你可以假设 nums1 的空间大小等于 m + n，这样它就有足够的空间保存来自 nums2 的元素。</p>
<p>注意！修改的数组是nums1;</p>
<span id="more"></span>

<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3</span><br><span class="line">输出：[1,2,2,3,5,6]</span><br></pre></td></tr></table></figure>
<h1 id="解一：直接合并排序"><a href="#解一：直接合并排序" class="headerlink" title="解一：直接合并排序"></a>解一：直接合并排序</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arrayObject.splice(index,howmany,item1,.....,itemX)</span><br></pre></td></tr></table></figure>
<p><a href="https://www.w3school.com.cn/jsref/jsref_splice.asp"><code>splice()</code></a> 方法删除位于从index开始，长度为howmany的元素，并添加新项目item</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arrayObject.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br></pre></td></tr></table></figure>
<p>箭头函数排序，升序，降序可以改成<code>b-a</code></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> merge = <span class="function"><span class="keyword">function</span>(<span class="params">nums1, m, nums2, n</span>) </span>&#123;</span><br><span class="line">    nums1.splice(m, nums1.length - m, ...nums2);</span><br><span class="line">    nums1.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b); </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>套用快速排序的时间空间复杂度</p>
<table>
<thead>
<tr>
<th>时间复杂度</th>
<th>空间复杂度</th>
</tr>
</thead>
<tbody><tr>
<td>$O((m+n)\log (m+n))$</td>
<td>$O(\log (m+n))$</td>
</tr>
</tbody></table>
<h1 id="解二：双指针，创建第三个数组"><a href="#解二：双指针，创建第三个数组" class="headerlink" title="解二：双指针，创建第三个数组"></a>解二：双指针，创建第三个数组</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>维护两个指针分别从头到尾扫描两个数组<br>把较小值放到第三个数组中</p>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> merge = <span class="function"><span class="keyword">function</span>(<span class="params">nums1, m, nums2, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> p1 = <span class="number">0</span>, p2 = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//新建数组</span></span><br><span class="line">    <span class="keyword">const</span> sorted = <span class="keyword">new</span> <span class="built_in">Array</span>(m + n).fill(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">var</span> cur;</span><br><span class="line">    <span class="keyword">while</span> (p1 &lt; m || p2 &lt; n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p1 === m) &#123;</span><br><span class="line">            <span class="comment">//num1结束，nums2补位</span></span><br><span class="line">            cur = nums2[p2++];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p2 === n) &#123;</span><br><span class="line">            <span class="comment">//num2结束，nums1补位</span></span><br><span class="line">            cur = nums1[p1++];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums1[p1] &lt; nums2[p2]) &#123;</span><br><span class="line">            <span class="comment">//取nums1</span></span><br><span class="line">            cur = nums1[p1++];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//取nums2</span></span><br><span class="line">            cur = nums2[p2++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//因为上面做了++操作，所以这里要-1</span></span><br><span class="line">        sorted[p1 + p2 - <span class="number">1</span>] = cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//结果返回nums1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i != m + n; ++i) &#123;</span><br><span class="line">        nums1[i] = sorted[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><table>
<thead>
<tr>
<th>时间复杂度</th>
<th>空间复杂度</th>
</tr>
</thead>
<tbody><tr>
<td>$O(m+n)$</td>
<td>$O(m+n)$</td>
</tr>
</tbody></table>
<h1 id="解三：逆向双指针，直接修改nums1"><a href="#解三：逆向双指针，直接修改nums1" class="headerlink" title="解三：逆向双指针，直接修改nums1"></a>解三：逆向双指针，直接修改nums1</h1><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>维护两个指针从后向前扫描两个数组<br>将较大者放到nums1末尾</p>
<h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> merge = <span class="function"><span class="keyword">function</span>(<span class="params">nums1, m, nums2, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> p1 = m-<span class="number">1</span>, p2 = n-<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//新建数组</span></span><br><span class="line">    <span class="keyword">for</span>(i=m+n-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span> (p1&lt;<span class="number">0</span>) nums1[i]=nums2[p2--];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p2&lt;<span class="number">0</span>) nums1[i]=nums1[p1--];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums1[p1]&gt;nums2[p2]) nums1[i]=nums1[p1--];</span><br><span class="line">        <span class="keyword">else</span> nums1[i]=nums2[p2--];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="复杂度分析-2"><a href="#复杂度分析-2" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><table>
<thead>
<tr>
<th>时间复杂度</th>
<th>空间复杂度</th>
</tr>
</thead>
<tbody><tr>
<td>$O(m+n)$</td>
<td>$O(1)$</td>
</tr>
</tbody></table>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>leetcode</category>
        <category>数组</category>
        <category>中等</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>数组</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 108. 将有序数组转换为二叉搜索树</title>
    <url>/2021/07/23/leetcode/leetcode7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/">https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/</a></p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给你一个整数数组 nums ，其中元素已经按 升序 排列，请你将其转换为一棵 高度平衡 二叉搜索树。</p>
<p>高度平衡 二叉树是一棵满足「每个节点的左右两个子树的高度差的绝对值不超过 1 」的二叉树。</p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>递归构建二叉搜索树BST</p>
<ul>
<li>以数组中间元素为root结点的值</li>
<li>定义最左子树</li>
<li>定义右子树</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;TreeNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">addTreeNode</span>(<span class="params">l,r,nums</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l&gt;r) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> m=<span class="built_in">parseInt</span>((l+r)/<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">const</span> root=<span class="keyword">new</span> TreeNode(nums[m]);</span><br><span class="line">    root.left=addTreeNode(l,m-<span class="number">1</span>,nums);</span><br><span class="line">    root.right=addTreeNode(m+<span class="number">1</span>,r,nums);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sortedArrayToBST = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> addTreeNode(<span class="number">0</span>,nums.length-<span class="number">1</span>,nums)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>leetcode</category>
        <category>数组</category>
        <category>中等</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>数组</tag>
        <tag>BST</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 39. 组合总和</title>
    <url>/2021/07/29/leetcode/leetcode9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://leetcode-cn.com/problems/combination-sum/">https://leetcode-cn.com/problems/combination-sum/</a></p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个无重复元素的正整数数组 candidates 和一个正整数 target ，找出 candidates 中所有可以使数字和为目标数 target 的唯一组合。</p>
<span id="more"></span>

<p>candidates 中的数字可以无限制重复被选取。如果至少一个所选数字数量不同，则两种组合是唯一的。</p>
<p>对于给定的输入，保证和为 target 的唯一组合数少于 150 个。</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: candidates = [2,3,6,7], target = 7</span><br><span class="line">输出: [[7],[2,2,3]]</span><br></pre></td></tr></table></figure>

<h1 id="解：回溯搜索"><a href="#解：回溯搜索" class="headerlink" title="解：回溯搜索"></a>解：回溯搜索</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><a href="https://leetcode-cn.com/problems/combination-sum/solution/shou-hua-tu-jie-zu-he-zong-he-combination-sum-by-x/">参考</a><br>将搜索的过程用树表达<br>以输入：candidates &#x3D; [2, 3, 6], target &#x3D; 8 为例：<br><img src="https://pic.leetcode-cn.com/1599606793-laurLe-image.png"></p>
<p>以target为根节点，candidates里的数为叶子</p>
<ul>
<li>▲：如果当前叶子到根节点求和&gt;target，停止</li>
<li>o：如果当前叶子到根节点求和&#x3D;target，加入解集</li>
<li>x：如果产生重复 剪枝</li>
</ul>
<p>用递归实现以上逻辑</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> combinationSum = (candidates, target)&#123;</span><br><span class="line">    <span class="keyword">const</span> group = [];</span><br><span class="line">    <span class="keyword">const</span> dfs = <span class="function">(<span class="params">start, temp, sum</span>) =&gt;</span> &#123; </span><br><span class="line">        <span class="comment">// start是当前选择的起点索引 </span></span><br><span class="line">        <span class="comment">// temp是当前的集合 </span></span><br><span class="line">        <span class="comment">// sum是当前求和</span></span><br><span class="line">        <span class="keyword">if</span> (sum &gt;= target) &#123;</span><br><span class="line">            <span class="comment">//如果大于，直接结束递归</span></span><br><span class="line">            <span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">                <span class="comment">//如果相等，将temp的拷贝加入解集</span></span><br><span class="line">                group.push(temp.slice());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;   <span class="comment">// 结束当前递归</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt; candidates.length; i++) &#123; </span><br><span class="line">            <span class="comment">// 枚举当前可选的数，从start开始</span></span><br><span class="line">            temp.push(candidates[i]);</span><br><span class="line">            <span class="comment">// 选这个数</span></span><br><span class="line">            dfs(i, temp, sum + candidates[i]); </span><br><span class="line">            <span class="comment">// 基于此继续选择，传i，下一次就不会选到i左边的数，达到剪枝的作用</span></span><br><span class="line">            temp.pop();   </span><br><span class="line">            <span class="comment">// 撤销选择，回到选择candidates[i]之前的状态，继续尝试选同层右边的数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    dfs(<span class="number">0</span>, [], <span class="number">0</span>); </span><br><span class="line">    <span class="comment">// 最开始可选的数是从第0项开始的，传入一个空集合，sum也为0</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>leetcode</category>
        <category>数组</category>
        <category>中等</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>数组</tag>
        <tag>回溯</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 数组总结</title>
    <url>/2021/07/23/leetcode/leetcodeSum1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span>
<h1 id="数组常用方法"><a href="#数组常用方法" class="headerlink" title="数组常用方法"></a>数组常用方法</h1><h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建空数组</span></span><br><span class="line"><span class="keyword">const</span> arr=[];</span><br><span class="line"><span class="keyword">const</span> arr=<span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建长度为l的全0数组</span></span><br><span class="line"><span class="keyword">const</span> arr=<span class="keyword">new</span> <span class="built_in">Array</span>(l).fill(<span class="number">0</span>); </span><br></pre></td></tr></table></figure>

<h2 id="增删查改"><a href="#增删查改" class="headerlink" title="增删查改"></a>增删查改</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.push(item,item,...)     <span class="comment">//在数组末尾加</span></span><br><span class="line">arr.unshift(item,item,...) <span class="comment">//在数组开头加</span></span><br><span class="line"></span><br><span class="line">arr.pop()   <span class="comment">//删除最后一个元素</span></span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>leetcode</category>
        <category>数组</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>数组</tag>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 219. 存在重复元素 II</title>
    <url>/2021/07/29/leetcode/leetcode8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://leetcode-cn.com/problems/contains-duplicate-ii/">https://leetcode-cn.com/problems/contains-duplicate-ii/</a></p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个整数数组和一个整数 k，判断数组中是否存在两个不同的索引 i 和 j，使得 nums [i] &#x3D; nums [j]，并且 i 和 j 的差的 绝对值 至多为 k。</p>
<span id="more"></span>

<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: nums = [1,2,3,1], k = 3</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure>

<h1 id="解一：Map哈希表"><a href="#解一：Map哈希表" class="headerlink" title="解一：Map哈希表"></a>解一：Map哈希表</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>维护一个哈希表存储 【值：索引】对<br>初始化将nums[0]加入<br>扫描数组</p>
<ul>
<li>如果扫描到在哈希表中的数据，判断是否距离超过k</li>
<li>没超过，返回true</li>
<li>超过，更新键值对的索引值</li>
<li>如果扫描到不在哈希表中的数据，将它加入<br>返回false</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @param &#123;number[]&#125; nums</span><br><span class="line"> * @param &#123;number&#125; k</span><br><span class="line"> * @<span class="keyword">return</span> &#123;boolean&#125;</span><br><span class="line"> */</span><br><span class="line">var containsNearbyDuplicate = function(nums, k) &#123;</span><br><span class="line">    //哈希法</span><br><span class="line">    let <span class="built_in">map</span>=new Map();</span><br><span class="line">    <span class="built_in">map</span>.<span class="built_in">set</span>(nums[<span class="number">0</span>],<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> (let i=<span class="number">1</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">        //如果不在<span class="built_in">map</span>中,加入</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">map</span>.get(nums[i])!==undefined)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i-<span class="built_in">map</span>.get(nums[i])&lt;=k) <span class="keyword">return</span> true;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">map</span>.<span class="built_in">set</span>(nums[i],i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> false</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="解二：Set类滑动窗口，算哈希吧"><a href="#解二：Set类滑动窗口，算哈希吧" class="headerlink" title="解二：Set类滑动窗口，算哈希吧"></a>解二：Set类滑动窗口，算哈希吧</h1><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>维护一个哈希表，里面至多包含k个元素<br>出现重复值时返回true<br>如果哈希表中存在大于k个元素，移除最前面的数</p>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">var containsNearbyDuplicate = function(nums, k) &#123;</span><br><span class="line">    //哈希法</span><br><span class="line">    let <span class="built_in">set</span>=new <span class="type">Set</span>();</span><br><span class="line">    <span class="keyword">for</span> (let i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">        //如果不在<span class="built_in">set</span>中,加入</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">set</span>.has(nums[i])) <span class="keyword">return</span> true;</span><br><span class="line">        <span class="built_in">set</span>.add(nums[i])</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">set</span>.size&gt;k) <span class="built_in">set</span>.delete(nums[i-k])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> false</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>leetcode</category>
        <category>数组</category>
        <category>简单</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>数组</tag>
        <tag>哈希</tag>
      </tags>
  </entry>
</search>
