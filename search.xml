<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/06/14/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
  </entry>
  <entry>
    <title>web前端学习路线</title>
    <url>/2021/07/14/JavaScript/frontEnd1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h1><div class="markmap-container" style="height:700px;" ><svg class="markmap-svg">{"t":"heading","d":1,"v":"前端技能","c":[{"t":"heading","d":2,"v":"交互/设计"},{"t":"heading","d":2,"v":"语言","c":[{"t":"list_item","d":3,"v":"HTML"},{"t":"list_item","d":3,"v":"CSS"},{"t":"list_item","d":3,"v":"JavaScript"},{"t":"list_item","d":3,"v":"PHP"}]},{"t":"heading","d":2,"v":"行业标准","c":[{"t":"list_item","d":3,"v":"DOM"},{"t":"list_item","d":3,"v":"ES2015"},{"t":"list_item","d":3,"v":"HTTP"},{"t":"list_item","d":3,"v":"JSON"},{"t":"list_item","d":3,"v":"XML"}]},{"t":"heading","d":2,"v":"框架","c":[{"t":"list_item","d":3,"v":"React.js"},{"t":"list_item","d":3,"v":"Angular.js"},{"t":"list_item","d":3,"v":"jQuery"},{"t":"list_item","d":3,"v":"Vue.js"},{"t":"list_item","d":3,"v":"lodash"}]},{"t":"heading","d":2,"v":"兼容性","c":[{"t":"list_item","d":3,"v":"IE"},{"t":"list_item","d":3,"v":"CSS3新特性"},{"t":"list_item","d":3,"v":"HTML5新特性"},{"t":"list_item","d":3,"v":"ES2015"},{"t":"list_item","d":3,"v":"移动端"}]},{"t":"heading","d":2,"v":"前端工程","c":[{"t":"list_item","d":3,"v":"npm"},{"t":"list_item","d":3,"v":"webpack"},{"t":"list_item","d":3,"v":"postcss"}]},{"t":"heading","d":2,"v":"调试","c":[{"t":"list_item","d":3,"v":"浏览器调试工具"},{"t":"list_item","d":3,"v":"Fiddler"}]},{"t":"heading","d":2,"v":"团队协作","c":[{"t":"list_item","d":3,"v":"Git/SVN"},{"t":"list_item","d":3,"v":"编码规范"},{"t":"list_item","d":3,"v":"文档管理"}]},{"t":"heading","d":2,"v":"性能","c":[{"t":"list_item","d":3,"v":"优化规则"},{"t":"list_item","d":3,"v":"开发者工具"},{"t":"list_item","d":3,"v":"浏览器管理"}]},{"t":"heading","d":2,"v":"安全性","c":[{"t":"list_item","d":3,"v":"XSS"},{"t":"list_item","d":3,"v":"CSRF"},{"t":"list_item","d":3,"v":"加密解密"},{"t":"list_item","d":3,"v":"编码解码"}]},{"t":"heading","d":2,"v":"编程思想","c":[{"t":"list_item","d":3,"v":"函数式编程"},{"t":"list_item","d":3,"v":"面向对象"},{"t":"list_item","d":3,"v":"设计模式"}]}]}</svg></div>

<h1 id="浏览器架构"><a href="#浏览器架构" class="headerlink" title="浏览器架构"></a>浏览器架构</h1><p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/front-end-notes/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9E%B6%E6%9E%84.png"></p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>前端工程师进阶系列</category>
      </categories>
      <tags>
        <tag>front end</tag>
      </tags>
  </entry>
  <entry>
    <title>2021 Hexo+Github+NexT 网站搭建踩坑实录</title>
    <url>/2021/07/08/blogBuild/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>搭建这个blog踩了挺多坑的，这里整理一下搭建网站的过程，和我自己遇到的一些难解的问题。<br>大概主要是甩一些链接。</p>
<p>参考<a href="https://zhuanlan.zhihu.com/p/60578464">https://zhuanlan.zhihu.com/p/60578464</a></p>
<span id="more"></span>

<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><h2 id="安装npm"><a href="#安装npm" class="headerlink" title="安装npm"></a>安装npm</h2><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><h2 id="创建GitHub仓库"><a href="#创建GitHub仓库" class="headerlink" title="创建GitHub仓库"></a>创建GitHub仓库</h2><h1 id="操作手册"><a href="#操作手册" class="headerlink" title="操作手册"></a>操作手册</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean   # 清除缓存文件等</span><br><span class="line">hexo g       # 生成页面</span><br><span class="line">hexo s       # 启动预览</span><br><span class="line">hexo d       # 部署到github</span><br><span class="line">hexo s -g    # 生成页面并启动预览</span><br></pre></td></tr></table></figure>

<h1 id="NexT主题"><a href="#NexT主题" class="headerlink" title="NexT主题"></a>NexT主题</h1><p>我目前的版本version：7.8.0<br>可以在 站点根目录-&gt;themes-&gt;package.json 看到<br>修改主题：见站点根目录-&gt;themes-&gt;_config.yml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">theme:next67 </span><br></pre></td></tr></table></figure>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>很多网上教程都是用的NexT v5的源，但这个库已经不再更新了。用旧版本会产生站点不显示author和description的情况，文章的目录导航也会出问题。<br>新版本已经整体迁移到新的<a href="https://github.com/theme-next/hexo-theme-next">github仓库</a>。  </p>
<h2 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h2><p>参考文章：<a href="https://www.jianshu.com/p/3ff20be8574c">Hexo-Next-主题优化</a></p>
<h3 id="字数统计"><a href="#字数统计" class="headerlink" title="字数统计"></a>字数统计</h3><p>最新的字数统计插件<a href="https://github.com/theme-next/hexo-symbols-count-time">symbols_count_time</a></p>
<h3 id="浏览次数"><a href="#浏览次数" class="headerlink" title="浏览次数"></a>浏览次数</h3><p>打开next主题配置文件\themes\next_config.yml，搜索找到busuanzi_count，把enable设置为true，<a href="https://blog.csdn.net/baidu_34310405/article/details/102665373">参考</a></p>
<h3 id="修改字体大小"><a href="#修改字体大小" class="headerlink" title="修改字体大小"></a>修改字体大小</h3><p>在themes\next\source\css_variables\base.styl内搜索font-size</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">$<span class="attribute">font-size</span>-smallest       = .<span class="number">8em</span>;  //阅读时间，左侧菜单文字blabla</span><br><span class="line">$<span class="attribute">font-size</span>-smaller        = .<span class="number">85em</span>;</span><br><span class="line">$<span class="attribute">font-size</span>-small          = .<span class="number">9em</span>;</span><br><span class="line">$<span class="attribute">font-size</span>-medium         = .<span class="number">95em</span>;</span><br><span class="line">$<span class="attribute">font-size</span>-large          = .<span class="number">95em</span>; //正文</span><br><span class="line">$<span class="attribute">font-size</span>-larger         = <span class="number">1.125em</span>;</span><br><span class="line">$<span class="attribute">font-size</span>-largest        = <span class="number">1.5em</span>;</span><br></pre></td></tr></table></figure>

<h3 id="文章仅显示摘要"><a href="#文章仅显示摘要" class="headerlink" title="文章仅显示摘要"></a>文章仅显示摘要</h3><p>在Next主题的_config.yml中把设置打开：(默认安装时就打开了)</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Automatically excerpt description in homepage as preamble text.</span></span><br><span class="line"><span class="attr">excerpt_description:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>在需要截断的地方加入：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure>

<h3 id="修改链接样式"><a href="#修改链接样式" class="headerlink" title="修改链接样式"></a>修改链接样式</h3><p>打开文件 themes&#x2F;next&#x2F;source&#x2F;css&#x2F;_common&#x2F;components&#x2F;post&#x2F;post.styl，在末尾添加</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0593d3</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#0593d3</span>;</span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fc6423</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: none;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#fc6423</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="代码块复制功能"><a href="#代码块复制功能" class="headerlink" title="代码块复制功能"></a>代码块复制功能</h3><p>next主题目录下的config.yml文件中<br>codeblock下面激活，<code>enable: true</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="comment"># Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic</span></span><br><span class="line">  <span class="comment"># See: https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line">  <span class="attr">highlight_theme:</span> <span class="string">normal</span></span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Show text copy result.</span></span><br><span class="line">    <span class="attr">show_result:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    <span class="attr">style:</span></span><br></pre></td></tr></table></figure>
<h3 id="版权信息"><a href="#版权信息" class="headerlink" title="版权信息"></a>版权信息</h3><p>在博客文章底部添加版权信息，<a href="https://blog.csdn.net/buknow/article/details/101216465">参考</a></p>
<ol>
<li>首先在在主题目录 <code>layout/_macro/</code> 下，新增文件my-copyright.swig ，填入以下内容：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;%- <span class="keyword">if</span> theme.my_copyright.enabled %&#125;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;my_post_copyright&quot;</span>&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center;color: #ccc;font-size:14px;&quot;</span>&gt;</span>------ 版权信息 ------<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"> <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"> </span><br><span class="line"> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>本文标题:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; page.title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>文章作者:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span> <span class="attr">title</span>=<span class="string">&quot;访问 &#123;&#123; author &#125;&#125; 的个人博客&quot;</span>&gt;</span>&#123;&#123; author &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>发布时间:<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#123;&#123; page.date.format(&quot;YYYY年MM月DD日 - HH:mm&quot;) &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>最后更新:<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#123;&#123; page.updated.format(&quot;YYYY年MM月DD日 - HH:mm&quot;) &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>原始链接:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot;</span> <span class="attr">title</span>=<span class="string">&quot;&#123;&#123; page.title &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; page.permalink &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;copy-path&quot;</span>  <span class="attr">title</span>=<span class="string">&quot;点击复制文章链接&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-clipboard&quot;</span> <span class="attr">data-clipboard-text</span>=<span class="string">&quot;&#123;&#123; page.permalink &#125;&#125;&quot;</span>  <span class="attr">aria-label</span>=<span class="string">&quot;复制成功！&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>许可协议:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">rel</span>=<span class="string">&quot;license&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://creativecommons.org/licenses/by-nc-nd/4.0/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)&quot;</span>&gt;</span>署名-非商业性使用-禁止演绎 4.0 国际<span class="tag">&lt;/<span class="name">a</span>&gt;</span> 转载请保留原文链接及作者。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>  </span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"> </span></span></span><br><span class="line"><span class="javascript"><span class="xml">   <span class="keyword">var</span> clipboard = <span class="keyword">new</span> Clipboard(<span class="string">&#x27;.fa-clipboard&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">   $(<span class="string">&quot;.fa-clipboard&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">     clipboard.on(<span class="string">&#x27;success&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">       swal(&#123;   </span></span></span><br><span class="line"><span class="javascript"><span class="xml">         <span class="attr">title</span>: <span class="string">&quot;&quot;</span>,   </span></span></span><br><span class="line"><span class="javascript"><span class="xml">         <span class="attr">text</span>: <span class="string">&#x27;复制成功&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">         <span class="attr">icon</span>: <span class="string">&quot;success&quot;</span>, </span></span></span><br><span class="line"><span class="javascript"><span class="xml">         <span class="attr">showConfirmButton</span>: <span class="literal">true</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">         &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"> 	 &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">   &#125;);  </span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>注意：<ul>
<li>文章作者<code>author</code>信息是在站点根目录的<code>_config.yml</code>中修改</li>
<li>文章链接需要在站点根目录的<code>_config.yml</code>中修改<code>url: https://luryzhu.github.io</code>为自己的博客域名</li>
</ul>
</li>
</ul>
<ol start="2">
<li><p>在主题目录 <code>source/css/_common/components/post/</code> 下，新增文件<code>my-post-copyright.styl</code> ，填入以下内容：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.my_post_copyright</span> &#123;</span><br><span class="line"> <span class="attribute">padding</span>: <span class="number">1em</span> <span class="number">1.5em</span>;</span><br><span class="line"> <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#d3d3d3</span>;</span><br><span class="line"> <span class="attribute">font-size</span>: <span class="number">0.93rem</span>;</span><br><span class="line"> <span class="attribute">line-height</span>: <span class="number">1.6em</span>;</span><br><span class="line"> <span class="attribute">word-break</span>: break-all;</span><br><span class="line"> <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.4</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-tag">p</span>&#123;<span class="attribute">margin</span>:<span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line"> <span class="attribute">display</span>: inline-block;</span><br><span class="line"> <span class="attribute">width</span>: <span class="number">5.2em</span>;</span><br><span class="line"> <span class="attribute">color</span>: <span class="number">#b5b5b5</span>;</span><br><span class="line"> <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-class">.raw</span> &#123;</span><br><span class="line"> <span class="attribute">margin-left</span>: <span class="number">1em</span>;</span><br><span class="line"> <span class="attribute">width</span>: <span class="number">5em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>: <span class="number">#808080</span>;</span><br><span class="line"> <span class="attribute">border-bottom</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>: <span class="number">#fc6423</span>;</span><br><span class="line"> <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.fa-clipboard</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-class">.post-url</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line"> <span class="attribute">font-weight</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-class">.copy-path</span> &#123;</span><br><span class="line"> <span class="attribute">margin-left</span>: <span class="number">1em</span>;</span><br><span class="line"> <span class="attribute">width</span>: <span class="number">1em</span>;</span><br><span class="line"> +mobile()&#123;<span class="attribute">display</span>:none;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my_post_copyright</span> <span class="selector-class">.copy-path</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>: <span class="number">#808080</span>;</span><br><span class="line"> <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改<code>layout/_macro/post.swig</code>，在代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;footer <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;post-footer&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
<p>这段代码第一次出现之前的地方，添加如下代码段：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">     &#123;% <span class="keyword">if</span> not is_index %&#125;</span><br><span class="line">       &#123;% include <span class="string">&#x27;my-copyright.swig&#x27;</span> %&#125;</span><br><span class="line">     &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>修改<code>source/css/_common/components/post/post.styl</code>文件，在最后一行增加代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">&quot;my-post-copyright&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在主题配置文件_config.yml中添加字段</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文章末尾添加“版权声明”标记</span></span><br><span class="line"><span class="attr">my_copyright:</span></span><br><span class="line"> <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="文章结束"><a href="#文章结束" class="headerlink" title="文章结束"></a>文章结束</h3><p>在文章末尾，版权信息之前加入文章结束标志，<a href="https://blog.csdn.net/u011236348/article/details/88169391">参考</a></p>
<ol>
<li>在目录 <code>themes/next/layout/_macro/</code> 下添加 <code>passage-end-tag.swig</code> ，内容如下：</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin:96px 0 48px 0;text-align:center;color: #ccc;font-size:14px;&quot;</span>&gt;</span></span><br><span class="line">            ------ 本文结束 &amp;#10084 感谢你的阅读 ------</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>打开 <code>themes/next/layout/_macro/post.swig</code> 文件，新增内容如下（跟配置版权信息的内容可以放在一起）：</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;### post end tag + copyright ###&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;%- if not is_index %&#125;</span><br><span class="line">        &#123;% include &#x27;passage-end-tag.swig&#x27; %&#125;</span><br><span class="line">        &#123;% include &#x27;my-copyright.swig&#x27; %&#125;</span><br><span class="line">    &#123;%- endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>打开主题配置文件 ，添加代码如下：</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 文章末尾添加“文章结束”标记</span><br><span class="line"><span class="attr">passage_end_tag</span>:</span><br><span class="line">  enabled: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="思维导图插件"><a href="#思维导图插件" class="headerlink" title="思维导图插件"></a>思维导图插件</h3><p><a href="https://github.com/MaxChang3/hexo-markmap">Github</a> | <a href="https://markmap.js.org/repl">markmap语法</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-markmap</span><br></pre></td></tr></table></figure>

<p><strong>语法</strong>：</p>
<div class="markmap-container" style="height:300px;" ><svg class="markmap-svg">{"t":"heading","d":1,"v":"markmap","c":[{"t":"heading","d":2,"v":"Link","c":[{"t":"list_item","d":3,"v":"inline code"}]}]}</svg></div>



<h1 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a>Markdown语法</h1><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><h3 id="图片引用"><a href="#图片引用" class="headerlink" title="图片引用"></a>图片引用</h3><p><code>![PicTitle](图片网络地址)</code><br>存在问题没有解决，NexT v7好像不支持图片标题</p>
<h3 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h3><p><a href="https://oss.console.aliyun.com/overview">阿里云OSS图床</a> 半年￥4.8，图个稳定<br>控制台-&gt;对象存储-&gt;bucket列表，在bucket里面上传就行了</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>单行  `语言 code`<br><code>code</code><br>多行  `&#96;&#96;语言 code`&#96;&#96;</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>网站搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器学习笔记1：浏览器线程和Event Loop</title>
    <url>/2022/04/09/browser/browser1_EventLoop/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本文主要针对浏览器渲染阶段发生的以下任务进行分析：</p>
<ul>
<li>JS引擎线程运行js代码</li>
<li>异步线程处理异步代码</li>
<li>Event Loop 轮询任务队列</li>
<li>任务队列中的宏任务和微任务</li>
</ul>
<span id="more"></span>

<p>参考文章</p>
<p><a href="https://www.jianshu.com/p/8821c6432fe1">彻底明白JS线程</a></p>
<h1 id="浏览器如何渲染"><a href="#浏览器如何渲染" class="headerlink" title="浏览器如何渲染"></a>浏览器如何渲染</h1><p>核心问题：从浏览器获取url到渲染完页面之间经历了什么</p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/noteImg/browser/webp.webp"></p>
<p>三个阶段：</p>
<ul>
<li>浏览器发送http请求</li>
<li>服务器接收请求并发送响应报文</li>
<li>浏览器接收响应报文并渲染</li>
</ul>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/noteImg/browser/image-20220327162721724-16483696469672.png" alt="image-20220327162721724"></p>
<p>解析HTML文档，生成DOM树</p>
<p>遇到 link href css，下载解析css，生成CSSOM</p>
<ul>
<li><p>link 新http线程</p>
</li>
<li><p>在构建 CSSOM 树时，会阻塞渲染，直至 CSSOM 树构建完成。并且构建 CSSOM 树是一个十分消耗性能的过程，所以应该尽量保证层级扁平，减少过度层叠，越是具体的 CSS 选择器，执行速度越慢</p>
</li>
</ul>
<p>遇到 script src，下载运行js</p>
<ul>
<li><p>defer&#x2F;async</p>
</li>
<li><p>当 HTML 解析到 script 标签时，会暂停构建 DOM，完成后才会从暂停的地方重新开始。也就是说，如果你想首屏渲染的越快，就越不应该在首屏就加载 JS 文件。并且 CSS 也会影响 JS 的执行，只有当解析完样式表才会执行 JS，所以也可以认为这种情况下，CSS 也会暂停构建 DOM</p>
</li>
</ul>
<h1 id="浏览器与js进程"><a href="#浏览器与js进程" class="headerlink" title="浏览器与js进程"></a>浏览器与js进程</h1><h2 id="线程和进程"><a href="#线程和进程" class="headerlink" title="线程和进程"></a>线程和进程</h2><p><a href="https://zhuanlan.zhihu.com/p/165950721">https://zhuanlan.zhihu.com/p/165950721</a></p>
<p>进程：可以理解为系统中正在运行的一个程序</p>
<ul>
<li>是正在执行的一个程序实例。在浏览器中打开一个网页就是开启了一个进程</li>
<li>是资源拥有的最小单位。进程拥有<strong>独立</strong>的地址空间，不能直接访问其他进程的资源</li>
<li>进程间相互访问资源需要进程间通讯：管道、文件、套接字…（websocket，localSotrage）</li>
</ul>
<p>线程：可以理解为轻量级的进程。</p>
<ul>
<li><p>线程依附于进程。进程将任务分成很多子任务，创建不同线程执行子任务</p>
</li>
<li><p>是调度和分配的最小单位。</p>
</li>
<li><p>同一进程的线程之间共享进程的地址空间等资源</p>
</li>
</ul>
<h2 id="浏览器的线程"><a href="#浏览器的线程" class="headerlink" title="浏览器的线程"></a>浏览器的线程</h2><ul>
<li><p>类别A：<strong>GUI 渲染线程</strong></p>
</li>
<li><p>类别B：<strong>JS 引擎线程</strong></p>
</li>
<li><p>类别C：EventLoop轮询处理线程</p>
</li>
<li><p>类别D：其他线程：</p>
<ul>
<li><p><strong>定时器触发线程 (setTimeout)</strong></p>
</li>
<li><p>http 异步线程(AJAX)</p>
</li>
<li><p>**浏览器事件线程 (onclick)**等等。</p>
</li>
</ul>
</li>
</ul>
<p>AB互斥，也就是GUI在渲染时会阻塞js引擎，因为如果在GUI渲染时js改变了DOM，就会导致渲染不同步</p>
<p>下面逐个介绍</p>
<h3 id="类别B-js引擎线程"><a href="#类别B-js引擎线程" class="headerlink" title="类别B js引擎线程"></a>类别B js引擎线程</h3><p><a href="https://segmentfault.com/a/1190000011198232">https://segmentfault.com/a/1190000011198232</a></p>
<p>js是<strong>单线程</strong>语言，但是宿主环境却是多线程的，目前有两种主流的宿主环境：</p>
<ul>
<li>浏览器（Chorme V8 <a href="!%5BV8%E6%89%A7%E8%A1%8C%E4%B8%80%E6%AE%B5JavaScript%E6%B5%81%E7%A8%8B%E5%9B%BE%5D(https://segmentfault.com/img/bVcHdQR)">参考</a>）</li>
<li>node</li>
</ul>
<p>javascript引擎线程称为<strong>主线程</strong>，是运行JS代码的线程（包括异步）</p>
<p>它是基于事件驱动<strong>单线程</strong>执行的（可以修改DOM，简单化处理了），必须符合ECMAScript规范。</p>
<ul>
<li><p>JS引擎一直等待着<strong>event loop</strong>中任务的到来，然后加以处理</p>
</li>
<li><p>只有当前<strong>函数执行栈</strong>（处理同步操作）执行完毕，才会去<strong>任务队列</strong>（处理异步操作）中取任务执行</p>
<ul>
<li>Event loop：一旦”执行栈”中的所有同步任务执行完毕，系统就会读取”任务队列”，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行</li>
</ul>
</li>
<li><p>浏览器无论什么时候都只有一个JS线程在运行JS程序。</p>
</li>
</ul>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/noteImg/browser/bVU9kG.png" alt="图片描述"></p>
<h4 id="函数执行栈"><a href="#函数执行栈" class="headerlink" title="函数执行栈"></a>函数执行栈</h4><p>所有同步任务都在主线程上执行，形成一个<a href="https://www.ruanyifeng.com/blog/2013/11/stack.html">执行栈</a></p>
<p>主线程会生成执行栈，处理函数进栈出栈</p>
<p>例子：运行下面代码的执行栈变化</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">    bar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">foo();</span><br></pre></td></tr></table></figure>

<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/noteImg/browser/bVU9kK.png" alt="图片描述"></p>
<h4 id="任务队列-Task-Queue"><a href="#任务队列-Task-Queue" class="headerlink" title="任务队列 Task Queue"></a>任务队列 Task Queue</h4><p>静态的队列存储结构，用于存储异步操作成功后的回调函数，注意是先判定异步操作成功再加入队列</p>
<p>有两种任务队列：</p>
<p><strong>宏任务</strong>是由宿主发起的，而<strong>微任务</strong>由JavaScript自身发起</p>
<ul>
<li>宏任务 macro task，ES6中叫task：优先级低，先定义的先执行<ul>
<li><strong>script</strong>（全局任务全部代码） </li>
<li>setTimeout, setInterval, setImmediate</li>
<li>I&#x2F;O, UI rendering，event listener，postMessage，MessageChannel（用于消息通讯）</li>
</ul>
</li>
<li>微任务 micro task，ES6中叫job：微任务，<strong>优先级高</strong>，并且可以插队，不是先定义先执行<ul>
<li>process.nextTick（Node独有）</li>
<li>Object.observer(已废弃), MutationObserver.</li>
<li><strong>Promise</strong>(有些实现的promise将then方法放到了宏任务中)，Promise本身是同步的，Promise.then是异步的</li>
</ul>
</li>
</ul>
<h3 id="类别D-异步操作相关线程"><a href="#类别D-异步操作相关线程" class="headerlink" title="类别D 异步操作相关线程"></a>类别D 异步操作相关线程</h3><p>遇到异步代码就放到相应的线程</p>
<ul>
<li><code>setTimeout(fun A)</code> 定时器触发线程<ul>
<li>定时器触发线程在接收到代码时就开始计时，时间到了将回调函数扔进队列</li>
</ul>
</li>
<li><code>ajax(fun B)</code> http异步线程<ul>
<li>http 异步线程立即发起http请求，请求成功后将回调函数扔进队列</li>
</ul>
</li>
<li><code>dom.onclick(fun C)</code> 浏览器事件线程<ul>
<li>浏览器事件线程会先监听dom，直到dom被点击了，才将回调函数扔进队列</li>
</ul>
</li>
</ul>
<p>1、执行主线程扔过来的异步代码，并执行代码</p>
<p>2、保存着回调函数（例中的ABC），异步代码执行成功后，通知 <strong>Event Loop轮询处理线程</strong> 过来取相应的回调函数</p>
<h3 id="类别C-Event-Loop轮询处理线程"><a href="#类别C-Event-Loop轮询处理线程" class="headerlink" title="类别C Event Loop轮询处理线程"></a>类别C Event Loop轮询处理线程</h3><p><a href="https://www.ruanyifeng.com/blog/2014/10/event-loop.html">https://www.ruanyifeng.com/blog/2014/10/event-loop.html</a></p>
<p>上面我们已经知道了，有3个东西</p>
<p>1、主线程，处理同步代码</p>
<ul>
<li>先处理执行栈，再从任务队列取</li>
</ul>
<p>2、类别D的线程，处理异步代码</p>
<ul>
<li>区分计时器、http、dom事件</li>
</ul>
<p>3、任务队列，存储着异步成功后的回调函数，一个静态存储结构</p>
<ul>
<li>队列分为微任务和宏任务，微任务优先级更高</li>
</ul>
<p>而发生的事情就是：</p>
<ol>
<li>主线程中检测到的异步任务交给异步线程</li>
<li>把异步线程处理完的回调函数放到任务队列</li>
<li>Event Loop：当函数执行栈为空时，取一个任务队列中的函数来执行</li>
</ol>
<p>有两种任务队列：微任务和宏任务</p>
<h4 id="微任务和宏任务"><a href="#微任务和宏任务" class="headerlink" title="微任务和宏任务"></a>微任务和宏任务</h4><p><strong>宏任务</strong>是由宿主（浏览器或Node）发起的，而<strong>微任务</strong>由JavaScript自身发起</p>
<ul>
<li>宏任务 macro task，ES6中叫task：执行慢，优先级低，先定义的先执行<ul>
<li><strong>script</strong>（全局任务全部代码） </li>
<li>setTimeout, setInterval, setImmediate</li>
<li>I&#x2F;O, UI rendering，event listener，postMessage，MessageChannel（用于消息通讯）</li>
</ul>
</li>
<li>微任务 micro task，ES6中叫job：执行快，微任务，<strong>优先级高</strong>，并且可以插队，不是先定义先执行<ul>
<li>process.nextTick（Node独有）</li>
<li>Object.observer(已废弃), MutationObserver.</li>
<li><strong>Promise</strong>(有些实现的promise将then方法放到了宏任务中)，Promise本身是同步的，Promise.then是异步的</li>
</ul>
</li>
</ul>
<h4 id="浏览器中的Event-Loop"><a href="#浏览器中的Event-Loop" class="headerlink" title="浏览器中的Event Loop"></a><strong>浏览器中的Event Loop</strong></h4><p>浏览器对宏任务和微任务的处理不同：</p>
<ol>
<li>JavaScript引擎首先从<strong>宏任务</strong>队列（macrotask queue）中取出第一个任务;</li>
<li>执行完毕后，再将<strong>微任务</strong>（microtask queue）中的所有任务取出，按照顺序分别全部执行（这里包括不仅指开始执行时队列里的微任务），如果在这一步过程中产生新的微任务，也需要执行；</li>
<li>然后再从<strong>宏任务</strong>队列中取下一个，执行完毕后，再次将 microtask queue 中的全部取出</li>
<li>循环往复，直到两个 queue中的任务都取完。</li>
</ol>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/noteImg/browser/bVU9kG.png" alt="&#39;图片描述&#39;"></p>
<h1 id="面经"><a href="#面经" class="headerlink" title="面经"></a>面经</h1><h2 id="为什么setTimeout不准时"><a href="#为什么setTimeout不准时" class="headerlink" title="为什么setTimeout不准时"></a>为什么setTimeout不准时</h2><p>因为需要将主线程里所有的代码运行，所有同步代码运行完后，才会取任务队列中的setTimeout的回调运行，很可能虽然setTimeout在3秒后被放入任务队列，但是其实这时候函数执行栈里还没有全执行完。</p>
<p>附，**<code>requestAnimationFrame</code>** 是准时的。</p>
<p>使用 <code>requestAnimationFrame</code> 实现的动画效果比 <code>setTimeout</code> 好的原因如下：</p>
<ul>
<li>使用 <code>requestAnimationFrame</code> 不需要设置具体的时间；<ul>
<li>它提供一个原生的API去执行动画的效果，它会在一帧（一般是 <code>16ms</code>）间隔内根据选择浏览器情况去执行相关动作。</li>
<li><code>setTimeout</code> 是在特定的时间间隔去执行任务，不到时间间隔不会去执行，这样浏览器就没有办法去自动优化</li>
</ul>
</li>
<li><code>requestAnimationFrame</code> 里面的回调函数是在页面刷新之前执行，它跟着屏幕的刷新频率走，保证每个刷新间隔只执行一次；</li>
<li>如果页面未激活的话，<code>requestAnimationFrame</code> 也会停止渲染，这样既可以保证页面的流畅性，又能节省主线程执行函数的开销。</li>
</ul>
<h2 id="看代码说输出"><a href="#看代码说输出" class="headerlink" title="看代码说输出"></a>看代码说输出</h2><p><strong>为什么promise.then比setTimeout先执行</strong>：</p>
<p>因为Promise.then的回调是微任务，setTimeout的回调是宏任务，微任务可以插队</p>
<p>一般这个问题出现在看代码说输出的题型</p>
<p>详见：<a href="https://luryzhu.github.io/2022/04/09/interview/interview1_async/">面经整理1：异步输出——Promise，SetTimeout与async</a></p>
<h1 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h1><p>Nodejs</p>
<ul>
<li><p>和浏览器的区别</p>
</li>
<li><p>Event Loop</p>
</li>
</ul>
<p><a href="https://blog.csdn.net/qq_39200185/article/details/121201716">https://blog.csdn.net/qq_39200185/article/details/121201716</a></p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>前端工程师进阶系列</category>
        <category>浏览器学习笔记</category>
      </categories>
      <tags>
        <tag>Event Loop</tag>
        <tag>微任务&amp;宏任务</tag>
      </tags>
  </entry>
  <entry>
    <title>廖雪峰js学习笔记：基础</title>
    <url>/2021/07/14/JavaScript/liao1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><h2 id="代码书写"><a href="#代码书写" class="headerlink" title="代码书写"></a>代码书写</h2><p>HTML+CSS+JavaScript三件套</p>
<p>在编辑器VS Code中直接键入<code>doc</code>可以快速创建html结构</p>
<p><strong>在html中嵌入CSS样式：</strong></p>
<p>在<code>&lt;head&gt;</code>中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;./chatroom.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>在html中嵌入js脚本：</strong></p>
<p>一般在<code>&lt;body&gt;</code>末尾</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;test1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p><strong>直接嵌入</strong></p>
<p>将JavaScript代码放在<code>&lt;head&gt;</code>的<code>&lt;script&gt;</code>中，将直接被浏览器执行</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    alert(<span class="string">&#x27;Hello, world&#x27;</span>);</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>引用外部文件</strong></p>
<p>把JavaScript代码放到一个单独的<code>.js</code>文件，然后在HTML中通过<code>&lt;script src=&quot;...&quot;&gt;&lt;/script&gt;</code>引入这个文件，这样，<code>/static/js/abc.js</code>就会被浏览器执行</p>
<ul>
<li><p>如果是DOM无关的，可以放在<code>head</code>里</p>
</li>
<li><p>如果要操作DOM，放在<code>body</code>的末尾</p>
</li>
<li><p>jQuery没有直接操作DOM，放哪都行</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/static/js/abc.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>把JavaScript代码放入一个单独的<code>.js</code>文件中更利于维护代码，并且多个页面可以各自引用同一份<code>.js</code>文件。<br>可以在同一个页面中引入多个.js文件，还可以在页面中多次编写<script> js代码... </script>，浏览器按照顺序依次执行。</p>
<h2 id="代码调试"><a href="#代码调试" class="headerlink" title="代码调试"></a>代码调试</h2><p>使用chrome浏览器，点击菜单“查看(View)”-“开发者(Developer)”-“开发者工具(Developer Tools)”，快捷键<code>F12</code><br>在<code>Elements</code>可以查看页面源代码，在<code>Console</code>可以输入js指令。</p>
<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><table>
<thead>
<tr>
<th>代码</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><code>;</code></td>
<td>结束语句</td>
</tr>
<tr>
<td><code>&#123;…&#125;</code></td>
<td>语句块</td>
</tr>
<tr>
<td><code>//</code></td>
<td>注释单行</td>
</tr>
<tr>
<td><code>/*...*/</code></td>
<td>注释多行语句</td>
</tr>
</tbody></table>
<p>JavaScript是大小写敏感的</p>
<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h2><p>JavaScript不区分整数和浮点数，统一用Number表示，以下都是合法的Number类型：</p>
<table>
<thead>
<tr>
<th>Number</th>
<th>类型</th>
</tr>
</thead>
<tbody><tr>
<td>123;</td>
<td>整数123</td>
</tr>
<tr>
<td>0.456;</td>
<td>浮点数0.456</td>
</tr>
<tr>
<td>1.2345e3;</td>
<td>科学计数法表示1.2345x1000，等同于1234.5</td>
</tr>
<tr>
<td>-99;</td>
<td>负数</td>
</tr>
<tr>
<td>NaN;</td>
<td>NaN表示Not a Number，当无法计算结果时用NaN表示</td>
</tr>
<tr>
<td>Infinity;</td>
<td>Infinity表示无限大，当数值超过Number所能表示的最大值时，就表示为Infinity</td>
</tr>
</tbody></table>
<p>Number可以直接做四则运算<code>+</code>,<code>-</code>,<code>*</code>,<code>/</code>,<code>%</code>(求余) </p>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串是以单引号<code>&#39;</code>或双引号<code>&quot;</code>括起来的任意文本<br>转义字符<code>\</code>，<code>\n</code>换行，<code>\t</code>制表符，<code>\\</code>表示\，<code>\x##</code>可以表示ASCII码<br>多行字符串<code>…</code><br>字符串连接+<br>模板字符串<code>…$&#123;varname&#125;…</code>用变量替换<code>$&#123;&#125;</code>的内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var name = &#x27;小明&#x27;; var age = 20;</span><br><span class="line">console.log(`你好, $&#123;name&#125;, 你今年$&#123;age&#125;岁了!`);</span><br></pre></td></tr></table></figure>
<p><strong>常用属性&#x2F;函数</strong></p>
<table>
<thead>
<tr>
<th>属性&#x2F;函数</th>
<th>解释</th>
<th>用例</th>
</tr>
</thead>
<tbody><tr>
<td>length</td>
<td>字符串长度属性</td>
<td><code>var s = &#39;Hello, world!&#39;  s.length; // 13</code></td>
</tr>
<tr>
<td>[]</td>
<td>字符串索引</td>
<td><code>s[12]; // &#39;!&#39;  s[13]; // undefined</code></td>
</tr>
<tr>
<td>toUpperCase()</td>
<td>全部变为大写</td>
<td><code>s.toUpperCase() // &quot;HELLO, WORLD!&quot;</code></td>
</tr>
<tr>
<td>toLowerCase()</td>
<td>全部变为小写</td>
<td><code>s.toLowerCase() // &quot;hello, world!&quot;</code></td>
</tr>
<tr>
<td>indexOf()</td>
<td>搜索指定字符串出现的位置</td>
<td><code>s.indexOf(“world”) //7</code></td>
</tr>
<tr>
<td>substring()</td>
<td>返回指定索引区间的子串</td>
<td><code>s.substring(0, 5); // 从0到5（不包括5），返回&#39;hello&#39;</code></td>
</tr>
</tbody></table>
<h2 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h2><p>有<code>true</code>、<code>false</code>两种值</p>
<p>布尔运算：<code>&amp;&amp;</code>与运算，<code>||</code>或运算，<code>!</code>非运算</p>
<p><strong>比较运算符</strong></p>
<p>当我们对Number做比较时，可以通过比较运算符得到一个布尔值，<code>&lt;,&gt;,&lt;=,&gt;=,==,===,!==</code><br>JavaScript允许对任意数据类型做比较，注意：</p>
<ol>
<li><p>&#x3D;&#x3D;和&#x3D;&#x3D;&#x3D;</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="literal">false</span> == <span class="number">0</span>; <span class="comment">// true</span></span><br><span class="line"><span class="literal">false</span> === <span class="number">0</span>; <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>==</code>，它会自动转换数据类型再比较，很多时候，会得到非常诡异的结果；</li>
<li><code>===</code>，它不会自动转换数据类型，如果数据类型不一致，返回false，如果一致，再比较。</li>
<li>由于JavaScript这个设计缺陷，不要使用<code>==</code>比较，<strong>始终坚持使用<code>===</code>比较</strong>。</li>
</ul>
</li>
<li><p><code>NaN</code>与所有其他值都不相等，包括它自己：<br>唯一能判断<code>NaN</code>的方法是通过<code>isNaN()</code>函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">isNaN</span>(<span class="literal">NaN</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>浮点数的相等比较<br>要比较两个浮点数是否相等，只能计算它们之差的绝对值，看是否小于某个阈值<code>Math.abs&lt;阈值</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Math.abs(1 / 3 - (1 - 2 / 3)) &lt; 0.0000001; // true</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="null和undefined"><a href="#null和undefined" class="headerlink" title="null和undefined"></a>null和undefined</h2><ul>
<li><code>null</code>表示一个“空”的值，辨析：<ul>
<li><code>0</code>是一个数值，</li>
<li><code>&#39;&#39;</code>表示长度为0的字符串</li>
</ul>
</li>
<li><code>undefined</code>表示值未定义。</li>
</ul>
<p>区分两者的意义不大。大多数情况下，我们都应该用<code>null</code>。<code>undefined</code>仅仅在判断函数参数是否传递的情况下有用。</p>
<p>另，在变量前加<code>!!</code>判断可以将<code>null</code>和<code>undefined</code>都变成布尔值<code>false</code></p>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p><a href="https://www.runoob.com/jsref/jsref-obj-array.html">https://www.runoob.com/jsref/jsref-obj-array.html</a><br>数组是一组按顺序排列的集合，集合的每个值称为元素。JavaScript的数组可以包括任意数据类型。</p>
<ol>
<li><p>数组的创建<br>法一：数组用[]表示，元素之间用,分隔。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[1, 2, 3.14, &#x27;Hello&#x27;, null, true];</span><br></pre></td></tr></table></figure>

<p>法二：通过Array()函数实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Array(1, 2, 3); // 创建了数组[1, 2, 3]</span><br></pre></td></tr></table></figure>

<p>然而，出于代码的可读性考虑，强烈建议直接使用[]。</p>
</li>
<li><p>数组元素的访问<br>数组的元素可以通过索引来访问。索引的起始值为0：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var arr = [1, 2, 3.14, &#x27;Hello&#x27;, null, true];</span><br><span class="line">arr[0]; // 返回索引为0的元素，即1</span><br><span class="line">arr[5]; // 返回索引为5的元素，即true</span><br><span class="line">arr[6]; // 索引超出了范围，返回undefined</span><br></pre></td></tr></table></figure>


</li>
<li><p>常用属性&#x2F;方法</p>
<table>
<thead>
<tr>
<th>length</th>
<th>数组长度</th>
<th>arr.length</th>
</tr>
</thead>
<tbody><tr>
<td><code>[]</code></td>
<td>数组索引</td>
<td><code>arr[0]</code></td>
</tr>
<tr>
<td><code>indexOf()</code></td>
<td>搜索指定元素位置</td>
<td><code>arr.indexOf(10)</code></td>
</tr>
<tr>
<td><code>slice()</code></td>
<td>截取数组的部分元素</td>
<td><code>arr.slice(0,3) //从索引0开始到3，不包括3 </code> <br> <code>arr.slice()   //复制arr</code></td>
</tr>
<tr>
<td><code>push()</code></td>
<td>向数组末尾添加若干元素  返回数组长度</td>
<td><code>arr.push(1,2)</code></td>
</tr>
<tr>
<td><code>pop()</code></td>
<td>删除数组的最后一个元素  返回删除的元素</td>
<td><code>arr.pop()</code></td>
</tr>
<tr>
<td><code>unshift()</code></td>
<td>向数组头部添加若干元素  返回数组长度</td>
<td><code>arr.unshift(‘a’,’b’)</code></td>
</tr>
<tr>
<td><code>shift()</code></td>
<td>删除数组的第一个元素  返回删除的元素</td>
<td><code>arr.shift()</code></td>
</tr>
<tr>
<td><code>sort()</code></td>
<td>对数组排序，默认顺序</td>
<td><code>arr.sort()</code></td>
</tr>
<tr>
<td><code>reverse()</code></td>
<td>反转数组</td>
<td><code>arr.reverse()</code></td>
</tr>
<tr>
<td><code>splice()</code></td>
<td>从指定索引开始删除，添加元素  返回删除的元素</td>
<td><code>var arr=[1,2,3,4,5];  arr.splice(2, 3, &#39;a&#39;, &#39;b&#39;); // 返回[3,4,5]</code><br><code> arr;         // [1,2,’a’,’b’]</code></td>
</tr>
<tr>
<td><code>concat()</code></td>
<td>连接两个数组，返回新的数组</td>
<td><code>arr.concat(1.2.[3,4]); //在arr后面连接1,2,3,4</code></td>
</tr>
<tr>
<td><code>join()</code></td>
<td>把数组元素用指定字符连起来  返回字符串</td>
<td><code>arr.join(‘-‘)</code></td>
</tr>
</tbody></table>
</li>
<li><p>多维数组<br>如果数组的某个元素又是一个Array，则可以形成多维数组<br>练习：1）如何通过索引取到500这个值    2）打印数组元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> arr = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">400</span>, <span class="number">500</span>, <span class="number">600</span>], <span class="string">&#x27;-&#x27;</span>];</span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;小红&#x27;</span>, <span class="string">&#x27;大军&#x27;</span>, <span class="string">&#x27;阿黄&#x27;</span>];</span><br><span class="line">arr.sort();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`欢迎<span class="subst">$&#123;arr[<span class="number">0</span>]&#125;</span>,<span class="subst">$&#123;arr[<span class="number">1</span>]&#125;</span>,<span class="subst">$&#123;arr[<span class="number">2</span>]&#125;</span>和<span class="subst">$&#123;arr[<span class="number">3</span>]&#125;</span>同学`</span>);</span><br><span class="line"><span class="comment">//console.log(`欢迎$&#123;arr.sort().slice(0,-1)&#125;和$&#123;arr.sort().slice(-1)&#125;同学!`);</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>JavaScript的对象是一组由键-值组成的无序集合，例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Bob&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">tags</span>: [<span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;web&#x27;</span>, <span class="string">&#x27;mobile&#x27;</span>],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>对象的键都是字符串类型，值可以是任意数据类型。<br>其中每个键又称为对象的属性，要获取一个对象的属性，用<code>对象变量.属性名</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">person.name; <span class="comment">// &#x27;Bob&#x27;</span></span><br></pre></td></tr></table></figure>

<p>判断一个对象是否包含某个属性</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>解释</th>
<th>用例</th>
</tr>
</thead>
<tbody><tr>
<td><code>in </code></td>
<td>返回true&#x2F;false，对于变量继承的属性也会判为真</td>
<td><code>‘name’ in person;  // true</code> <br>  <code>‘toString’ in person; // true</code></td>
</tr>
<tr>
<td><code>hasOwnProperty()</code></td>
<td>判断属性是否是变量自身拥有的而不是继承的</td>
<td><code>person.hasOwnProperty(‘name’); //true</code> <br> <code>person. hasOwnProperty(‘toString’); //false</code></td>
</tr>
</tbody></table>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量名规范：大小写英文、数字、$和_的组合，且不能用数字开头，不能是JavaScript的关键字，一般是<strong>驼峰式</strong>命名</p>
<ul>
<li>申明变量用<code>var</code>语句，只能申明一次<ul>
<li><code>let</code>和<code>const</code>都是块级声明，不同点在于<code>const</code>声明后值无法修改</li>
<li>详见<a href="https://www.cnblogs.com/forcheng/p/13033976.html">var, let, const异同</a></li>
</ul>
</li>
<li>变量赋值用<code>=</code>，JavaScript是动态语言，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，可以是不同类型的变量</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a; <span class="comment">// 申明了变量a，此时a的值为undefined</span></span><br><span class="line"><span class="keyword">var</span> $b = <span class="number">1</span>; <span class="comment">// 申明了变量$b，同时给$b赋值，此时$b的值为1</span></span><br><span class="line"><span class="keyword">var</span> s_007 = <span class="string">&#x27;007&#x27;</span>; <span class="comment">// s_007是一个字符串</span></span><br><span class="line"><span class="keyword">var</span> Answer = <span class="literal">true</span>; <span class="comment">// Answer是一个布尔值true</span></span><br><span class="line"><span class="keyword">var</span> t = <span class="literal">null</span>; <span class="comment">// t的值是null</span></span><br></pre></td></tr></table></figure>

<p>要显示变量的内容，可以用<code>console.log(x)</code></p>
<p><strong>strict模式</strong></p>
<p>JavaScript中，如果一个变量没有通过<code>var</code>申明就被使用，那么该变量就自动被申明为全局变量：</p>
<p>strict模式下，强制通过<code>var</code>申明变量，未使用<code>var</code>申明变量就使用的，将导致运行错误。<br>启用strict模式的方法是在JavaScript代码的第一行写上：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>这是一个字符串，不支持strict模式的浏览器将报错</p>
<h1 id="条件和循环"><a href="#条件和循环" class="headerlink" title="条件和循环"></a>条件和循环</h1><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> () &#123;</span><br><span class="line">	…</span><br><span class="line">&#125; elseif () &#123;</span><br><span class="line">	…</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	…</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="For"><a href="#For" class="headerlink" title="For"></a>For</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=<span class="number">100</span>; i++) &#123;</span><br><span class="line">	…</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="For-in"><a href="#For-in" class="headerlink" title="For in"></a>For in</h3><p>遍历<strong>对象、数组、字符串</strong>的<code>key</code></p>
<p>遍历对象，可以用<code>hasOwnProperty()</code>过滤继承的属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">city</span>: <span class="string">&#x27;Beijing&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> o) &#123;</span><br><span class="line">    <span class="keyword">if</span> (o.hasOwnProperty(key)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(key); <span class="comment">// &#x27;name&#x27;, &#x27;age&#x27;, &#x27;city&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>遍历数组，索引就是<code>key</code>，可以通过索引循环访问</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> a) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i); <span class="comment">// &#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;</span></span><br><span class="line">    <span class="built_in">console</span>.log(a[i]); <span class="comment">// &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="for-of"><a href="#for-of" class="headerlink" title="for of"></a>for of</h3><p>遍历<strong>对象、数组、字符串</strong>的<code>value</code>，比较快捷</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line">myArray.name = <span class="string">&quot;数组&quot;</span>;</span><br><span class="line">myArray.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="built_in">this</span>.name; &#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> value <span class="keyword">of</span> myArray) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="While"><a href="#While" class="headerlink" title="While"></a>While</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">while () &#123;…&#125;</span><br><span class="line">do &#123;…&#125; while ()</span><br></pre></td></tr></table></figure>

<h1 id="Iterable：Map-amp-Set"><a href="#Iterable：Map-amp-Set" class="headerlink" title="Iterable：Map &amp; Set"></a>Iterable：Map &amp; Set</h1><p>JavaScript的对象有个小问题，就是键必须是字符串。但实际上Number或者其他数据类型作为键也是非常合理的。</p>
<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>Map是一组key-value键值对结构，具有极快的查找速度。对一个key多次赋不同的value会覆盖之前的值</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>解释</th>
<th>用例</th>
</tr>
</thead>
<tbody><tr>
<td><code>new Map()</code></td>
<td>创建Map</td>
<td><code>var m = new Map(); // 空Map</code></td>
</tr>
<tr>
<td><code>set(key,value)</code></td>
<td>添加键值对</td>
<td><code>m.set(&#39;Adam&#39;, 67); // 添加新的key-value</code></td>
</tr>
<tr>
<td><code>has(key) </code></td>
<td>检验key是否存在</td>
<td><code>m.has(&#39;Adam&#39;); // 是否存在key &#39;Adam&#39;: true</code></td>
</tr>
<tr>
<td><code>get(key) </code></td>
<td>访问key对应的值</td>
<td><code>m.get(&#39;Adam&#39;); // 67</code></td>
</tr>
<tr>
<td><code>delete(key) </code></td>
<td>删除元素</td>
<td><code>m.delete(&#39;Adam&#39;); // 删除key &#39;Adam&#39;</code></td>
</tr>
</tbody></table>
<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>Set和Map类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在Set中，没有重复的key，重复的元素会自动被过滤。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>解释</th>
<th>用例</th>
</tr>
</thead>
<tbody><tr>
<td><code>new Set()</code></td>
<td>创建Set</td>
<td><code>var s1 = new Set(); // 空Set</code> <br><code>var s2 = new Set([1, 2, 3]); // 含1, 2, 3</code></td>
</tr>
<tr>
<td><code>add(key)</code></td>
<td>添加元素，可以重复添加，但不会有效果</td>
<td><code>s.add(4);</code></td>
</tr>
<tr>
<td><code>delete(key)</code></td>
<td>删除元素</td>
<td><code>s.delete(3);</code></td>
</tr>
</tbody></table>
<h2 id="Iterable"><a href="#Iterable" class="headerlink" title="Iterable"></a>Iterable</h2><p>ES6标准引入了新的iterable类型，Array、Map和Set都属于iterable类型。</p>
<p>在<code>for … in</code>循环中，它遍历的是对象的属性，所以如果给Array对象手动增加属性，会导致属性也被遍历。</p>
<p>通过新的<code>for ... of</code>循环来遍历，可以解决这个问题</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>]);</span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="number">1</span>, <span class="string">&#x27;x&#x27;</span>], [<span class="number">2</span>, <span class="string">&#x27;y&#x27;</span>], [<span class="number">3</span>, <span class="string">&#x27;z&#x27;</span>]]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">of</span> a) &#123; <span class="comment">// 遍历Array</span></span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">of</span> s) &#123; <span class="comment">// 遍历Set</span></span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">of</span> m) &#123; <span class="comment">// 遍历Map</span></span><br><span class="line">  <span class="built_in">console</span>.log(x[<span class="number">0</span>] + <span class="string">&#x27;=&#x27;</span> + x[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此外，iterable还内置了<code>forEach()</code>方法</p>
<p><strong>Array</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>];</span><br><span class="line">a.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// element: 指向当前元素的值</span></span><br><span class="line">  <span class="comment">// index: 指向当前索引</span></span><br><span class="line">  <span class="comment">// array: 指向Array对象本身</span></span><br><span class="line">  <span class="built_in">console</span>.log(element + <span class="string">&#x27;, index = &#x27;</span> + index);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>Set</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>]);</span><br><span class="line">s.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">element, sameElement, set</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(element);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>Map</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="number">1</span>, <span class="string">&#x27;x&#x27;</span>], [<span class="number">2</span>, <span class="string">&#x27;y&#x27;</span>], [<span class="number">3</span>, <span class="string">&#x27;z&#x27;</span>]]);</span><br><span class="line">m.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value, key, map</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数基础"><a href="#函数基础" class="headerlink" title="函数基础"></a>函数基础</h2><p><strong>函数定义</strong></p>
<p><code>function 函数名(参数) &#123;函数体&#125;</code></p>
<p><code>return</code>语句返回结果，没有<code>return</code>返回<code>undefined</code></p>
<p><code>var 函数名=function(参数) &#123;函数体&#125;;</code></p>
<p>注意第二种定义最后要加分号<code>;</code></p>
<p><strong>函数调用</strong></p>
<p>函数名(输入参数)，按顺序输入参数，参数比定义的多或少都不会报错，但会因为参数为undefined不能完成功能，可以在函数中进行参数检查</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abs</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> x !== <span class="string">&#x27;number&#x27;</span>) &#123;<span class="keyword">throw</span> <span class="string">&#x27;Not a number&#x27;</span>;&#125;</span><br><span class="line">    …</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>arguments</strong></p>
<p>只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数，即使函数没有定义形参也能获取实参，常用于判断传入参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;x = &#x27;</span> + <span class="built_in">arguments</span>[<span class="number">0</span>]); <span class="comment">// 10</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">​    <span class="built_in">console</span>.log(<span class="string">&#x27;arg &#x27;</span> + i + <span class="string">&#x27; = &#x27;</span> + <span class="built_in">arguments</span>[i]); <span class="comment">// 10, 20, 30</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">foo(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br></pre></td></tr></table></figure>

<p><strong>rest参数</strong></p>
<p>指向除了函数内已定义参数的其他输入参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">...rest</span>) </span>&#123;</span><br><span class="line">  s=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;rest.length;i++)&#123;</span><br><span class="line">​    <span class="keyword">if</span> (<span class="keyword">typeof</span> rest[i]===<span class="string">&#x27;number&#x27;</span>)&#123;</span><br><span class="line">​      s+=rest[i];</span><br><span class="line">​    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i, args = [];</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=<span class="number">100</span>; i++) &#123;</span><br><span class="line">  args.push(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sum() !== <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;测试失败: sum() = &#x27;</span> + sum());</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum(<span class="number">1</span>) !== <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;测试失败: sum(1) = &#x27;</span> + sum(<span class="number">1</span>));</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum(<span class="number">2</span>, <span class="number">3</span>) !== <span class="number">5</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;测试失败: sum(2, 3) = &#x27;</span> + sum(<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum.**apply**(<span class="literal">null</span>, args) !== <span class="number">5050</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;测试失败: sum(1, 2, 3, ..., 100) = &#x27;</span> + sum.apply(<span class="literal">null</span>, args));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;测试通过!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br></pre></td></tr></table></figure>

<p>由于JavaScript引擎会自动在句末添加分号，可能会导致语句无法执行，正确的写法是把<code>return &#123;</code>写在一行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="comment">// 这里不会自动加分号，因为&#123;表示语句尚未结束</span></span><br><span class="line">​    name: <span class="string">&#x27;foo&#x27;</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="变量作用域与结构赋值"><a href="#变量作用域与结构赋值" class="headerlink" title="变量作用域与结构赋值"></a>变量作用域与结构赋值</h2><p><strong>作用域</strong></p>
<p>函数内部声明的变量作用域为整个函数</p>
<p>嵌套的函数内部可以访问外部函数的变量</p>
<p>JavaScript编译时会先扫描函数体把所有声明的变量提升到函数顶部，所以通常首先声明所有变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  **<span class="keyword">var</span>**</span><br><span class="line">​    x = <span class="number">1</span>, <span class="comment">// x初始化为1</span></span><br><span class="line">​    y = x + <span class="number">1</span>, <span class="comment">// y初始化为2</span></span><br><span class="line">​    z, i; <span class="comment">// z和i为undefined</span></span><br><span class="line">  <span class="comment">// 其他语句:</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不在函数内部声明的变量就是<strong>全局变量</strong>，默认绑定到全局对象<code>window</code></p>
<p><strong>名字空间</strong></p>
<p>全局变量会绑定到<code>window</code>上，不同的js文件如果使用了相同的全局变量，或者定义了相同名字的顶层函数，都会造成命名冲突</p>
<p>减少冲突的一个方法是把自己的所有变量和函数全部绑定到一个全局变量中。例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 唯一的全局变量MYAPP:</span></span><br><span class="line"><span class="keyword">var</span> MYAPP = &#123;&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 其他变量:</span></span><br><span class="line">MYAPP.name = <span class="string">&#x27;myapp&#x27;</span>;</span><br><span class="line">MYAPP.version = <span class="number">1.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他函数:</span></span><br><span class="line">MYAPP.foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>局部作用域</strong></p>
<p>用关键字let替代var声明变量，可以使for循环等语句中定义的变量具有块级（函数）作用域</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (**<span class="keyword">let</span>** i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;...&#125;</span><br></pre></td></tr></table></figure>

<p><strong>常量</strong></p>
<p><code>const</code>定义常量，具有块级作用域</p>
<p><strong>解构赋值</strong></p>
<p>直接对多个变量同时赋值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> [x, y, z] = [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;JavaScript&#x27;</span>, <span class="string">&#x27;ES6&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> [x, [y, z]] = [<span class="string">&#x27;hello&#x27;</span>, [<span class="string">&#x27;JavaScript&#x27;</span>, <span class="string">&#x27;ES6&#x27;</span>]];</span><br><span class="line"><span class="keyword">let</span> [, , z] = [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;JavaScript&#x27;</span>, <span class="string">&#x27;ES6&#x27;</span>];</span><br></pre></td></tr></table></figure>

<p>从一个对象中取出若干属性，对象中嵌套的属性也可以</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">  <span class="attr">passport</span>: <span class="string">&#x27;G-12345678&#x27;</span>,</span><br><span class="line"><span class="attr">school</span>: <span class="string">&#x27;No.4 middle school&#x27;</span></span><br><span class="line"><span class="attr">address</span>: &#123;</span><br><span class="line">​    city: <span class="string">&#x27;Beijing&#x27;</span>,</span><br><span class="line">​    street: <span class="string">&#x27;No.1 Road&#x27;</span>,</span><br><span class="line">​    zipcode: <span class="string">&#x27;100001&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123;name, age, passport&#125; = person;</span><br><span class="line"><span class="keyword">var</span> &#123;gender, <span class="attr">address</span>: &#123;city, zip&#125;&#125; = person;</span><br><span class="line"><span class="string">``</span><span class="string">`    </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">如果要使用的变量名和属性名不一致，可以用下面的语法获取</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js </span><br><span class="line"><span class="keyword">let</span> &#123;name, <span class="attr">passport</span>:id&#125; = person;</span><br><span class="line">name; <span class="comment">// &#x27;小明&#x27;</span></span><br><span class="line">id; <span class="comment">// &#x27;G-12345678&#x27;，passport不是变量</span></span><br></pre></td></tr></table></figure>

<p>解构赋值还可以使用默认值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> &#123;name, single=<span class="literal">true</span>&#125; = person;</span><br></pre></td></tr></table></figure>

<p>如果变量已经被声明了，使用{}批量赋值会报错，可以用小括号括起来</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(&#123;x, y&#125; = &#123; <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>, <span class="attr">x</span>: <span class="number">100</span>, <span class="attr">y</span>: <span class="number">200</span>&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>实例</strong></p>
<p>交换两个变量的值：<code>[x,y]=[y,x]</code></p>
<p>快速获取当前页面的域名和路径：<code>var &#123;hostname:domain, pathname:path&#125; = location;</code></p>
<p>如果函数把对象作为参数，可以直接把对象属性绑定到变量上，如输入<code>Date</code>对象</p>
<p><code>function buildDate(&#123;year, month, day, hour=0, minute=0, second=0&#125;)&#123;...&#125;</code></p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>绑定到对象上的函数称为方法，在一个方法内部，<code>this</code>是一个特殊变量，它始终指向当前对象</p>
<p>用<code>var that = this</code>;，</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">    <span class="attr">birth</span>: <span class="number">1990</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> that = <span class="built_in">this</span>; <span class="comment">// 在方法内部一开始就捕获this</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">getAgeFromBirth</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> y = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">            <span class="keyword">return</span> y - that.birth; <span class="comment">// 用that而不是this</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> getAgeFromBirth();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">xiaoming.age(); <span class="comment">// 25</span></span><br></pre></td></tr></table></figure>

<p><strong>apply</strong></p>
<p>要指定函数的<code>this</code>指向哪个对象，可以用函数本身的<code>apply</code>方法，它接收两个参数，第一个参数就是需要绑定的<code>this</code>变量，第二个参数是<code>Array</code>，表示函数本身的参数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> y = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">    <span class="keyword">return</span> y - <span class="built_in">this</span>.birth;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">    <span class="attr">birth</span>: <span class="number">1990</span>,</span><br><span class="line">    <span class="attr">age</span>: getAge</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">xiaoming.age(); <span class="comment">// 25</span></span><br><span class="line">getAge.apply(xiaoming, []); <span class="comment">// 25, this指向xiaoming, 参数为空</span></span><br></pre></td></tr></table></figure>

<p><strong>call</strong></p>
<p>与<code>apply()</code>类似，区别是：</p>
<p><code>apply()</code>把参数打包成Array再传入；</p>
<p><code>call()</code>把参数按顺序传入。</p>
<p>比如调用<code>Math.max(3, 5, 4)</code>，分别用<code>apply()</code>和<code>call()</code>实现如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, [<span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>]); <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">Math</span>.max.call(<span class="literal">null</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>
<p>对普通函数调用，我们通常把<code>this</code>绑定为<code>null</code>。</p>
<p><strong>修饰器</strong></p>
<p>利用<code>apply()</code>，我们还可以动态改变函数的行为。JavaScript的所有对象都是动态的，即使内置的函数，我们也可以重新指向新的函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> oldParseInt = <span class="built_in">parseInt</span>; <span class="comment">// 保存原函数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.parseInt = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  count += <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> oldParseInt.apply(<span class="literal">null</span>, <span class="built_in">arguments</span>); <span class="comment">// 调用原函数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>JavaScript笔记</category>
      </categories>
      <tags>
        <tag>front end</tag>
        <tag>JavaScript</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>红宝书学习：第十七章 事件</title>
    <url>/2022/02/28/JavaScript/prof_ch17/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本章内容：</p>
<ul>
<li>事件流：冒泡，捕获，DOM事件流</li>
<li>事件处理程序：HTML(内联)，DOM0，DOM2，IE，兼容</li>
<li>跨浏览器：添加和移除事件处理程序，获取事件对象，取消默认行为，取消冒泡</li>
<li>自定义事件：Event，customEvent</li>
</ul>
<span id="more"></span>

<h1 id="17-1-事件流"><a href="#17-1-事件流" class="headerlink" title="17.1 事件流"></a>17.1 事件流</h1><p>HTML 中与 javascript 交互是通过事件驱动来实现的。事件流描述的是<strong>页面接收事件的顺序</strong></p>
<p>第四代Web浏览器：IE事件流和Netscape事件流完全相反</p>
<ul>
<li><p>IE：事件冒泡流</p>
</li>
<li><p>Netscape：事件捕获流</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Event Bubbling Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;myDiv&quot;</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h2><p>从<strong>具体</strong>元素开始触发，<strong>从目标元素逐级向上传播</strong></p>
<p>click事件的发生顺序：<code>&lt;div&gt; -&gt; &lt;body&gt; -&gt; &lt;html&gt; -&gt; document</code></p>
<p>所有现代浏览器都支持，但是实现方式有区别</p>
<ul>
<li>IE5.5即以前会跳过<code>&lt;html&gt;</code>，直接<code>&lt;body&gt; -&gt; document</code></li>
<li>现代浏览器会一直冒泡到<code>window</code>对象</li>
</ul>
<h2 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h2><p>最<strong>不具体</strong>的元素最先收到事件，目的是想在目标元素接收到事件之前<strong>拦截</strong>事件</p>
<p><strong>从document逐级向下传播到目标元素</strong></p>
<p>click事件的发生顺序：<code>document -&gt; &lt;html&gt; -&gt; &lt;body&gt; -&gt; &lt;div&gt;  </code></p>
<p>旧版本浏览器不支持，现实基本不用</p>
<h2 id="DOM事件流"><a href="#DOM事件流" class="headerlink" title="DOM事件流"></a>DOM事件流</h2><p>DOM2 Events规范规定，事件流分三个阶段：事件捕获、到达目标、事件冒泡</p>
<ul>
<li>事件捕获：用来提前拦截事件</li>
<li>到达目标：目标元素接收事件</li>
<li>事件冒泡：最迟在这一阶段响应事件</li>
</ul>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/noteImg/JavaScript/ch17/1.png"></p>
<p>所有现代浏览器都支持，只有IE8及以前不支持</p>
<h1 id="17-2-事件处理程序"><a href="#17-2-事件处理程序" class="headerlink" title="17.2 事件处理程序"></a>17.2 事件处理程序</h1><p>事件处理程序的名字以”on”开头， 例如click事件的处理程序叫作onclick</p>
<h2 id="HTML事件处理程序"><a href="#HTML事件处理程序" class="headerlink" title="HTML事件处理程序"></a>HTML事件处理程序</h2><p>HTML中的书写方式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">showMessage</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    	<span class="built_in">console</span>.log(<span class="string">&quot;this.value&quot;</span>); </span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Click Me&quot;</span> </span></span><br><span class="line"><span class="tag">       <span class="attr">onclick</span>=<span class="string">&quot;showMessage(this.value)&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>HTML元素中的this指针指向事件的目标元素</p>
<p>注意，showMessage函数中的this指向全局变量</p>
<h2 id="DOM0事件处理程序"><a href="#DOM0事件处理程序" class="headerlink" title="DOM0事件处理程序"></a>DOM0事件处理程序</h2><p>把一个函数赋值给 （DOM元素的）一个事件处理程序属性</p>
<p>脚本中的书写方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;myBtn&quot;</span>);</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;this.id&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">btn.onclick = <span class="literal">null</span>; <span class="comment">// 移除事件处理程序</span></span><br></pre></td></tr></table></figure>

<p>函数中的this指针指向事件的目标元素</p>
<h2 id="DOM2事件处理程序"><a href="#DOM2事件处理程序" class="headerlink" title="DOM2事件处理程序"></a>DOM2事件处理程序</h2><p>使用addEventListener()和removeEventListener()。</p>
<p>这两个方法暴露在 所有DOM节点上，它们接收3个参数：</p>
<ul>
<li>事件名，注意是事件名！<strong>没有on</strong>！！！</li>
<li>事件处理函数，如果函数在其他地方定义，传函数名<strong>不要括号</strong>！！！！</li>
<li>一个布尔值，<ul>
<li>true表示在<strong>捕获阶段</strong>调用事件处理程序，</li>
<li>false（默认值）表示 在<strong>冒泡阶段</strong>调用事件处理程序。</li>
</ul>
</li>
</ul>
<p>可以为一个事件添加多个事件处理函数，会按添加<strong>顺序</strong>执行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.id)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> btn=<span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>)</span><br><span class="line">btnDOM2.addEventListener(<span class="string">&quot;click&quot;</span>,show)</span><br><span class="line">btnDOM2.removeEventListener(<span class="string">&quot;click&quot;</span>,show)</span><br></pre></td></tr></table></figure>

<p>如果addEventListener()添加的是<strong>匿名函数</strong>，那么removeEventListener()无法删除</p>
<p>事件处理程序一般<strong>添加到冒泡阶段</strong>，因为这样跨浏览器兼容好，捕获阶段一般用来拦截事件，没有拦截需求就不要置true！</p>
<h2 id="IE事件处理程序"><a href="#IE事件处理程序" class="headerlink" title="IE事件处理程序"></a>IE事件处理程序</h2><p>attachEvent()和detachEvent()，只在IE浏览器生效，IE11也不支持</p>
<p>接收两个同样的参数：事件处理程序的名字（<strong>有on</strong>）和事件处理函数，<strong>只会添加到冒泡阶段</strong>，因为IE8及以前只支持冒泡</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showThis</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="built_in">this</span> === <span class="built_in">window</span>); <span class="comment">// true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;myBtn&quot;</span>);</span><br><span class="line">btn.attachEvent(<span class="string">&quot;onclick&quot;</span>, showThis);</span><br><span class="line">btn.detachEvent(<span class="string">&quot;onclick&quot;</span>, showThis)</span><br></pre></td></tr></table></figure>

<p>使用attachEvent()时，事件处理程序在全局作用域中运行，this指向window</p>
<p>跟DOM2一样也可以添加很多事件处理程序，但是触发<strong>顺序相反</strong>，是添加顺序的逆序</p>
<p>跟DOM2一样也不能删除匿名函数</p>
<h2 id="跨浏览器事件处理程序"><a href="#跨浏览器事件处理程序" class="headerlink" title="跨浏览器事件处理程序"></a>跨浏览器事件处理程序</h2><p>p777</p>
<p>检测浏览器对事件处理程序的支持，并分类实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> EventUtil = &#123;</span><br><span class="line">    <span class="comment">// 添加事件处理程序</span></span><br><span class="line">    <span class="attr">addHandler</span>: <span class="function"><span class="keyword">function</span>(<span class="params">element, type, handler</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (element.addEventListener) &#123; <span class="comment">// DOM2</span></span><br><span class="line">        	element.addEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.attachEvent) &#123; <span class="comment">// IE</span></span><br><span class="line">        	element.attachEvent(<span class="string">&quot;on&quot;</span> + type, handler);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// DOM0</span></span><br><span class="line">        	element[<span class="string">&quot;on&quot;</span> + type] = handler;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 移除事件处理程序</span></span><br><span class="line">    <span class="attr">removeHandler</span>: <span class="function"><span class="keyword">function</span>(<span class="params">element, type, handler</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (element.removeEventListener) &#123; <span class="comment">// DOM2</span></span><br><span class="line">        	element.removeEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.detachEvent) &#123; <span class="comment">// IE</span></span><br><span class="line">        	element.detachEvent(<span class="string">&quot;on&quot;</span> + type, handler);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// DOM0</span></span><br><span class="line">        	element[<span class="string">&quot;on&quot;</span> + type] = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="17-3-事件对象"><a href="#17-3-事件对象" class="headerlink" title="17.3 事件对象"></a>17.3 事件对象</h1><h2 id="DOM事件对象"><a href="#DOM事件对象" class="headerlink" title="DOM事件对象"></a>DOM事件对象</h2><p>event对象，是传给事件处理程序的<strong>唯一参数</strong>，用DOM0或DOM2指定事件处理程序时，都会传入这个event对象</p>
<p>一些常用属性和方法：</p>
<p>event.type 事件类型</p>
<p>event.target 事件目标（目标元素）</p>
<p>event.preventDefault() 取消事件的默认行为（例如drag）</p>
<h2 id="IE事件对象"><a href="#IE事件对象" class="headerlink" title="IE事件对象"></a>IE事件对象</h2><p>IE事件对象根据不同的事件处理程序访问</p>
<p>DOM0：event对象是window对象的一个属性，在事件处理函数里<code>let event=window.event</code>，然后就可以用event.type之类的</p>
<p>IE：用attachEvent指定事件处理程序，event就是唯一的参数传给事件处理函数，同时它依然是window的属性，只是图方便所以传参了</p>
<p>HTML：直接在HTML里指定事件处理程序，可以通过event访问，因为HTML里event是一个自动生成的局部变量</p>
<h2 id="跨浏览器事件对象"><a href="#跨浏览器事件对象" class="headerlink" title="跨浏览器事件对象"></a>跨浏览器事件对象</h2><p>p786</p>
<p>兼容性跨浏览器获取event对象，目标元素之类的</p>
<ul>
<li>event对象</li>
<li>目标元素</li>
<li>取消默认行为</li>
<li>取消后续事件</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> EventUtil = &#123;</span><br><span class="line">    <span class="comment">// 获取event对象</span></span><br><span class="line">    <span class="attr">getEvent</span>: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> event ? event : <span class="built_in">window</span>.event;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 获取目标元素</span></span><br><span class="line">    <span class="attr">getTarget</span>: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> event.target || event.srcElement;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 取消事件默认行为</span></span><br><span class="line">    <span class="attr">preventDefault</span>: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    	<span class="keyword">if</span> (event.preventDefault) &#123;</span><br><span class="line">    		event.preventDefault();</span><br><span class="line">    	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    		event.returnValue = <span class="literal">false</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 取消后续事件捕获和事件冒泡</span></span><br><span class="line">    <span class="attr">stopPropagation</span>: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (event.stopPropagation) &#123;</span><br><span class="line">            event.stopPropagation();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            event.cancelBubble = <span class="literal">true</span>; <span class="comment">// 只取消冒泡</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h2><h3 id="冒泡和捕获"><a href="#冒泡和捕获" class="headerlink" title="冒泡和捕获"></a>冒泡和捕获</h3><p>事件流是页面接受事件的顺序</p>
<p>事件冒泡流：IE浏览器提出，从目标元素逐级向上传播到document（现代浏览器会到window）</p>
<p>事件捕获流：NetScape提出，从document逐级向下传播到具体元素，目的是在目标元素接收到事件之前拦截事件，很多浏览器不支持所以一般不用</p>
<h3 id="DOM事件流-1"><a href="#DOM事件流-1" class="headerlink" title="DOM事件流"></a>DOM事件流</h3><p>DOM2 Events规范规定，事件流分三个阶段：事件捕获、到达目标、事件冒泡</p>
<ul>
<li>事件捕获：用来提前拦截事件</li>
<li>到达目标：目标元素接收事件</li>
<li>事件冒泡：最迟在这一阶段响应事件</li>
</ul>
<p>所有现代浏览器都支持，只有IE8及以前不支持</p>
<h2 id="事件处理程序"><a href="#事件处理程序" class="headerlink" title="事件处理程序"></a>事件处理程序</h2><p>事件 click</p>
<p>事件处理程序 onclick</p>
<p>事件处理函数 handleClick()</p>
<h3 id="DOM0-DOM2"><a href="#DOM0-DOM2" class="headerlink" title="DOM0 DOM2 *"></a>DOM0 DOM2 *</h3><p><a href="demo%5C%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E7%A8%8B%E5%BA%8F.html">参考</a></p>
<p>事件处理程序有哪几种指定方式：HTML、DOM0、DOM2、IE</p>
<ul>
<li>HTML：直接在HTML中绑定，<code>onclick=&quot;fun()&quot;</code><ul>
<li>标签内的this指向目标元素，函数内的this指向window</li>
</ul>
</li>
<li><strong>DOM0</strong>：<code>element.onclick=...</code><ul>
<li>函数内的this指向目标元素</li>
</ul>
</li>
<li><strong>DOM2</strong>：<code>addEventListener()</code> <code>removeEventListener()</code><ul>
<li>函数内的this指向目标元素</li>
<li>无on</li>
</ul>
</li>
<li>IE：<code>attachEvent()</code> <code>detachEvent()</code><ul>
<li>函数内的this指向window</li>
<li>有on</li>
</ul>
</li>
</ul>
<h3 id="addEventListener-参数"><a href="#addEventListener-参数" class="headerlink" title="addEventListener()参数"></a>addEventListener()参数</h3><p>事件名、事件处理函数、布尔值（决定将事件处理函数添加到哪个阶段）</p>
<ul>
<li>事件名，注意是事件名！<strong>没有on</strong>！！！</li>
<li>事件处理函数，如果函数在其他地方定义，传函数名<strong>不要括号</strong>！！！！</li>
<li>一个布尔值，<ul>
<li>true表示在<strong>捕获阶段</strong>调用事件处理程序，</li>
<li>false（默认值）表示 在<strong>冒泡阶段</strong>调用事件处理程序。</li>
</ul>
</li>
</ul>
<p>可以为一个事件添加多个事件处理函数，会按添加<strong>顺序</strong>执行</p>
<h3 id="addEventListener-和attachEvent-不同"><a href="#addEventListener-和attachEvent-不同" class="headerlink" title="addEventListener()和attachEvent()不同"></a>addEventListener()和attachEvent()不同</h3><table>
<thead>
<tr>
<th>不同点</th>
<th>addEventListener()</th>
<th>attachEvent()</th>
</tr>
</thead>
<tbody><tr>
<td>事件处理程序指定方式</td>
<td>DOM2</td>
<td>IE</td>
</tr>
<tr>
<td>传入第一个参数</td>
<td>事件名无on</td>
<td>事件处理程序名有on</td>
</tr>
<tr>
<td>传入第三个参数</td>
<td>有</td>
<td>无</td>
</tr>
<tr>
<td>事件流阶段</td>
<td>可以指定添加到捕获或冒泡</td>
<td>只能添加到冒泡</td>
</tr>
<tr>
<td>浏览器支持</td>
<td>现代浏览器都支持</td>
<td>只有IE8及以前支持</td>
</tr>
<tr>
<td>事件处理函数的this指向</td>
<td>目标元素</td>
<td>window</td>
</tr>
<tr>
<td>绑定多个处理函数时的执行顺序</td>
<td>顺序</td>
<td>逆序</td>
</tr>
</tbody></table>
<h2 id="冒泡相关"><a href="#冒泡相关" class="headerlink" title="冒泡相关"></a>冒泡相关</h2><h3 id="什么事件不会触发冒泡"><a href="#什么事件不会触发冒泡" class="headerlink" title="什么事件不会触发冒泡"></a>什么事件不会触发冒泡</h3><p><a href="https://blog.csdn.net/Piconjo/article/details/104729923">https://blog.csdn.net/Piconjo/article/details/104729923</a></p>
<p>前面加on也可以</p>
<p>UI事件：load unload abort error</p>
<p>焦点事件（Focus）：<strong>blur focus</strong></p>
<p>鼠标事件（Mouse）：<strong>mouseenter mouseleave</strong></p>
<p>Html5媒体事件（media）：play mute</p>
<h2 id="跨浏览器"><a href="#跨浏览器" class="headerlink" title="跨浏览器 *"></a>跨浏览器 *</h2><p><strong>取消冒泡：</strong></p>
<p>DOM0、DOM2中传给事件处理函数的唯一默认参数是event：调用<code>event.stopPropagation()</code>，可以取消捕获和冒泡</p>
<p>IE中有点不一样：<code>event.cancelBubble = true</code>，只能取消冒泡</p>
<p><strong>取消默认行为：</strong></p>
<p>DOM：<code>event.preventDefault()</code></p>
<p>IE：<code>event.returnValue = false</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> EventUtil = &#123;</span><br><span class="line">    <span class="comment">// 添加事件处理程序</span></span><br><span class="line">    <span class="attr">addHandler</span>: <span class="function"><span class="keyword">function</span>(<span class="params">element, type, handler</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (element.addEventListener) &#123; <span class="comment">// DOM2</span></span><br><span class="line">        	element.addEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.attachEvent) &#123; <span class="comment">// IE</span></span><br><span class="line">        	element.attachEvent(<span class="string">&quot;on&quot;</span> + type, handler);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// DOM0</span></span><br><span class="line">        	element[<span class="string">&quot;on&quot;</span> + type] = handler;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 移除事件处理程序</span></span><br><span class="line">    <span class="attr">removeHandler</span>: <span class="function"><span class="keyword">function</span>(<span class="params">element, type, handler</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (element.removeEventListener) &#123; <span class="comment">// DOM2</span></span><br><span class="line">        	element.removeEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.detachEvent) &#123; <span class="comment">// IE</span></span><br><span class="line">        	element.detachEvent(<span class="string">&quot;on&quot;</span> + type, handler);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// DOM0</span></span><br><span class="line">        	element[<span class="string">&quot;on&quot;</span> + type] = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 获取event对象</span></span><br><span class="line">    <span class="attr">getEvent</span>: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> event ? event : <span class="built_in">window</span>.event;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 获取目标元素</span></span><br><span class="line">    <span class="attr">getTarget</span>: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> event.target || event.srcElement;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 取消事件默认行为</span></span><br><span class="line">    <span class="attr">preventDefault</span>: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    	<span class="keyword">if</span> (event.preventDefault) &#123;</span><br><span class="line">    		event.preventDefault();</span><br><span class="line">    	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    		event.returnValue = <span class="literal">false</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 取消后续事件捕获和事件冒泡</span></span><br><span class="line">    <span class="attr">stopPropagation</span>: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (event.stopPropagation) &#123;</span><br><span class="line">            event.stopPropagation();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            event.cancelBubble = <span class="literal">true</span>; <span class="comment">// 只取消冒泡</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件 *"></a>自定义事件 *</h2><p><a href="demo%5C%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6.html">参考</a></p>
<p>创建事件：3种方法</p>
<ul>
<li>Event()构造函数，不能传数据</li>
<li>customEvent()构造函数，可以传数据</li>
<li>document.createEvent()，已废弃</li>
</ul>
<p>触发事件：dispatchEvent(myEvent)</p>
<p><strong>方法1：Event()构造函数</strong></p>
<p>构造函数传入事件名称，可选配置项</p>
<ul>
<li>bubbles：是否冒泡</li>
<li>cancelable：是否被取消</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Event创建事件</span></span><br><span class="line"><span class="keyword">let</span> myEvent1=<span class="keyword">new</span> Event(<span class="string">&quot;myevent1&quot;</span>,&#123;<span class="string">&quot;bubbles&quot;</span>: <span class="literal">true</span>,<span class="string">&quot;cancelable&quot;</span>: <span class="literal">true</span>&#125;)</span><br><span class="line"><span class="comment">// 事件监听</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&quot;myevent1&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;用Event()构造函数创建事件&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 事件触发</span></span><br><span class="line"><span class="built_in">document</span>.dispatchEvent(myEvent1)</span><br></pre></td></tr></table></figure>

<p><strong>方法2：customEvent()构造函数</strong></p>
<p>构造函数传入事件名称，可选配置项</p>
<ul>
<li>detail：事件种要被传递的数据</li>
<li>bubbles：是否冒泡</li>
<li>cancelable：是否被取消</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CustomEvent创建事件</span></span><br><span class="line"><span class="keyword">let</span> myEvent2=<span class="keyword">new</span> CustomEvent(<span class="string">&quot;myevent2&quot;</span>,&#123;</span><br><span class="line">    <span class="string">&quot;detail&quot;</span>: &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;用CustomEvent()构造函数创建事件&quot;</span>&#125;,</span><br><span class="line">    <span class="string">&quot;bubbles&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;cancelable&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 事件监听</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&quot;myevent2&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(event.detail.name)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 触发事件</span></span><br><span class="line"><span class="built_in">document</span>.dispatchEvent(myEvent2)</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>JavaScript笔记</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>事件</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript中的相等比较</title>
    <url>/2022/04/13/JavaScript/sum1_equal/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Equality_comparisons_and_sameness">MDN相等性判断</a></p>
<p>JavaScript提供三种不同的值比较操作：</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Identity">&#x3D;&#x3D;&#x3D;</a> ，严格相等比较 (也被称作”strict equality”, “identity”, “triple equals”)</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Equality">&#x3D;&#x3D;</a>，抽象相等比较 (“loose equality”，”double equals”) </li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is"><code>Object.is</code></a> （ECMAScript 2015&#x2F; ES6 新特性）</li>
</ul>
<blockquote>
<p><strong>Moral of the story:</strong><br>Always use 3 equals unless you have a good reason to use 2.<br>能用<code>===</code>就用<code>===</code>！！！</p>
</blockquote>
<span id="more"></span>

<h1 id=""><a href="#" class="headerlink" title="==="></a><code>===</code></h1><p>全等操作符比较两个值是否相等，两个被比较的值在比较前都<strong>不进行隐式转换</strong>。</p>
<p>如果两个被比较的值具有<strong>不同的类型</strong>，这两个值是不全等的。具体规则：</p>
<ul>
<li>如果<strong>类型</strong>不同，就[不相等] </li>
<li>如果两个值<strong>都是null</strong>，或者<strong>都是undefined</strong>，那么[相等]。 </li>
<li>如果两个都是<strong>数值</strong>，并且是同一个值，那么[相等]。但是+-0和NaN要特殊对待<ul>
<li>+0，-0，0视作相等</li>
<li>NaN与任何值都不等，包括NaN</li>
</ul>
</li>
<li>如果两个都是<strong>字符串</strong>，每个位置的字符都一样，那么[相等]；否则[不相等]。 </li>
<li>如果两个值都<strong>引用</strong>同一个对象或函数，那么[相等]；否则[不相等]。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这些是===符合预期的情况</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> === <span class="number">1</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(&#123;&#125; === &#123;&#125;); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;2&quot;</span> === <span class="number">2</span>); <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 这些情况在不同JavaScript引擎中表现不同，但仍被认为相等</span></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="number">0</span> === -<span class="number">0</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="number">0</span> === <span class="number">0</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(-<span class="number">0</span> === <span class="number">0</span>); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 要确定NaN的相等性，必须使用极为讨厌的isNaN()</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> === <span class="literal">NaN</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="literal">NaN</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h1 id="Object-is"><a href="#Object-is" class="headerlink" title="Object.is"></a><code>Object.is</code></h1><p>Object.is的行为方式与<code>===</code>相同，但是对于NaN和-0和+0进行特殊处理</p>
<ul>
<li><code>===</code><ul>
<li>+0，-0，0视作相等</li>
<li>NaN与任何值都不等，包括NaN</li>
</ul>
</li>
<li>Object.is<ul>
<li>+0和0相等，和-0不相等</li>
<li>NaN和NaN相等</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 行为方式与===相同</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="literal">true</span>, <span class="number">1</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(&#123;&#125;, &#123;&#125;)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="string">&quot;2&quot;</span>, <span class="number">2</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 正确的0、-0、+0相等/不等判定</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(+<span class="number">0</span>, -<span class="number">0</span>)); <span class="comment">// false *******</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(+<span class="number">0</span>, <span class="number">0</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(-<span class="number">0</span>, <span class="number">0</span>)); <span class="comment">// false ******</span></span><br><span class="line"><span class="comment">// 正确的NaN相等判定</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="literal">NaN</span>)); <span class="comment">// true ********</span></span><br></pre></td></tr></table></figure>

<h2 id="0-0"><a href="#0-0" class="headerlink" title="+0 -0"></a>+0 -0</h2><p><strong>+0和-0的区别</strong></p>
<p><a href="https://blog.csdn.net/qiwoo_weekly/article/details/101442976?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_antiscanv2&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_antiscanv2&utm_relevant_index=1">参考</a></p>
<ul>
<li>+0是0，-0是别的</li>
<li>主要是浮点数表示中符号位不同</li>
<li>表现不同：加减乘除运算</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">+<span class="number">0</span> + (+<span class="number">0</span>) = +<span class="number">0</span></span><br><span class="line">+<span class="number">0</span> + (-<span class="number">0</span>) = +<span class="number">0</span></span><br><span class="line">-<span class="number">0</span> + (+<span class="number">0</span>) = +<span class="number">0</span></span><br><span class="line">-<span class="number">0</span> + (-<span class="number">0</span>) = -<span class="number">0</span></span><br><span class="line"><span class="number">1</span>/-<span class="number">0</span> = -<span class="literal">Infinity</span></span><br><span class="line"><span class="number">1</span>/+<span class="number">0</span> = <span class="literal">Infinity</span></span><br></pre></td></tr></table></figure>

<p><strong>判断+-0</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断是否为+0</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPositiveZero</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> num === <span class="number">0</span> &amp;&amp; <span class="number">1</span> / num &gt; <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断是否为-0</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNegativeZero</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> num === <span class="number">0</span> &amp;&amp; <span class="number">1</span> / num &lt; <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>+0和-0的应用场景</strong></p>
<p>隐式类型转换：String转Number用-0，此外*1或&#x2F;1也行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;123&quot;</span>+<span class="number">0</span>  <span class="comment">// &#x27;1230&#x27;</span></span><br><span class="line"><span class="string">&quot;123&quot;</span>-<span class="number">0</span>  <span class="comment">// 123</span></span><br><span class="line"><span class="string">&quot;123&quot;</span>*<span class="number">1</span>  <span class="comment">// 123</span></span><br><span class="line"><span class="string">&quot;123&quot;</span>/<span class="number">1</span>  <span class="comment">// 123</span></span><br></pre></td></tr></table></figure>

<h2 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN">MDN: NaN</a></p>
<p><code>NaN</code> 是一个<em>全局对象</em>的属性。</p>
<p><code>NaN</code> 属性的初始值就是 NaN，和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/NaN"><code>Number.NaN</code></a> 的值一样。在现代浏览器中（ES5 中）， <code>NaN</code> 属性是一个不可配置（non-configurable），不可写（non-writable）的属性</p>
<p><strong>NaN出现的情况</strong></p>
<p>编码中很少直接使用到 <code>NaN</code>。通常都是在计算失败时</p>
<ul>
<li>作为 Math 的某个方法的返回值出现的（例如：<code>Math.sqrt(-1)</code>）</li>
<li>或者尝试将一个字符串解析成数字但失败了的时候（例如：<code>parseInt(&quot;blabla&quot;)</code>）。</li>
</ul>
<p><strong>判断一个值是否是 <code>NaN</code></strong></p>
<p>返回false的情况</p>
<ul>
<li>通过 <code>==</code>、  <code>===</code>与其他任何值比较都将<strong>不相等</strong>， 包括与其他 <code>NaN</code> 值进行比较。</li>
</ul>
<p>返回true的情况</p>
<ul>
<li>Object.is(NaN, NaN)</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN"><code>Number.isNaN()</code></a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/isNaN"><code>isNaN()</code></a> 函数</li>
</ul>
<p>在执行自比较之中：也只有 <code>NaN</code> 不等于它自己。</p>
<h1 id="-1"><a href="#-1" class="headerlink" title="=="></a><code>==</code></h1><p>在比较前将两个被比较的值<strong>转换为相同类型</strong>。</p>
<p>在转换后（等式的一边或两边都可能被转换），最终的比较方式等同于全等操作符 &#x3D;&#x3D;&#x3D; 的比较方式</p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/noteImg/JavaScript/sum/image-20220413113049671.png" alt="image-20220413113049671"></p>
<p>如果两个值<strong>类型相同</strong>，进行 &#x3D;&#x3D;&#x3D; 比较。 </p>
<ul>
<li>注意NaN和NaN，规定[不相等]！</li>
</ul>
<p>如果两个值<strong>类型不同</strong>。根据下面规则进行<strong>类型转换</strong>再比较： </p>
<ul>
<li><p>如果一个是null、一个是undefined，那么[相等]</p>
<ul>
<li>null、undefined和其他数据类型比较都[不相等]</li>
</ul>
</li>
<li><p>如果其中之一为Number</p>
<ul>
<li>另一个是String，就转成Number判断<ul>
<li>返回值可能是NaN或数值</li>
</ul>
</li>
<li>另一个是Boolean，就转成Number判断<ul>
<li>true-&gt;1，false-&gt;0</li>
</ul>
</li>
<li>另一个是Object，调用ToPrimitive比较</li>
</ul>
</li>
<li><p>如果是String和Boolean</p>
<ul>
<li>都转化成Number</li>
</ul>
</li>
<li><p>如果是Object</p>
<ul>
<li>调用ToPrimitive比较</li>
</ul>
</li>
</ul>
<h2 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number">MDN: Number</a></p>
<p><code>Number</code> 对象主要用于：</p>
<ul>
<li>如果参数无法被转换为数字，则返回 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN"><code>NaN</code></a>。</li>
<li>在非构造器上下文中 (如：没有 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new"><code>new</code></a> 操作符)，<code>Number</code> 能被用来执行类型转换。</li>
</ul>
<p><strong>使用new操作符</strong></p>
<p>new，返回对象，由Number构造函数产生</p>
<p>不new，返回Number类型的一个数值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Number</span>(value);</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="string">&#x27;123&#x27;</span>); <span class="comment">// a === 123 is false</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">Number</span>(<span class="string">&#x27;123&#x27;</span>); <span class="comment">// b === 123 is true</span></span><br><span class="line">a <span class="keyword">instanceof</span> <span class="built_in">Number</span>; <span class="comment">// is true</span></span><br><span class="line">b <span class="keyword">instanceof</span> <span class="built_in">Number</span>; <span class="comment">// is false</span></span><br></pre></td></tr></table></figure>

<h2 id="ToPrimitive"><a href="#ToPrimitive" class="headerlink" title="ToPrimitive"></a>ToPrimitive</h2><h3 id="Symbol-toPrimitive"><a href="#Symbol-toPrimitive" class="headerlink" title="Symbol.toPrimitive"></a>Symbol.toPrimitive</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive">MDN: Symbol.toPrimitive</a></p>
<p>这是一个对象的内置函数属性，无法从外部调用，但是我们可以通过触发隐式类型转换观察它的行为</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(+obj1);     <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;obj1&#125;</span>`</span>); <span class="comment">// &quot;[object Object]&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1 + <span class="string">&quot;&quot;</span>); <span class="comment">// &quot;[object Object]&quot;</span></span><br></pre></td></tr></table></figure>

<p>可以重写Symbol.toPrimitive属性，<code>hint</code> 参数的取值是 <code>&quot;number&quot;</code>、<code>&quot;string&quot;</code> 和 <code>&quot;default&quot;</code> 中的任意一个。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接下面声明一个对象，手动赋予了 Symbol.toPrimitive 属性，再来查看输出结果</span></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>.toPrimitive](hint) &#123;</span><br><span class="line">    <span class="keyword">if</span> (hint == <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (hint == <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(+obj2);     <span class="comment">// 10      -- hint 参数值是 &quot;number&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;obj2&#125;</span>`</span>); <span class="comment">// &quot;hello&quot; -- hint 参数值是 &quot;string&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2 + <span class="string">&quot;&quot;</span>); <span class="comment">// &quot;true&quot;  -- hint 参数值是 &quot;default&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="转换规则"><a href="#转换规则" class="headerlink" title="转换规则"></a>转换规则</h3><p><a href="https://juejin.cn/post/7013933952436011039">学习js原始值转换的抽象操作 toPrimitive</a></p>
<p><strong><code>hint</code> 参数是<code>&quot;string&quot;</code>，Object-&gt;String</strong></p>
<p>判断对象中有没有<code>toString()</code>方法</p>
<ul>
<li><p>有，调用<code>toString()</code>方法。</p>
<ul>
<li>如果返回一个原始值，非字符串的转化为字符串，返回字符串</li>
</ul>
</li>
<li><p>没有，或者<code>toString()</code>返回一个非原始值，那么js会调用<code>valueOf()</code>方法。</p>
<ul>
<li>如果返回一个原始值，非字符串的转化为字符串，返回字符串</li>
</ul>
</li>
<li><p>否则，js抛出一个类型错误异常。</p>
</li>
</ul>
<p><strong><code>hint</code> 参数是<code>&quot;number/default&quot;</code>，Object-&gt;Number</strong></p>
<p>判断对象中有没有<code>valueOf()</code>方法</p>
<ul>
<li>有，调用<code>valueOf()</code>方法<ul>
<li>返回一个原始值，则js会将其转换为数字(如果需要的话)并返回这个数字。</li>
</ul>
</li>
<li>没有，如果对象具有<code>toString()</code>方法，则调用<ul>
<li>返回一个原始值(字符串直接量)，则js将其转换为数字类型，并返回这个数字。</li>
</ul>
</li>
<li>否则，js抛出一个类型错误异常。</li>
</ul>
<h1 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h1><p>参考：<a href="http://dorey.github.io/JavaScript-Equality-Table/">JS比较表</a></p>
<p>下面的情况&#x3D;&#x3D;会输出什么？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="literal">NaN</span>==<span class="literal">NaN</span> <span class="comment">// false, NaN与任何值都不等</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="literal">true</span>==<span class="number">1</span></span><br><span class="line"><span class="literal">true</span>==<span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="literal">true</span>==[<span class="number">1</span>]</span><br><span class="line"><span class="literal">false</span>==<span class="number">0</span></span><br><span class="line"><span class="literal">false</span>==<span class="string">&quot;0&quot;</span></span><br><span class="line"><span class="literal">false</span>==[]</span><br><span class="line"><span class="literal">false</span>==[[]]</span><br><span class="line"><span class="literal">false</span>==[<span class="number">0</span>]</span><br><span class="line"><span class="literal">false</span>==&#123;&#125; <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;1,2,3&quot;</span>==[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]		<span class="comment">// true, Array.prototype.toString =&gt; &#x27;1,2,3&#x27;</span></span><br><span class="line"><span class="string">&#x27;[object Object]&#x27;</span>==&#123;&#125;	<span class="comment">// true, Object.prototype.toString(&#123;&#125;)=&gt;&#x27;[object Object]&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;123&quot;</span>==[<span class="number">123</span>]                <span class="comment">// true</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;123&quot;</span>)==<span class="string">&quot;123&quot;</span>    <span class="comment">// true</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;123&quot;</span>)==[<span class="number">123</span>]    <span class="comment">// false, 因为是两个Object比较</span></span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>JavaScript笔记</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>类型转换</tag>
        <tag>相等</tag>
      </tags>
  </entry>
  <entry>
    <title>计网笔记：理解HTTP2——TCP与UDP</title>
    <url>/2022/04/13/computerNetwork/HTTP2_tcp/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>重点掌握：</p>
<ul>
<li>TCP建立连接3次握手</li>
<li>TCP结束连接4次握手</li>
<li>TCP和UDP的区别</li>
</ul>
<p><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%20-%20%E4%BC%A0%E8%BE%93%E5%B1%82.md#udp-%E5%92%8C-tcp-%E7%9A%84%E7%89%B9%E7%82%B9">参考</a></p>
<span id="more"></span>

<h1 id="TCP和UDP概念"><a href="#TCP和UDP概念" class="headerlink" title="TCP和UDP概念"></a>TCP和UDP概念</h1><p>TCP和UDP是传输层协议，提供了进程间的逻辑通信，传输层向高层用户屏蔽了下面网络层的核心细节，使应用程序看起来像是在两个传输层实体之间有一条端到端的逻辑通信信道。</p>
<ul>
<li>用户数据报协议 <strong>UDP</strong>（User Datagram Protocol）是无连接的，尽最大可能交付，没有拥塞控制，面向报文（对于应用程序传下来的报文不合并也不拆分，只是添加 UDP 首部），支持一对一、一对多、多对一和多对多的交互通信。</li>
<li>传输控制协议 <strong>TCP</strong>（Transmission Control Protocol）是<strong>面向连接</strong>的，提供<strong>可靠交付</strong>，有<strong>流量控制</strong>，<strong>拥塞控制</strong>，提供<strong>全双工通信</strong>，面向<strong>字节流</strong>（把应用层传下来的报文看成字节流，把字节流组织成大小不等的数据块），每一条 TCP 连接只能是<strong>点对点</strong>的（一对一）。</li>
</ul>
<h1 id="TCP握手"><a href="#TCP握手" class="headerlink" title="TCP握手"></a>TCP握手</h1><p>TCP报文段的一些Header格式</p>
<ul>
<li><strong>序号</strong> seq：用于对字节流进行编号，例如序号为 301，表示第一个字节的编号为 301，如果携带的数据长度为 100 字节，那么下一个报文段的序号应为 401。</li>
<li><strong>确认号</strong> ack：<strong>期望</strong>收到的下一个报文段的序号。例如 B 正确收到 A 发送来的一个报文段，序号为 501，携带的数据长度为 200 字节，因此 B 期望下一个报文段的序号为 701，B 发送给 A 的确认报文段中确认号就为 701。</li>
<li><strong>确认 ACK</strong> ：<strong>当 ACK&#x3D;1 时确认号ack字段有效</strong>，否则无效。TCP 规定，在连接建立后所有传送的报文段都必须把 ACK 置 1。</li>
<li><strong>同步 SYN</strong> ：在连接建立时用来同步序号。<ul>
<li><strong>连接请求</strong>报文段：<strong>SYN&#x3D;1，ACK&#x3D;0</strong> </li>
<li><strong>同意建立连接</strong>，则响应报文中：<strong>SYN&#x3D;1，ACK&#x3D;1</strong></li>
</ul>
</li>
<li><strong>终止 FIN</strong> ：用来释放一个连接，当 FIN&#x3D;1 时，表示此报文段的发送方的数据已发送完毕，并要求释放连接。</li>
</ul>
<h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><h3 id="建立连接过程"><a href="#建立连接过程" class="headerlink" title="建立连接过程 *"></a>建立连接过程 *</h3><p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/noteImg/HTTP/image-20220413195201878.png"></p>
<p>假设 A 为客户端，B 为服务器端。</p>
<ul>
<li>首先 B 处于 LISTEN（监听）状态，等待客户的连接请求。</li>
<li>A 向 B 发送连接请求报文，<strong>SYN&#x3D;1，ACK&#x3D;0</strong>，选择一个初始的序号 x。</li>
<li>B 收到连接请求报文，如果同意建立连接，则向 A 发送连接确认报文，<strong>SYN&#x3D;1，ACK&#x3D;1</strong>，确认号为 x+1，同时也选择一个初始的序号 y。</li>
<li>A 收到 B 的连接确认报文后，还要向 B 发出确认，确认号为 y+1，序号为 x+1。</li>
<li>B 收到 A 的确认后，连接建立。</li>
</ul>
<h3 id="三次握手的原因"><a href="#三次握手的原因" class="headerlink" title="三次握手的原因"></a><strong>三次握手的原因</strong></h3><p>第三次握手是为了<strong>防止失效的连接请求到达服务器</strong>，让服务器错误打开连接，客户端会丢弃失效的连接，但服务器会一直维持这个资源，造成浪费。</p>
<p>两次握手不够的原因是：两次只能让服务端接收并发送请求，缺没办法知道客户端是否将这次请求判定为成功</p>
<p>四次五次也可以，但是浪费</p>
<h2 id="四次握手"><a href="#四次握手" class="headerlink" title="四次握手"></a>四次握手</h2><h3 id="释放连接过程"><a href="#释放连接过程" class="headerlink" title="释放连接过程 *"></a>释放连接过程 *</h3><p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/noteImg/HTTP/image-20220413195236682.png"></p>
<ul>
<li>A 发送连接释放报文，FIN&#x3D;1。</li>
<li>B 收到之后发出确认，此时 TCP 属于<strong>半关闭状态</strong>，B 能向 A 发送数据但是 A 不能向 B 发送数据。</li>
<li>当 B 不再需要连接时，发送连接释放报文，FIN&#x3D;1。</li>
<li>A 收到后发出确认，进入 TIME-WAIT 状态，等待 2 MSL（最大报文存活时间）后释放连接。</li>
<li>B 收到 A 的确认后释放连接。</li>
</ul>
<h3 id="四次握手的原因"><a href="#四次握手的原因" class="headerlink" title="四次握手的原因"></a>四次握手的原因</h3><p>客户端发送了 FIN 连接释放报文之后，服务器收到了这个报文，就进入了 CLOSE-WAIT 状态。这个状态是为了<strong>让服务器端发送还未传送完毕的数据</strong>，传送完毕之后，服务器会发送 FIN 连接释放报文</p>
<h3 id="TIME-WAIT原因"><a href="#TIME-WAIT原因" class="headerlink" title="TIME_WAIT原因"></a>TIME_WAIT原因</h3><p>客户端接收到服务器端的 FIN 报文后进入此状态，此时并不是直接进入 CLOSED 状态，还需要等待一个时间计时器设置的时间 2MSL。这么做有两个理由：</p>
<ul>
<li><strong>确保最后一个确认报文能够到达</strong>。如果 B 没收到 A 发送来的确认报文，那么就会重新发送连接释放请求报文，A 等待一段时间就是为了处理这种情况的发生。</li>
<li>等待一段时间是为了<strong>让本连接持续时间内所产生的所有报文都从网络中消失</strong>，使得下一个新的连接不会出现旧的连接请求报文。</li>
</ul>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>前端工程师进阶系列</category>
        <category>计算机网络笔记</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>红宝书学习：第八章 对象，类，面向对象</title>
    <url>/2022/02/24/JavaScript/prof_ch8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本章内容</p>
<ul>
<li>理解对象：属性，内部特性，解构赋值</li>
<li>理解对象创建过程：字面量，工厂，构造函数，原型</li>
<li>理解继承：原型链，盗用构造函数，组合式，组合式寄生</li>
<li>理解类：构造函数，实例成员，原型方法，静态类方法，继承</li>
</ul>
<span id="more"></span>

<h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><p>JavaScript的对象是一组由<strong>键-值</strong>组成的无序集合</p>
<ul>
<li><p>对象的键都是字符串类型，值可以是<strong>任意</strong>数据类型。</p>
</li>
<li><p>其中每个键又称为对象的<strong>属性</strong>，要获取一个对象的属性，用<code>对象变量.属性名</code></p>
</li>
</ul>
<p>创建对象2种方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. new Object()，然后手动添加属性，现在不怎么用了</span></span><br><span class="line"><span class="keyword">let</span> person=<span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">person.name=<span class="string">&quot;a&quot;</span></span><br><span class="line">person.sayName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 使用对象字面量，现在都用这个，注意多个属性用逗号分隔</span></span><br><span class="line"><span class="keyword">let</span> name=<span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> person=&#123;</span><br><span class="line">    [name]:<span class="string">&quot;a&quot;</span>,</span><br><span class="line">    <span class="function"><span class="title">sayName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="属性的类型和特性"><a href="#属性的类型和特性" class="headerlink" title="属性的类型和特性"></a>属性的类型和特性</h2><p><strong>内部特性&#x2F;属性描述符</strong>：</p>
<ul>
<li>用来描述属性的特征，开发者不能在JS中直接访问，用双中括号<code>[[]]</code>表示</li>
<li>属性分为数据属性和访问器属性，有不同的内部特性</li>
</ul>
<p><strong>数据属性</strong>：p349</p>
<ul>
<li><p>包含一个保存数据值的位置。</p>
</li>
<li><p>4个特性  </p>
<ul>
<li>[[Configurable]] 是否可delete，是否可修改特性，是否可以改成访问器属性</li>
<li>[[Enumerable]] 是否可以通过for-in返回（遍历对象属性）</li>
<li>[[Writable]] 是否可修改</li>
<li>[[Value]] 值</li>
</ul>
</li>
<li><p>使用<code>Object.defineProperty()</code>方法修改</p>
</li>
</ul>
<p><strong>访问器属性</strong>：p351</p>
<ul>
<li>没有值，但是有一个getter函数或一个setter函数，可用于<strong>私有成员</strong> p351</li>
<li><a href="https://www.w3school.com.cn/js/js_object_accessors.asp">https://www.w3school.com.cn/js/js_object_accessors.asp</a></li>
<li>4个特性<ul>
<li>[[Configurable]] 是否可delete，是否可修改特性，是否可改为数据属性</li>
<li>[[Enumerable]] 是否可以通过for-in循环返回</li>
<li>[[Get]] 获取函数，在读取属性时调用</li>
<li>[[Set]] 设置函数，在写入属性时调用</li>
</ul>
</li>
<li>使用<code>Object.defineProperty()</code>方法修改，也可以直接定义set和get</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接定义set get 对象访问器</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">language_</span> : <span class="string">&quot;zh&quot;</span>,  <span class="comment">// 属性名_一般代表不想被直接访问的属性</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title">langCap</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.language_.toUpperCase()</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span> <span class="title">lang</span>(<span class="params">val</span>) &#123;</span><br><span class="line">  	<span class="built_in">this</span>.language_=val</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.langCap) <span class="comment">// ZH</span></span><br><span class="line">person.lang=<span class="string">&quot;en&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(person.langCap) <span class="comment">// EN</span></span><br></pre></td></tr></table></figure>

<h2 id="定义多个属性"><a href="#定义多个属性" class="headerlink" title="定义多个属性"></a>定义多个属性</h2><p><code>Object.defineProperty(obj, prop)</code>一次只能定义一个属性的特性</p>
<p><code>Object.defineProperties(obj, props)</code>方法可以一次定义多个属性及其特性 p352</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">language_</span>:<span class="string">&quot;zh&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperties(person, &#123;</span><br><span class="line">    <span class="attr">langCap</span> : &#123;</span><br><span class="line">        <span class="attr">get</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.language_.toUpperCase()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">lang</span> :&#123;</span><br><span class="line">        <span class="attr">set</span> : <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.language_=val</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.langCap) <span class="comment">// ZH</span></span><br><span class="line">person.lang=<span class="string">&quot;en&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(person.langCap) <span class="comment">// EN</span></span><br></pre></td></tr></table></figure>

<h2 id="读取属性的特性"><a href="#读取属性的特性" class="headerlink" title="读取属性的特性"></a>读取属性的特性</h2><p><code>Object.getOwnPropertyDescriptor(obj，prop)</code>取得指定属性的属性描述符</p>
<p><code>Object.getOwnPropertyDescriptors(obj)</code>ES2017新增，返回对象的说有属性及其描述符</p>
<h2 id="合并对象"><a href="#合并对象" class="headerlink" title="合并对象 *"></a>合并对象 *</h2><p>合并：把源对象所有的本地属性一起复制到目标对象上</p>
<p><code>Object.assign(dest,src)</code>方法，源对象复制到目标对象，返回目标对象</p>
<ul>
<li><p>本质上是执行</p>
</li>
<li><p>执行<strong>浅拷贝</strong>：p356</p>
<ul>
<li>可以有多个src，如果src之间有相同的属性，那么最终dest的那个属性使用最后一个复制的值</li>
<li>浅拷贝复制的是对象的<strong>引用</strong>，仍然指向同一个地址，所以如果属性值是对象，拷贝后修改，源和目的都会改变。</li>
<li>另，如果src中有getter函数会报错，p357。要复制getter用<code>Object.getOwnPropertyDescriptor(obj，prop)</code>和<code>Object.defineProperty(obj, prop)</code></li>
</ul>
</li>
</ul>
<h2 id="对象标识及相等判定"><a href="#对象标识及相等判定" class="headerlink" title="对象标识及相等判定 *"></a>对象标识及相等判定 *</h2><p><code>Object.is()</code>方法，ES6新增</p>
<p><code>===</code>无法判定的情况：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这些是===符合预期的情况</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> === <span class="number">1</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(&#123;&#125; === &#123;&#125;); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;2&quot;</span> === <span class="number">2</span>); <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 这些情况在不同JavaScript引擎中表现不同，但仍被认为相等</span></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="number">0</span> === -<span class="number">0</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="number">0</span> === <span class="number">0</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(-<span class="number">0</span> === <span class="number">0</span>); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 要确定NaN的相等性，必须使用极为讨厌的isNaN()</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> === <span class="literal">NaN</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="literal">NaN</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><code>Object.is()</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="literal">true</span>, <span class="number">1</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(&#123;&#125;, &#123;&#125;)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="string">&quot;2&quot;</span>, <span class="number">2</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 正确的0、-0、+0相等/不等判定</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(+<span class="number">0</span>, -<span class="number">0</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(+<span class="number">0</span>, <span class="number">0</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(-<span class="number">0</span>, <span class="number">0</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 正确的NaN相等判定</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="literal">NaN</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>检查多个值，递归调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">recursivelyCheckEqual</span>(<span class="params">x, ...rest</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">Object</span>.is(x, rest[<span class="number">0</span>]) &amp;&amp;</span><br><span class="line">        (rest.length &lt; <span class="number">2</span> || recursivelyCheckEqual(...rest));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="增强的对象语法"><a href="#增强的对象语法" class="headerlink" title="增强的对象语法"></a>增强的对象语法</h2><p>ES6新增语法糖（为了让编程更简洁优美添加的语法，比如for循环就是基于while的语法糖）</p>
<p>属性值简写</p>
<ul>
<li>属性名和变量名一样<code>obj&#123;name:name&#125;</code>时可以省略成<code>obj&#123;name&#125;</code></li>
</ul>
<p>可计算属性&#x2F;符号属性</p>
<ul>
<li><p>可以使用变量的值作为属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以前</span></span><br><span class="line"><span class="keyword">const</span> a=<span class="string">&quot;aaa&quot;</span></span><br><span class="line"><span class="keyword">let</span> obj1=&#123;&#125;</span><br><span class="line">obj1[a]=<span class="string">&quot;bbb&quot;</span></span><br><span class="line"><span class="comment">// &#123;aaa: &#x27;bbb&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可计算属性</span></span><br><span class="line"><span class="keyword">let</span> obj2=&#123;</span><br><span class="line">	[a]:<span class="string">&quot;ccc&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &#123;aaa: &#x27;ccc&#x27;&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>方法名简写</p>
<ul>
<li>以前定义对象中的方法：<code>fun : function(val)&#123;...&#125;</code></li>
<li>现在简写：<code>fun(val)&#123;...&#125;</code></li>
</ul>
<h2 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h2><p>p362</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用对象解构</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;Matt&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="number">27</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">name</span>: personName, <span class="attr">age</span>: personAge &#125; = person;</span><br><span class="line"><span class="built_in">console</span>.log(personName); <span class="comment">// Matt</span></span><br><span class="line"><span class="built_in">console</span>.log(personAge); <span class="comment">// 27</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 简写，变量名和属性名一致</span></span><br><span class="line"><span class="keyword">let</span> &#123; name, age, job&#125; = person;</span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// Matt</span></span><br><span class="line"><span class="built_in">console</span>.log(age); <span class="comment">// 27</span></span><br><span class="line"><span class="built_in">console</span>.log(job); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<p>嵌套结构p364</p>
<h1 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h1><h2 id="创建对象的方式"><a href="#创建对象的方式" class="headerlink" title="创建对象的方式 *"></a>创建对象的方式 *</h2><p>ES6正式支持类和继承</p>
<p>创建对象方式：</p>
<ul>
<li>对象字面量</li>
<li>工厂模式</li>
<li>构造函数模式</li>
<li>原型模式</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">person=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;Mark&quot;</span>,</span><br><span class="line">    <span class="function"><span class="title">sayName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><p>一个工厂能提供一个创建对象的公共接口，我们可以在其中指定我们希望被创建的工厂对象的类型，也就是工厂函数就是这个接口，调用函数，返回一个实例，不需要new</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    o.name = name;</span><br><span class="line">    o.age = age;</span><br><span class="line">    o.job = job;</span><br><span class="line">    o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    	<span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p1=createPerson(<span class="string">&quot;a&quot;</span>,<span class="number">20</span>,<span class="string">&quot;student&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> p2=createPerson(<span class="string">&quot;b&quot;</span>,<span class="number">20</span>,<span class="string">&quot;teacher&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>优点</strong>：可以创建多个类似对象</p>
<p><strong>缺点</strong>：没有解决对象标识问题（不知道新创建的对象是什么类型）</p>
<h2 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    <span class="built_in">this</span>.job = job;</span><br><span class="line">    <span class="built_in">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    	<span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p1=<span class="keyword">new</span> Person(<span class="string">&quot;a&quot;</span>,<span class="number">20</span>,<span class="string">&quot;student&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> p2=<span class="keyword">new</span> Person(<span class="string">&quot;b&quot;</span>,<span class="number">20</span>,<span class="string">&quot;teacher&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>与工厂模式的区别：</p>
<ul>
<li>没有显式的new Object；属性方法赋给了this，没有return，创建对象时要new</li>
<li>另，构造函数函数名要首字母大写比较规范</li>
<li>另另，构造函数写成函数声明或是函数表达式都可以</li>
</ul>
<p><strong>优点</strong>：可以识别创建对象的类型（访问实例的Constructor属性）</p>
<p><strong>缺点</strong>：构造函数定义的方法会在每个实例都创建一遍</p>
<ul>
<li>一种解决方法是把函数定义在对象外，对象里引用，但是这样就污染了全局作用域，不好，解决方法见原型模式</li>
</ul>
<h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式 *"></a>原型模式 *</h2><p>每个函数都会创建一个<strong>prototype属性</strong>，这个属性是一个对象，包含应该由特定引用类型的实例共享的属性和方法。使用原型对象的好处是，在它上面 定义的属性和方法可以<strong>被对象实例共享</strong>。</p>
<p>可以用函数声明或函数表达式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    instance=[]</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.name=[]</span><br><span class="line">Person.prototype.age=<span class="number">20</span></span><br><span class="line">Person.prototype.job=<span class="string">&quot;student&quot;</span></span><br><span class="line">Person.prototype.sayName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p1=<span class="keyword">new</span> Person()</span><br><span class="line"><span class="keyword">let</span> p2=<span class="keyword">new</span> Person()</span><br><span class="line"><span class="built_in">console</span>.log(p1.sayName===p2.sayName) <span class="comment">// true</span></span><br><span class="line">p1.name.push(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>通过prototype定义的属性存在在原型上，被所有实例共享</li>
<li>在构造函数内定义的属性（例中instance），只有在创建实例之后，才会为每个实例单独分配一个</li>
<li>上面两者的区别在属性值为对象时很明显：第一种只要在一个实例里修改了这个对象，原型里和其它实例里都会变，第二种就是独立的</li>
</ul>
<p>优点：解决了实例属性和方法共享的问题</p>
<p>缺点：需要在外部依次定义prototype的属性，比较繁琐（不能一次性定义，因为prototype会被设置成一个通过字面量创建的新对象，它的constructor就不指向Person了，见p386）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用字面量批量定义属性会有问题！！！不要用！！！</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Person.prototype=&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;a&quot;</span>,</span><br><span class="line">	<span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">	<span class="attr">job</span>:<span class="string">&quot;student&quot;</span>,</span><br><span class="line">	<span class="function"><span class="title">sayName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    	<span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Person.rototype.constructor</span><br></pre></td></tr></table></figure>



<h3 id="01-理解原型"><a href="#01-理解原型" class="headerlink" title="01 理解原型 *"></a>01 理解原型 *</h3><p>构造函数、原型对象和实例</p>
<ul>
<li>实例与构造函数原型之间有直接的联系，但实例与构造函数之间没有。</li>
</ul>
<p>1）<strong>构造函数创建</strong>之后，自动创建一个原型对象属性prototype，指向原型对象</p>
<ul>
<li>原型对象自动获得一个constructor属性，指向与之关联的构造函数</li>
<li>在自定义构造函数时，原型对象默认只会获得constructor属性， 其他的所有方法都继承自Object。</li>
</ul>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/noteImg/JavaScript/ch8/1.png"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> Person.prototype); <span class="comment">// object</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype);</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">// constructor: f Person(),</span></span><br><span class="line"><span class="comment">// __proto__: Object</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.constructor === Person); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.__proto__ === <span class="built_in">Object</span>.prototype); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.__proto__.constructor === <span class="built_in">Object</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.__proto__.__proto__ === <span class="literal">null</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.__proto__);</span><br></pre></td></tr></table></figure>

<p>2）每次调用构造函数<strong>创建一个新实例</strong>（person1）</p>
<ul>
<li><p>这个实例的内部**[[Prototype]]指针<strong>就会被赋值为</strong>构造函数的 原型对象**（Person.prototype）。</p>
</li>
<li><p>脚本中没有访问这个**[[Prototype]]<strong>特性的标准方式， 但Firefox、Safari和Chrome会在每个对象上暴露</strong><code>__proto__</code>属性<strong>，通 过这个属性可以</strong>访问对象的原型**。在其他实现中，这个特性完全被 隐藏了。</p>
</li>
</ul>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/noteImg/JavaScript/ch8/8-1.png"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> Person(),</span><br><span class="line">    person2 = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person1 !== Person); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(person1 !== Person.prototype); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype !== Person); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person1.__proto__ === Person.prototype); <span class="comment">// true</span></span><br><span class="line">conosle.log(person1.__proto__.constructor === Person); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person1.__proto__ === person2.__proto__); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>检查、修改构造函数、原型对象和实例的关系</p>
<ul>
<li><p><strong><code>A instanceof B</code> 运算符</strong></p>
<ul>
<li>检测构造函数的 <code>prototype</code> 属性是否出现在某个实例对象的原型链上</li>
</ul>
</li>
<li><p><strong><code>isPrototypeOf()</code> 方法</strong></p>
<ul>
<li>检测原型对象和实例的关系</li>
</ul>
</li>
<li><p><code>getPrototypeOf()</code> 方法</p>
<ul>
<li>返回实例对象对应的[[Prototype]]值</li>
</ul>
</li>
<li><p><code>setPrototypeOf()</code> 方法</p>
<ul>
<li>修改实例对象对应的[[Prototype]]值，不推荐使用</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(person1 <span class="keyword">instanceof</span> Person); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(person1 <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.isPrototypeOf(person1)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.isPrototypeOf(person2)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(person1) == Person.prototype); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="02-原型层级"><a href="#02-原型层级" class="headerlink" title="02 原型层级"></a>02 原型层级</h3><p>在通过对象访问属性：按照属性名称开始搜索。</p>
<ul>
<li>先搜索对象实例本身。如果发现该属性名称，则返回对应值。</li>
<li>如果在实例对象没有找到该属性，则沿着指针进入原型对象，然后在原型对象上找到属性后，再返回对应的值。</li>
</ul>
<p>属性遮蔽：</p>
<ul>
<li>在对象实例添加属性，则会遮蔽原型对象的同名属性（不修改原型，只屏蔽访问）</li>
<li>可以通过delete操作符删除实例的属性，回复对原型的访问</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">person1.name=<span class="string">&quot;b&quot;</span></span><br><span class="line"><span class="keyword">delete</span> person1.name</span><br></pre></td></tr></table></figure>

<p><strong>判断一个对象是否包含某个属性</strong> *</p>
<ul>
<li><p>in 操作符</p>
<ul>
<li><p>通过对象<strong>可以访问</strong>指定的属性时，返回true</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">‘name’ <span class="keyword">in</span> person1;  <span class="comment">// true  </span></span><br><span class="line">‘toString’ <span class="keyword">in</span> person1; <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>hasOwnProperty()</p>
<ul>
<li><p>属性<strong>存在于实例</strong>，返回true，存在于原型或继承的false</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">person1.hasOwnProperty(‘name’); <span class="comment">//true</span></span><br><span class="line">person1.hasOwnProperty(‘toString’); <span class="comment">//false</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="03-原型和in操作符"><a href="#03-原型和in操作符" class="headerlink" title="03 原型和in操作符 *"></a>03 原型和in操作符 *</h3><p>in操作符两种使用方式：</p>
<ul>
<li><p>单独：可以通过对象访问指定的属性时，返回true</p>
</li>
<li><p><strong>for in</strong>循环：返回可以<strong>通过对象访问</strong>且<strong>可以被枚举</strong> 的属性</p>
<ul>
<li>实例属性和原型属性都可以</li>
<li>可枚举就表示属性的[[enumberable]]特性为true</li>
</ul>
</li>
</ul>
<p>获得对象上的所有属性名称（字符串）：</p>
<ul>
<li><strong>Object.keys()</strong> 返回对象<strong>自身</strong>所有可枚举属性</li>
<li>sObject.getOwnPropertyNames() 返回对象<strong>自身</strong>所有属性</li>
<li>Object.getOwnPropertySymbols() ES6新增，返回对象<strong>自身</strong>所有符号属性（见<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol">Symbol</a>）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> keys = <span class="built_in">Object</span>.keys(Person.prototype);</span><br><span class="line"><span class="built_in">console</span>.log(keys); </span><br><span class="line"><span class="comment">// &quot;[name,age,job,sayName]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> keys = <span class="built_in">Object</span>.getOwnPropertyNames(Person.prototype);</span><br><span class="line"><span class="built_in">console</span>.log(keys); </span><br><span class="line"><span class="comment">// &quot;[constructor,name,age,job,sayName]&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="04-枚举顺序"><a href="#04-枚举顺序" class="headerlink" title="04 枚举顺序"></a>04 枚举顺序</h3><p>for in 和 Object.keys() 顺序不确定 见p384</p>
<h2 id="对象迭代"><a href="#对象迭代" class="headerlink" title="对象迭代"></a>对象迭代</h2><p>ES2017新增 迭代对象的静态方法</p>
<ul>
<li><p>Object.keys()</p>
</li>
<li><p>Object.values() ：返回对象属性值的数组</p>
</li>
<li><p>Object.entries() ：返回对象属性键值对的数组</p>
</li>
</ul>
<p>注：非字符串属性会转换为字符串，符号属性会忽略，值为对象时执行浅拷贝</p>
<h3 id="04-原型的问题"><a href="#04-原型的问题" class="headerlink" title="04 原型的问题 *"></a>04 原型的问题 *</h3><p>p390</p>
<p>原型上的属性在所有实例之间共享</p>
<ul>
<li>可以 通过在实例上添加同名属性来简单地遮蔽原型上的属性</li>
<li>但是，对于<strong>包含引用值的属性</strong>，会有问题：<ul>
<li>一个实例修改了这个属性的值，其实是修改了原型上的属性值，会反映到其他所有实例上</li>
</ul>
</li>
<li>不同实例之间应该有属于自己的属性副本，所以开发时不会单独使用原型模式</li>
</ul>
<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>通过原型链实现继承</p>
<h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链 *"></a>原型链 *</h2><p>构造函数、原型 和实例的关系：</p>
<ul>
<li>构造函数都有一个原型对象，<code>Person.prototype</code></li>
<li>原型有一个属性指回 构造函数，<code>Person.prototype.constructor===Person</code></li>
<li>实例有一个内部指针指向原型。<code>person.__proto__===Person.prototype</code></li>
</ul>
<p><strong>原型链</strong>就是：<strong>一个构造函数的原型是是另一个类型的实例</strong>，这样整个原型就有一个内部指针（[[Prototype]]）指向另一个原型，即子类的原型指向父类的原型</p>
<p>ES5的继承写法：将子类的prototype对象重新定义为一个父类的实例（默认所有引用类型都是继承自Object）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">this</span>.property = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">SuperType.prototype.getSuperValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">this</span>.property;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">this</span>.subproperty = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继承SuperType</span></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</span><br><span class="line">SubType.prototype.getSubValue = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	dreturn <span class="built_in">this</span>.subproperty;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> instance = <span class="keyword">new</span> SubType();</span><br><span class="line"><span class="built_in">console</span>.log(instance.getSuperValue()); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/noteImg/JavaScript/ch8/2.png"></p>
<ul>
<li><p><strong><code>A instanceof B</code> 运算符</strong></p>
<ul>
<li><p>检测构造函数的 <code>prototype</code> 属性是否出现在某个实例对象的原型链上</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(instance <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(instance <span class="keyword">instanceof</span> SuperType); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(instance <span class="keyword">instanceof</span> SubType); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong><code>isPrototypeOf()</code> 方法</strong></p>
<ul>
<li><p>检测原型对象和实例的关系</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.isPrototypeOf(instance)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(SuperType.prototype.isPrototypeOf(instance)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(SubType.prototype.isPrototypeOf(instance)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="03-增加方法"><a href="#03-增加方法" class="headerlink" title="03 增加方法"></a>03 增加方法</h3><p>如果子类需要覆盖父类的方法或增加父类没有的方法，那么需要在子类的原型上定义（注意：子类的原型需要先改写成父类的实例再定义方法）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">this</span>.property = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">SuperType.prototype.getSuperValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">this</span>.property;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">this</span>.subproperty = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继承SuperType</span></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</span><br><span class="line"><span class="comment">// 新方法</span></span><br><span class="line">SubType.prototype.getSubValue = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">this</span>.subproperty;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 覆盖已有的方法</span></span><br><span class="line">SubType.prototype.getSuperValue = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="04-原型链的问题"><a href="#04-原型链的问题" class="headerlink" title="04 原型链的问题 *"></a>04 原型链的问题 *</h3><p>原型中包含的引用值会在所有实例之间共享，所以，在使用原型实现继承时</p>
<ul>
<li>子类原型是父类的实例。</li>
<li>父类的实例属性变成了子类的原型属性。<ul>
<li>实例属性本来是每个实例单独拥有的，但是变成原型属性之后就会变成共享状态</li>
</ul>
</li>
<li>属性值为对象时：由于原型属性在所有子类间共享，所以一个实例改变这个值，所有属性也都改变</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">this</span>.colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 继承SuperType</span></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</span><br><span class="line"><span class="keyword">let</span> instance1 = <span class="keyword">new</span> SubType();</span><br><span class="line">instance1.colors.push(<span class="string">&quot;black&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(instance1.colors); </span><br><span class="line"><span class="comment">// &quot;red,blue,green,black&quot;</span></span><br><span class="line"><span class="keyword">let</span> instance2 = <span class="keyword">new</span> SubType();</span><br><span class="line"><span class="built_in">console</span>.log(instance2.colors); </span><br><span class="line"><span class="comment">// &quot;red,blue,green,black&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="盗用构造函数"><a href="#盗用构造函数" class="headerlink" title="盗用构造函数 *"></a>盗用构造函数 *</h2><p>为了解决原型包含引用值导致的继承问题</p>
<p>盗用构造函数&#x2F;对象伪装&#x2F;经典继承</p>
<ul>
<li><p>在子类的构造函数中调用父类的构造函数</p>
</li>
<li><p>使用call()或apply()进行调用</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">this</span>.colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>];</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">	<span class="comment">// 盗用构造函数继承SuperType</span></span><br><span class="line">	SuperType.call(<span class="built_in">this</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> instance1 = <span class="keyword">new</span> SubType(<span class="string">&quot;ins1&quot;</span>);</span><br><span class="line">instance1.colors.push(<span class="string">&quot;black&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(instance1.colors); </span><br><span class="line"><span class="comment">// &quot;red,blue,green,black&quot;</span></span><br><span class="line"><span class="keyword">let</span> instance2 = <span class="keyword">new</span> SubType(<span class="string">&quot;ins2&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(instance2.colors); </span><br><span class="line"><span class="comment">// &quot;red,blue,green&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>优点</strong>：解决了引用值的问题，且可以在子类构造函数向父类构造函数传参</p>
<p><strong>问题</strong>：在构造函数中定义方法，会在每个实例中创建一个新的方法，因此<strong>函数不能重用</strong>，在子类也是创建一个新方法，而不是访问父类原型上定义的方法</p>
<h2 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承 **"></a>组合继承 **</h2><p>组合继承&#x2F;伪经典继承：</p>
<ul>
<li>通过原型链继承原型上的属性和方法：重用方法</li>
<li>通过盗用构造函数继承实例属性：每个实例都有单独的属性</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 实例属性</span></span><br><span class="line">	<span class="built_in">this</span>.name = name;</span><br><span class="line">	<span class="built_in">this</span>.colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 原型方法</span></span><br><span class="line">SuperType.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name, age</span>)</span>&#123;</span><br><span class="line">	<span class="comment">// 继承属性</span></span><br><span class="line">	SuperType.call(<span class="built_in">this</span>, name);</span><br><span class="line">	<span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继承方法</span></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</span><br><span class="line">SubType.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="built_in">this</span>.age);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> instance1 = <span class="keyword">new</span> SubType(<span class="string">&quot;Nicholas&quot;</span>, <span class="number">29</span>);</span><br><span class="line">instance1.colors.push(<span class="string">&quot;black&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(instance1.colors); <span class="comment">// &quot;red,blue,green,black&quot;</span></span><br><span class="line">instance1.sayName(); <span class="comment">// &quot;Nicholas&quot;;</span></span><br><span class="line">instance1.sayAge(); <span class="comment">// 29</span></span><br><span class="line"><span class="keyword">let</span> instance2 = <span class="keyword">new</span> SubType(<span class="string">&quot;Greg&quot;</span>, <span class="number">27</span>);</span><br><span class="line"><span class="built_in">console</span>.log(instance2.colors); <span class="comment">// &quot;red,blue,green&quot;</span></span><br><span class="line">instance2.sayName(); <span class="comment">// &quot;Greg&quot;;</span></span><br><span class="line">instance2.sayAge(); <span class="comment">// 27</span></span><br></pre></td></tr></table></figure>

<h2 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h2><p>适用情况：不需要单独创建构造函数，但仍然需要在对象间共享信息的场合，也就是在一个对象的基础上创建新对象</p>
<p>使用Object.create() 方法，传入参数：作为原型的对象，新增的属性（通过描述符表示）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">	<span class="attr">name</span>: <span class="string">&quot;Nicholas&quot;</span>,</span><br><span class="line">	<span class="attr">friends</span>: [<span class="string">&quot;Shelby&quot;</span>, <span class="string">&quot;Court&quot;</span>, <span class="string">&quot;Van&quot;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 原型式继承</span></span><br><span class="line"><span class="keyword">let</span> anotherPerson = <span class="built_in">Object</span>.create(person, &#123;</span><br><span class="line">	<span class="attr">name</span>: &#123;</span><br><span class="line">		<span class="attr">value</span>: <span class="string">&quot;Greg&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(anotherPerson.name); <span class="comment">// &quot;Greg&quot;</span></span><br></pre></td></tr></table></figure>

<p>优点：不在意类型和构造函数</p>
<p>缺点：和原型模式一样，引用值会共享</p>
<h2 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h2><p>创建一个实现继承的函数，以某种方式增强对象，然后返回这个对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createAnother</span>(<span class="params">original</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> clone = object(original); <span class="comment">// 通过调用函数创建一个新对象</span></span><br><span class="line">    clone.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 以某种方式增强这个对象</span></span><br><span class="line">    	<span class="built_in">console</span>.log(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> clone; <span class="comment">// 返回这个对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用createAnother函数</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">	<span class="attr">name</span>: <span class="string">&quot;Nicholas&quot;</span>,</span><br><span class="line">	<span class="attr">friends</span>: [<span class="string">&quot;Shelby&quot;</span>, <span class="string">&quot;Court&quot;</span>, <span class="string">&quot;Van&quot;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> anotherPerson = createAnother(person);</span><br><span class="line">anotherPerson.sayHi(); <span class="comment">// &quot;hi&quot;</span></span><br></pre></td></tr></table></figure>

<p>优点：不在意类型和构造函数</p>
<p>缺点：与盗用构造函数模式类似，函数难以重用</p>
<h2 id="寄生式组合继承"><a href="#寄生式组合继承" class="headerlink" title="寄生式组合继承 *"></a>寄生式组合继承 *</h2><p>3.3的组合继承存在问题：</p>
<p>子类的原型上会多出一组实例属性，因为：p403</p>
<ul>
<li><p>声明父类构造函数时，定义了实例属性</p>
</li>
<li><p>将子类原型定义成父类实例时，<strong>创建了一组实例属性</strong></p>
</li>
</ul>
<p>寄生式组合继承就是解决上面的问题</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span>(<span class="params">subType, superType</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">let</span> prototype = <span class="built_in">Object</span>.create(superType.prototype); <span class="comment">// 取得父类的原型的副本作为子类的原型</span></span><br><span class="line">	prototype.constructor = subType; <span class="comment">// 重新设置constructor使其指向子类构造函数</span></span><br><span class="line">	subType.prototype = prototype; <span class="comment">// 子类的原型指向副本</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">this</span>.name = name;</span><br><span class="line">	<span class="built_in">this</span>.colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line">SuperType.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> 	<span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">	SuperType.call(<span class="built_in">this</span>, name); <span class="comment">// 继承实例属性</span></span><br><span class="line">	<span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继承方法属性，这里跟3不一样，3用的是子类原型是父类实例</span></span><br><span class="line">inheritPrototype(SubType, SuperType);</span><br><span class="line">SubType.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">this</span>.age);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>优点：是引用类型继承的最佳模式</p>
<h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><p>ES6新加入的语法糖</p>
<h2 id="类定义"><a href="#类定义" class="headerlink" title="类定义"></a>类定义</h2><p>建议类名首字母大写</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 类声明</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 类表达式</span></span><br><span class="line"><span class="keyword">const</span> Animal = <span class="class"><span class="keyword">class</span> </span>&#123;&#125;;</span><br></pre></td></tr></table></figure>

<p>和函数的区别：</p>
<ul>
<li><p>函数声明可以提升，类定义不能</p>
</li>
<li><p>函数受函数作用域限制，类受块作用域限制</p>
</li>
</ul>
<p>类可以包含构造函数方法、实例方法、获取函数、设置函数和静态类方法（方法名前加static只能在类中调用）</p>
<h2 id="类构造函数"><a href="#类构造函数" class="headerlink" title="类构造函数"></a>类构造函数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">    	<span class="built_in">this</span>.name = name || <span class="string">&quot;a&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.name</span><br><span class="line">    <span class="keyword">static</span> sayName ()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">    xhckhck</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person();</span><br><span class="line">p.name</span><br></pre></td></tr></table></figure>

<p>实例化的过程见p408</p>
<p>类构造函数和构造函数的区别：</p>
<ul>
<li>类构造函数一定要new调用！不然报错</li>
<li>普通构造函数不new的话就会默认变成全局对象</li>
</ul>
<h2 id="实例-原型-类成员"><a href="#实例-原型-类成员" class="headerlink" title="实例 原型 类成员"></a>实例 原型 类成员</h2><p>实例成员</p>
<ul>
<li>通过类构造函数的this添加，或直接给创建好的实例添加，每个实例都有唯一成员对象，不会共享</li>
</ul>
<p>原型方法</p>
<ul>
<li>类块中定义的方法，共享，等于属性，跟对象一样可以用字符串，符号，或计算的值为键，setter，getter也一样</li>
</ul>
<p>静态类方法</p>
<ul>
<li>用static关键字作前缀</li>
<li>属于类，this引用类自身，不属于类实例，只能被类调用</li>
</ul>
<p>非函数类型和类成员</p>
<ul>
<li>类块里面不能直接定义类成员，但是类块外面可以用<code>类名.成员名</code>定义</li>
</ul>
<h2 id="继承-1"><a href="#继承-1" class="headerlink" title="继承"></a>继承</h2><h3 id="01-基础"><a href="#01-基础" class="headerlink" title="01 基础"></a>01 基础</h3><p>extends关键字继承任何有[[Construct]]和原型的对象（可以继承类或构造函数，向后兼容）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 类声明</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 类表达式也可以</span></span><br><span class="line"><span class="keyword">let</span> Bar = <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Foo</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="02-构造函数"><a href="#02-构造函数" class="headerlink" title="02 构造函数 *"></a>02 构造函数 *</h3><p>通过super调用父类构造函数和静态方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    	<span class="built_in">this</span>.hasEngine = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> say1 () &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>) </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 先super()调用构造函数，不能在super前this</span></span><br><span class="line">        <span class="built_in">super</span>(); <span class="comment">// 相当于super.constructor()</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span> <span class="keyword">instanceof</span> Vehicle); <span class="comment">// true</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// Bus &#123; hasEngine: true &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用静态方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="title">say1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>.identify()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> Bus();</span><br></pre></td></tr></table></figure>

<h3 id="03-抽象基类"><a href="#03-抽象基类" class="headerlink" title="03 抽象基类"></a>03 抽象基类</h3><p>可以被其他类继承，但本身不会被实例化。虚基类？</p>
<ul>
<li><p>new.target保存通过new关键字调用的类 或函数。通过在实例化时检测new.target是不是抽象基类，可以阻止对抽象基类的实例化</p>
</li>
<li><p>通过在抽象基类构造函数中进行检查，可以要求派生类必须 定义某个方法。</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 抽象基类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">new</span>.target === Vehicle) &#123;</span><br><span class="line">        	<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Vehicle cannot be directly instantiated&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.foo) &#123;</span><br><span class="line">        	<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Inheriting class must define foo()&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;success!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 派生类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="title">foo</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 派生类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Van</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">new</span> Bus(); <span class="comment">// success!</span></span><br><span class="line"><span class="keyword">new</span> Van(); <span class="comment">// Error: Inheriting class must define foo()</span></span><br></pre></td></tr></table></figure>

<h3 id="05-类混入"><a href="#05-类混入" class="headerlink" title="05 类混入"></a>05 类混入</h3><p>多类继承：p425</p>
<ul>
<li>在一个表达式中连缀多个混入元素，这个 表达式最终会解析为一个可以被继承的类。</li>
<li>例：想要P组合ABC：B基础A，C继承B，然后P继承C</li>
<li>已抛弃，用组合模式（把方法提取到独立的类和辅助对象中， 然后把它们组合起来，但不使用继承）</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="理解原型"><a href="#理解原型" class="headerlink" title="理解原型"></a>理解原型</h2><p><strong>构造函数、原型对象和实例</strong></p>
<ul>
<li>实例与构造函数原型之间有直接的联系，但实例与构造函数之间没有。</li>
</ul>
<p>1）<strong>构造函数创建</strong>之后，自动创建一个原型对象属性prototype，指向原型对象</p>
<ul>
<li>原型对象自动获得一个constructor属性，指向与之关联的构造函数</li>
<li>在自定义构造函数时，原型对象默认只会获得constructor属性， 其他的所有方法都继承自Object。</li>
</ul>
<p>2）每次调用构造函数<strong>创建一个新实例</strong></p>
<ul>
<li>这个实例的内部**[[Prototype]]指针<strong>就会被赋值为</strong>构造函数的 原型对象**</li>
<li>脚本中没有访问这个**[[Prototype]]<strong>特性的标准方式， 但Firefox、Safari和Chrome会在每个对象上暴露</strong><code>__proto__</code>属性<strong>，通 过这个属性可以</strong>访问对象的原型**</li>
</ul>
<p><strong>在通过对象访问属性</strong>：按照属性名称开始搜索。</p>
<ul>
<li>先搜索对象实例，发现属性则返回</li>
<li>未发现，则沿着指针进入原型对象，然后在原型对象上找到属性后，再返回对应的值。</li>
</ul>
<p><strong>原型的问题</strong>：原型上的属性在所有实例之间共享</p>
<ul>
<li>可以 通过在实例上添加同名属性来简单地遮蔽原型上的属性</li>
<li>但是，对于包含<strong>引用值</strong>的属性，会有问题：<ul>
<li>一个实例修改了这个属性的值，其实是修改了原型上的属性值，会反映到其他所有实例上</li>
</ul>
</li>
<li>不同实例之间应该有属于自己的属性副本，所以开发时不会单独使用原型模式</li>
</ul>
<h2 id="理解原型链"><a href="#理解原型链" class="headerlink" title="理解原型链"></a>理解原型链</h2><p>构造函数、原型 和实例的关系：</p>
<ul>
<li>构造函数都有一个原型对象，<code>Person.prototype</code></li>
<li>原型有一个属性指回 构造函数，<code>Person.prototype.constructor===Person</code></li>
<li>实例有一个内部指针指向原型。<code>person.__proto__===Person.prototype</code></li>
</ul>
<p><strong>原型链</strong>就是：一个构造函数的原型是是另一个类型的实例，这样整个原型就有一个内部指针（[[Prototype]]）指向另一个原型，即子类的原型指向父类的原型</p>
<p><strong>原型链的问题</strong>：原型中包含的引用值会在所有实例之间共享，所以，在使用原型实现继承时</p>
<ul>
<li>子类原型是父类的实例。</li>
<li>父类的实例属性变成了子类的原型属性。<ul>
<li>实例属性本来是每个实例单独拥有的，但是变成原型属性之后就会变成共享状态</li>
</ul>
</li>
<li>属性值为对象时：由于原型属性在所有子类间共享，所以一个实例改变这个值，所有属性也都改变</li>
</ul>
<h2 id="继承的方法"><a href="#继承的方法" class="headerlink" title="继承的方法"></a>继承的方法</h2><ol>
<li><strong>原型链</strong>继承：包含引用值的属性会共享</li>
<li><strong>盗用构造函数</strong>继承：无法重用方法</li>
<li>原型链+盗用构造函数<strong>组合继承</strong>：1+2 使用最多</li>
<li>原型式继承：没有构造函数，缺点类似1</li>
<li>寄生式继承：没有构造函数，缺点类似2</li>
<li><strong>寄生式组合</strong>继承：2+4，最有效</li>
<li><strong>类</strong>继承，好</li>
</ol>
<h3 id="原型链-1"><a href="#原型链-1" class="headerlink" title="原型链"></a><strong>原型链</strong></h3><p>优点：共享原型方法</p>
<p>缺点：原型对象是引用值时，共享引用，改一个实例就全改</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 原型链</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Super</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.val=<span class="number">1</span> <span class="comment">// 实例属性</span></span><br><span class="line">&#125;</span><br><span class="line">Super.prototype.arr=[] <span class="comment">// 原型属性</span></span><br><span class="line">Super.prototype.getArr=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 原型方法</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.arr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params">val,str</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.str=str</span><br><span class="line">&#125;</span><br><span class="line">Sub.prototype=<span class="keyword">new</span> Super(<span class="built_in">this</span>.val) <span class="comment">// 继承原型</span></span><br><span class="line">Sub.prototype.getStr=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.str)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s=<span class="keyword">new</span> Sub(<span class="number">1</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> t=<span class="keyword">new</span> Sub(<span class="number">2</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(s.arr===t.arr) <span class="comment">// true 共享原型对象</span></span><br><span class="line"><span class="built_in">console</span>.log(s.getArr===t.getArr) <span class="comment">// true 共享原型方法</span></span><br></pre></td></tr></table></figure>

<h3 id="盗用构造函数-1"><a href="#盗用构造函数-1" class="headerlink" title="盗用构造函数"></a><strong>盗用构造函数</strong></h3><p>优点：实例有各自的属性值</p>
<p>缺点：方法只能定义在构造函数里，难以重用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. 盗用构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Super</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.val=val <span class="comment">// 实例属性</span></span><br><span class="line">    <span class="built_in">this</span>.arr=[]</span><br><span class="line">    <span class="built_in">this</span>.getArr=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 实例方法</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.arr)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params">val, str</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 盗用构造函数继承原型，可以传值了</span></span><br><span class="line">    Super.call(<span class="built_in">this</span>, val)</span><br><span class="line">    <span class="built_in">this</span>.str=str</span><br><span class="line">    <span class="built_in">this</span>.getStr=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    	<span class="built_in">console</span>.log(<span class="built_in">this</span>.str)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s=<span class="keyword">new</span> Sub(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">let</span> t=<span class="keyword">new</span> Sub(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(s.arr===t.arr) <span class="comment">// false 各自的实例对象</span></span><br><span class="line"><span class="built_in">console</span>.log(s.getArr===t.getArr) <span class="comment">// false 不共享方法</span></span><br></pre></td></tr></table></figure>

<h3 id="组合继承-1"><a href="#组合继承-1" class="headerlink" title="组合继承"></a><strong>组合继承</strong></h3><p>优点：实例有各自的属性值，不会干扰，方法也可以重用</p>
<p>缺点：子类的原型上会多出一组实例属性，因为：p403</p>
<ul>
<li><p>声明父类构造函数时，定义了实例属性</p>
</li>
<li><p>将子类原型定义成父类实例时，<strong>创建了一组实例属性</strong></p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3. 组合继承</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Super</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.val=val <span class="comment">// 实例属性</span></span><br><span class="line">    <span class="built_in">this</span>.arr=[]</span><br><span class="line">&#125;</span><br><span class="line">Super.prototype.getArr=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 对象方法</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.arr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params">val,str</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 盗用构造函数继承原型，可以传值了</span></span><br><span class="line">    Super.call(<span class="built_in">this</span>, val) </span><br><span class="line">    <span class="built_in">this</span>.str=str</span><br><span class="line">&#125;</span><br><span class="line">Sub.prototype=<span class="keyword">new</span> Super()</span><br><span class="line">Sub.prototype.getStr=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.str)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s=<span class="keyword">new</span> Sub(<span class="number">1</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> t=<span class="keyword">new</span> Sub(<span class="number">2</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(s.arr===t.arr) <span class="comment">// false 各自的实例对象</span></span><br><span class="line"><span class="built_in">console</span>.log(s.getArr===t.getArr) <span class="comment">// true 共享原型方法</span></span><br></pre></td></tr></table></figure>

<h3 id="寄生式组合"><a href="#寄生式组合" class="headerlink" title="寄生式组合"></a><strong>寄生式组合</strong></h3><p>优点：解决了普通组合式的问题</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 6. 寄生式组合继承</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototy</span>(<span class="params">subType,superType</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 浅复制父类的原型</span></span><br><span class="line">    <span class="keyword">let</span> prototype=<span class="built_in">Object</span>.create(subType.prototype)</span><br><span class="line">    <span class="comment">// 修正constructor</span></span><br><span class="line">    prototype.constructor=subType</span><br><span class="line">    <span class="comment">// 让子类的原型指向父类的原型</span></span><br><span class="line">    subType.prototype=prototype</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Super</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.val=val <span class="comment">// 实例属性</span></span><br><span class="line">    <span class="built_in">this</span>.arr=[]</span><br><span class="line">&#125;</span><br><span class="line">Super.prototype.getArr=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 对象方法</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.arr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sub</span>(<span class="params">val,str</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 盗用构造函数继承原型，可以传值了</span></span><br><span class="line">    Super.call(<span class="built_in">this</span>, val) </span><br><span class="line">    <span class="built_in">this</span>.str=str</span><br><span class="line">&#125;</span><br><span class="line">inheritPrototy(Sub,Super)</span><br><span class="line">Sub.prototype.getStr=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.str)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s=<span class="keyword">new</span> Sub(<span class="number">1</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> t=<span class="keyword">new</span> Sub(<span class="number">2</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(s.arr===t.arr) <span class="comment">// false 不共享实例属性</span></span><br><span class="line"><span class="built_in">console</span>.log(s.getArr===t.getArr) <span class="comment">// true 共享原型方法</span></span><br></pre></td></tr></table></figure>

<h3 id="类-1"><a href="#类-1" class="headerlink" title="类"></a>类</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Super</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.val=val</span><br><span class="line">        <span class="built_in">this</span>.arr=[]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">getArr</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.arr)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Super</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">val,str</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(val)</span><br><span class="line">        <span class="built_in">this</span>.str=str</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">getStr</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.str)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s=<span class="keyword">new</span> Sub(<span class="number">1</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> t=<span class="keyword">new</span> Sub(<span class="number">2</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(s.arr===t.arr) <span class="comment">// false 不共享实例属性</span></span><br><span class="line"><span class="built_in">console</span>.log(s.getArr===t.getArr) <span class="comment">// true 共享原型方法</span></span><br></pre></td></tr></table></figure>

<h2 id="区别：prototype和-proto"><a href="#区别：prototype和-proto" class="headerlink" title="区别：prototype和__proto__"></a>区别：<code>prototype</code>和<code>__proto__</code></h2><h3 id="构造函数方法"><a href="#构造函数方法" class="headerlink" title="构造函数方法"></a>构造函数方法</h3><p>每一个构造函数有一个prototype指针，指向构造函数声明时自动创建的原型对象</p>
<p>只要是对象就会有一个[[Prototype]]内部属性，这个属性在chrome浏览器中可以被<code>__proto__</code>属性暴露出来</p>
<ul>
<li>new出来的实例对象的<code>__proto__</code>指向<strong>构造函数</strong>的<strong>原型对象</strong></li>
<li>构造函数的<code>__proto__</code>指向<strong>Function</strong>的<strong>原型对象</strong>，因为本质上它是一个函数</li>
<li>任何原型对象的<code>__proto__</code>指向<strong>Object</strong>的<strong>原型对象</strong>，因为本质上它是一个对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> p=<span class="keyword">new</span> Person()</span><br><span class="line">Person.prototype===p.__proto__ <span class="comment">// true</span></span><br><span class="line">Person.__proto__===<span class="built_in">Function</span>.prototype <span class="comment">// true</span></span><br><span class="line">Person.prototype.__proto__===<span class="built_in">Object</span>.prototype <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="构造函数继承"><a href="#构造函数继承" class="headerlink" title="构造函数继承"></a>构造函数继承</h3><p>原型链继承时，本质上是把子类的原型指向父类的实例，因为父类的实例的<code>__proto__</code>指针能指向父类原型</p>
<ul>
<li><p>子类的原型上的<code>__proto__</code>指向父类原型</p>
</li>
<li><p>子类实例上的<code>__proto__</code>指向子类原型，本质上是父类的实例</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Adult</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">Adult.prototype=<span class="keyword">new</span> Person()</span><br><span class="line"><span class="keyword">let</span> a=<span class="keyword">new</span> Adult()</span><br><span class="line">Adult.prototype.__proto__===Person.prototype <span class="comment">// true</span></span><br><span class="line">Adult.prototype===a.__proto__ <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="类继承"><a href="#类继承" class="headerlink" title="类继承"></a>类继承</h3><p>使用class声明类时<code>prototype</code>和<code>__proto__</code>的指向跟构造函数时<strong>完全一样</strong></p>
<ul>
<li>new出来的实例对象的<code>__proto__</code>指向<strong>构造函数</strong>的<strong>原型对象</strong></li>
<li>构造函数的<code>__proto__</code>指向<strong>Function</strong>的<strong>原型对象</strong>，因为本质上它是一个函数</li>
<li>类的原型对象的<code>__proto__</code>指向<strong>Object</strong>的<strong>原型对象</strong>，因为本质上它是一个对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> p=<span class="keyword">new</span> Person()</span><br><span class="line">Person.prototype===p.__proto__ <span class="comment">// true</span></span><br><span class="line">Person.__proto__===<span class="built_in">Function</span>.prototype <span class="comment">// true</span></span><br><span class="line">Person.prototype.__proto__===<span class="built_in">Object</span>.prototype <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<ul>
<li>子类的原型上的<code>__proto__</code>指向父类原型</li>
<li>子类实例上的<code>__proto__</code>指向子类原型</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adult</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> a=<span class="keyword">new</span> Adult()</span><br><span class="line">Adult.prototype.__proto__===Person.prototype <span class="comment">// true</span></span><br><span class="line">Adult.prototype===a.__proto__ <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><em>注意，*<em>类的成员方法就是定义在类的原型上的</em></em></p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>JavaScript笔记</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>对象</tag>
        <tag>继承</tag>
      </tags>
  </entry>
  <entry>
    <title>计网笔记：理解HTTP1——请求方法与状态码</title>
    <url>/2022/04/13/computerNetwork/HTTP1_method/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>重点掌握：</p>
<ul>
<li>请求方法：GET POST PUT及区别</li>
<li>状态码：200 301 302 304 404 503 504</li>
</ul>
<span id="more"></span>

<h1 id="HTTP协议介绍"><a href="#HTTP协议介绍" class="headerlink" title="HTTP协议介绍"></a>HTTP协议介绍</h1><p>HyperText Transfer Protocol 超文本传输协议</p>
<p>基于TCP&#x2F;IP协议的应用层协议</p>
<p>用于定义WEB浏览器与WEB服务器之间交换数据的过程</p>
<h1 id="请求方法-8种"><a href="#请求方法-8种" class="headerlink" title="请求方法 8种 *"></a>请求方法 8种 *</h1><p>HTTP1.0: GET POST HEAD</p>
<p>HTTP1.1: + OPTIONS、PUT、DELETE、TRACE 和 CONNECT </p>
<p>1、OPTIONS</p>
<p>返回服务器针对特定资源所支持的<strong>HTTP请求方法</strong>，也可以利用向web服务器发送‘<em>’的请求来*<em>测试服务器的功能性</em></em></p>
<p>2、<strong>HEAD</strong></p>
<p>向服务器索与GET请求相一致的响应，只不过<strong>响应体将不会被返回</strong>。这一方法可以再不必传输整个响应内容的情况下，就可以<strong>获取包含在响应小消息头中的元信息</strong>。</p>
<p>3、<strong>GET</strong></p>
<p>向特定的资源发出请求。注意：GET方法不应当被用于产生“副作用”的操作中，例如在Web Application中，其中一个原因是GET可能会被网络蜘蛛等随意访问。</p>
<p>4、<strong>POST</strong></p>
<p>向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和&#x2F;或已有资源的修改。 </p>
<p>5、PUT</p>
<p>向指定资源位置上传其最新内容，<code>PUT</code> 与 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST"><code>POST</code></a> 方法的区别在于，PUT方法是幂等的：<strong>调用一次与连续调用多次是等价的</strong>（即没有副作用），而连续调用多次POST方法可能会有副作用，比如将一个订单重复提交多次。</p>
<ul>
<li>没有资源，则创建，返回201</li>
<li>有资源</li>
</ul>
<p>6、DELETE</p>
<p>请求服务器删除Request-URL所标识的资源</p>
<p>7、TRACE</p>
<p>回显服务器收到的请求，主要用于测试或诊断</p>
<p>8、CONNECT</p>
<p>HTTP&#x2F;1.1协议中预留给能够将连接改为管道方式的代理服务器。</p>
<h3 id="GET和POST请求的区别"><a href="#GET和POST请求的区别" class="headerlink" title="GET和POST请求的区别"></a>GET和POST请求的区别</h3><p>Post 和 Get 是 HTTP 请求的两种方法</p>
<ul>
<li><strong>应用场景：</strong><ul>
<li>幂等性：指一次和多次请求某一个资源应该具有同样的副作用 <a href="https://blog.csdn.net/kepengs/article/details/82706721">参考</a></li>
<li>Get 请求是一个<strong>幂等</strong>的请求，一般 Get 请求用于对服务器资源不会产生影响的场景，比如说请求一个网页的资源。</li>
<li>Post <strong>不</strong>是一个<strong>幂等</strong>的请求，一般用于对服务器资源会产生影响的情景，比如注册用户这一类的操作。</li>
</ul>
</li>
<li><strong>是否缓存：</strong>因为两者应用场景不同，浏览器一般会对 Get 请求缓存，但很少对 Post 请求缓存。<ul>
<li>Get会<strong>缓存</strong></li>
<li>Post不会缓存</li>
</ul>
</li>
<li><strong>发送的报文格式：</strong><ul>
<li>Get 请求的报文中<strong>请求体为空</strong></li>
<li>Post 请求的报文中请求体一般为向服务器发送的数据。</li>
</ul>
</li>
<li><strong>安全性：</strong><ul>
<li>历史记录：<ul>
<li>Get请求保存在浏览器历史记录，且可以将url的payload显示在地址栏</li>
<li>Post请求不会存在历史记录</li>
</ul>
</li>
<li>明文传输：<ul>
<li>Get和Post本质上都是明文传输，不安全，传密码等敏感信息还是要用HTTPS</li>
</ul>
</li>
<li>黑客攻击：<ul>
<li>Get请求容易产生CSRF攻击，而Post被CSRF攻击的成本更高</li>
</ul>
</li>
</ul>
</li>
<li><strong>请求长度：</strong><ul>
<li>浏览器由于对 url 长度的限制，所以会影响 get 请求发送数据时的长度。这个限制是浏览器规定的，并不是 RFC 规定的。</li>
</ul>
</li>
<li><strong>参数类型：</strong><ul>
<li>post 的参数传递支持更多的数据类型。</li>
</ul>
</li>
</ul>
<h3 id="POST和PUT请求的区别"><a href="#POST和PUT请求的区别" class="headerlink" title="POST和PUT请求的区别"></a>POST和PUT请求的区别</h3><table>
<thead>
<tr>
<th>区别</th>
<th>POST</th>
<th>PUT</th>
</tr>
</thead>
<tbody><tr>
<td>幂等</td>
<td>不幂等</td>
<td>是<strong>幂等</strong>的，执行多次同样的PUT请求，结果是一样的</td>
</tr>
<tr>
<td>指定资源</td>
<td>不需指定</td>
<td>需要指定资源对象</td>
</tr>
<tr>
<td>创建资源</td>
<td>自己不创建资源，服务器来创建</td>
<td>指定的资源不存在，则创建资源</td>
</tr>
<tr>
<td>修改资源</td>
<td>对已经存在的资源新增内容</td>
<td>整个替换指定的资源为新的值</td>
</tr>
</tbody></table>
<ul>
<li>PUT请求是向服务器端发送数据，从而修改数据的内容，但是不会增加数据的种类等，也就是说无论进行多少次PUT操作，其结果并没有不同。（可以理解为时<strong>更新数据</strong>）</li>
<li>POST请求是向服务器端发送数据，该请求会改变数据的种类等资源，它会创建新的内容。（可以理解为是<strong>创建数据</strong>）</li>
</ul>
<h2 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><table>
<thead>
<tr>
<th align="left">分类</th>
<th align="left">分类描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1**</td>
<td align="left">信息，服务器收到请求，需要请求者继续执行操作</td>
</tr>
<tr>
<td align="left">2**</td>
<td align="left">成功，操作被成功接收并处理</td>
</tr>
<tr>
<td align="left">3**</td>
<td align="left">重定向，需要进一步的操作以完成请求</td>
</tr>
<tr>
<td align="left">4**</td>
<td align="left">客户端错误，请求包含语法错误或无法完成请求</td>
</tr>
<tr>
<td align="left">5**</td>
<td align="left">服务器错误，服务器在处理请求的过程中发生了错误</td>
</tr>
</tbody></table>
<h3 id="精简版"><a href="#精简版" class="headerlink" title="精简版 *"></a>精简版 *</h3><p>1xx -&gt; 信息性状态码</p>
<p>2xx -&gt; 请求成功</p>
<ol>
<li><strong>200</strong> -&gt; 网络请求成</li>
<li>204 -&gt; 请求成功，但是服务没有内容返回</li>
<li>206 -&gt; 请求成功，服务器返回指定范围内的内容</li>
</ol>
<p>3xx -&gt; 重定向</p>
<ol>
<li><strong>301</strong> -&gt; 永久重定向（网站域名永久更改，有利于搜索引擎优化）</li>
<li><strong>302</strong> -&gt; 临时重定向（活动页面，将首页临时重定向到活动页）</li>
<li>303 -&gt; 和301一样，GET、POST</li>
<li><strong>304</strong> -&gt; 资源未修改，用于缓存</li>
<li>307 -&gt; 和302一样，GET</li>
</ol>
<p>4xx -&gt; 资源问题</p>
<ol>
<li>400 -&gt; 请求报文语法错误</li>
<li>401 -&gt; 需要进行授权</li>
<li>403 -&gt; 没有权限访问资源</li>
<li><strong>404</strong> -&gt; 没有找到对应资源</li>
</ol>
<p>5xx -&gt; 服务器问题</p>
<ol>
<li>500 -&gt; 一般为后端发生错误，代码错误等</li>
<li>502 -&gt; Bad Gateway 网关或代理服务器收到<strong>无效响应</strong></li>
<li><strong>503</strong> -&gt; 服务器<strong>繁忙或者停机维护</strong>等情况</li>
<li><strong>504</strong> -&gt; Bad Gateway timeout，网关或代理服务器收到<strong>超时</strong>未获取响应</li>
</ol>
<h3 id="完整版"><a href="#完整版" class="headerlink" title="完整版"></a>完整版</h3><table>
<thead>
<tr>
<th align="left">状态码</th>
<th align="left">状态码英文名称</th>
<th align="left">中文描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">100</td>
<td align="left">Continue</td>
<td align="left">继续。客户端应继续其请求</td>
</tr>
<tr>
<td align="left">101</td>
<td align="left">Switching Protocols</td>
<td align="left">切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议</td>
</tr>
<tr>
<td align="left"><strong>200</strong></td>
<td align="left"><strong>OK</strong></td>
<td align="left"><strong>请求成功。一般用于GET与POST请求</strong></td>
</tr>
<tr>
<td align="left">201</td>
<td align="left">Created</td>
<td align="left">已创建。成功请求并创建了新的资源</td>
</tr>
<tr>
<td align="left">202</td>
<td align="left">Accepted</td>
<td align="left">已接受。已经接受请求，但未处理完成</td>
</tr>
<tr>
<td align="left">203</td>
<td align="left">Non-Authoritative Information</td>
<td align="left">非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本</td>
</tr>
<tr>
<td align="left"><strong>204</strong></td>
<td align="left"><strong>No Content</strong></td>
<td align="left"><strong>无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档</strong></td>
</tr>
<tr>
<td align="left">205</td>
<td align="left">Reset Content</td>
<td align="left">重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</td>
</tr>
<tr>
<td align="left"><strong>206</strong></td>
<td align="left"><strong>Partial Content</strong></td>
<td align="left"><strong>部分内容。服务器成功处理了部分GET请求</strong></td>
</tr>
<tr>
<td align="left">300</td>
<td align="left">Multiple Choices</td>
<td align="left">多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</td>
</tr>
<tr>
<td align="left"><strong>301</strong></td>
<td align="left"><strong>Moved Permanently</strong></td>
<td align="left"><strong>永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</strong></td>
</tr>
<tr>
<td align="left"><strong>302</strong></td>
<td align="left"><strong>Found</strong></td>
<td align="left"><strong>临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</strong></td>
</tr>
<tr>
<td align="left"><strong>303</strong></td>
<td align="left"><strong>See Other</strong></td>
<td align="left">查看其它地址。与302类似。使用<strong>GET和POST</strong>请求查看</td>
</tr>
<tr>
<td align="left"><strong>304</strong></td>
<td align="left">&#x3D;&#x3D;<strong>Not Modified</strong>&#x3D;&#x3D;</td>
<td align="left"><strong>未修改</strong>。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</td>
</tr>
<tr>
<td align="left">305</td>
<td align="left">Use Proxy</td>
<td align="left">使用代理。所请求的资源必须通过代理访问</td>
</tr>
<tr>
<td align="left">306</td>
<td align="left">Unused</td>
<td align="left">已经被废弃的HTTP状态码</td>
</tr>
<tr>
<td align="left"><strong>307</strong></td>
<td align="left"><strong>Temporary Redirect</strong></td>
<td align="left">临时重定向。与302类似。只能使用<strong>GET</strong>请求重定向</td>
</tr>
<tr>
<td align="left"><strong>400</strong></td>
<td align="left"><strong>Bad Request</strong></td>
<td align="left"><strong>客户端请求的语法错误，服务器无法理解</strong></td>
</tr>
<tr>
<td align="left"><strong>401</strong></td>
<td align="left"><strong>Unauthorized</strong></td>
<td align="left"><strong>请求要求用户的身份认证</strong></td>
</tr>
<tr>
<td align="left">402</td>
<td align="left">Payment Required</td>
<td align="left">保留，将来使用</td>
</tr>
<tr>
<td align="left"><strong>403</strong></td>
<td align="left"><strong>Forbidden</strong></td>
<td align="left"><strong>服务器理解请求客户端的请求，但是拒绝执行此请求</strong></td>
</tr>
<tr>
<td align="left"><strong>404</strong></td>
<td align="left"><strong>Not Found</strong></td>
<td align="left"><strong>服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面</strong></td>
</tr>
<tr>
<td align="left">405</td>
<td align="left">Method Not Allowed</td>
<td align="left">客户端请求中的方法被禁止</td>
</tr>
<tr>
<td align="left">406</td>
<td align="left">Not Acceptable</td>
<td align="left">服务器无法根据客户端请求的内容特性完成请求</td>
</tr>
<tr>
<td align="left">407</td>
<td align="left">Proxy Authentication Required</td>
<td align="left">请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权</td>
</tr>
<tr>
<td align="left">408</td>
<td align="left">Request Time-out</td>
<td align="left">服务器等待客户端发送的请求时间过长，超时</td>
</tr>
<tr>
<td align="left">409</td>
<td align="left">Conflict</td>
<td align="left">服务器完成客户端的 PUT 请求时可能返回此代码，服务器处理请求时发生了冲突</td>
</tr>
<tr>
<td align="left">410</td>
<td align="left">Gone</td>
<td align="left">客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置</td>
</tr>
<tr>
<td align="left">411</td>
<td align="left">Length Required</td>
<td align="left">服务器无法处理客户端发送的不带Content-Length的请求信息</td>
</tr>
<tr>
<td align="left">412</td>
<td align="left">Precondition Failed</td>
<td align="left">客户端请求信息的先决条件错误</td>
</tr>
<tr>
<td align="left">413</td>
<td align="left">Request Entity Too Large</td>
<td align="left">由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息</td>
</tr>
<tr>
<td align="left">414</td>
<td align="left">Request-URI Too Large</td>
<td align="left">请求的URI过长（URI通常为网址），服务器无法处理</td>
</tr>
<tr>
<td align="left">415</td>
<td align="left">Unsupported Media Type</td>
<td align="left">服务器无法处理请求附带的媒体格式</td>
</tr>
<tr>
<td align="left">416</td>
<td align="left">Requested range not satisfiable</td>
<td align="left">客户端请求的范围无效</td>
</tr>
<tr>
<td align="left">417</td>
<td align="left">Expectation Failed</td>
<td align="left">服务器无法满足Expect的请求头信息</td>
</tr>
<tr>
<td align="left"><strong>500</strong></td>
<td align="left"><strong>Internal Server Error</strong></td>
<td align="left"><strong>服务器内部错误，无法完成请求</strong></td>
</tr>
<tr>
<td align="left">501</td>
<td align="left">Not Implemented</td>
<td align="left">服务器不支持请求的功能，无法完成请求</td>
</tr>
<tr>
<td align="left"><strong>502</strong></td>
<td align="left"><strong>Bad Gateway</strong></td>
<td align="left"><strong>作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</strong></td>
</tr>
<tr>
<td align="left"><strong>503</strong></td>
<td align="left"><strong>Service Unavailable</strong></td>
<td align="left">由于<strong>超载或系统维护</strong>，<strong>服务器暂时的无法处理客户端的请求</strong>。延时的长度可包含在服务器的Retry-After头信息中</td>
</tr>
<tr>
<td align="left"><strong>504</strong></td>
<td align="left"><strong>Gateway Time-out</strong></td>
<td align="left"><strong>充当网关或代理的服务器，未及时从远端服务器获取请求</strong></td>
</tr>
<tr>
<td align="left">505</td>
<td align="left">HTTP Version not supported</td>
<td align="left">服务器不支持请求的HTTP协议的版本，无法完成处理</td>
</tr>
</tbody></table>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>前端工程师进阶系列</category>
        <category>计算机网络笔记</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>计网笔记：理解HTTPS</title>
    <url>/2022/04/09/computerNetwork/HTTPS/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>参考视频：<a href="https://www.bilibili.com/video/BV1w4411m7GL">https://www.bilibili.com/video/BV1w4411m7GL</a></p>
<p>HTTP请求过程中，客户端与服务器之间没有任何身份确认的过程，数据全部明文传输，所以很容易遭到黑客的攻击</p>
<h1 id="TLS-x2F-SSL加密算法"><a href="#TLS-x2F-SSL加密算法" class="headerlink" title="TLS&#x2F;SSL加密算法"></a>TLS&#x2F;SSL加密算法</h1><p>HTTPS就是HTTP+TLS&#x2F;SSL</p>
<p><strong>TLS&#x2F;SSL</strong>全称<strong>安全传输层协议</strong>（Transport Layer Security）, 是介于TCP和HTTP之间的一层安全协议，不影响原有的TCP协议和HTTP协议，所以使用HTTPS基本上不需要对HTTP页面进行太多的改造。</p>
<p>TLS&#x2F;SSL的功能实现主要依赖三类基本算法：<strong>散列函数hash</strong>、<strong>对称加密</strong>、<strong>非对称加密</strong>。</p>
<span id="more"></span>

<p>这三类算法的作用如下：</p>
<ul>
<li>基于<strong>散列函数</strong>验证信息的<strong>完整性</strong>（数据有没有被篡改）</li>
<li><strong>非对称</strong>加密实现<strong>身份认证</strong>（证明公钥不是伪造的）和<strong>秘钥协商</strong>（获取对称加密的密钥）</li>
<li><strong>对称</strong>加密算法采用协商的秘钥对数据加密</li>
</ul>
<h2 id="散列函数hash"><a href="#散列函数hash" class="headerlink" title="散列函数hash"></a>散列函数hash</h2><p>常见的散列函数有MD5、SHA1、SHA256。该函数的特点：</p>
<ul>
<li>单向<strong>不可逆</strong>，对输入数据非常敏感，输出的<strong>长度固定</strong></li>
<li>任何数据的修改都会改变散列函数的结果，可以用于<strong>防止信息篡改并验证数据的完整性</strong>。<ul>
<li>由于传输是<strong>明文传输</strong>，中间人可以修改信息后重新计算信息的摘要，所以需要对传输的信息和信息摘要进行加密。</li>
</ul>
</li>
</ul>
<h2 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h2><p>对称加密的方法是，双方使用<strong>同一个秘钥</strong>对数据进行加密和解密。</p>
<p>常见的对称加密算法有AES-CBC、DES、3DES、AES-GCM等。相同的秘钥可以用于信息的加密和解密。掌握秘钥才能获取信息，防止信息窃听，其通讯方式是<strong>一对一</strong>。</p>
<p><strong>问题</strong>：</p>
<ul>
<li>就是如何保证<strong>秘钥传输</strong>的安全性<ul>
<li>因为秘钥还是会通过网络传输的，一旦秘钥被其他人获取到，那么整个加密过程就毫无作用了</li>
</ul>
</li>
<li>服务器和N个客户端通信，需要维持N个密钥<ul>
<li>如果所有客户端公用一个密钥，黑客就可以伪造成客户端获取密钥来解密其他客户端获得的信息</li>
<li>不同的客户端、服务器数量庞大，所以双方都需要维护大量的密钥，维护成本很高</li>
<li>因每个客户端、服务器的安全级别不同，密钥极易泄露</li>
</ul>
</li>
</ul>
<h2 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h2><p>常见的非对称加密算法有RSA、ECC、DH等。</p>
<p>秘钥成对出现，一般称为公钥（公开）和私钥（保密）。</p>
<ul>
<li>公钥加密的信息只有私钥可以解开</li>
<li>私钥加密的信息只能公钥解开</li>
<li>服务器持有公钥和私钥</li>
<li>客户端持有公钥</li>
</ul>
<p><strong>特点：</strong></p>
<ul>
<li>非对称加密的特点就是信息<strong>一对多</strong>，服务器只需要维持一个私钥就可以和多个客户端进行通信</li>
<li>计算复杂，加密的<strong>速度慢</strong></li>
</ul>
<p><strong>问题</strong>：</p>
<ul>
<li>客户端发到服务器的信息，公钥加密，私钥解密，私钥只有服务器有，所以绝对安全</li>
<li>服务器发到客户端的信息，私钥加密，公钥解密，黑客能拿到公钥！危险！</li>
</ul>
<h1 id="对称-非对称加密"><a href="#对称-非对称加密" class="headerlink" title="对称+非对称加密"></a>对称+非对称加密</h1><p>结合对称加密和非对称加密的优点提出的方式：</p>
<ul>
<li>非对称加密：保证客户端向服务器发送的信息（公钥加密，私钥解密），绝对安全</li>
<li>对称加密：只有客户端和服务器拥有密钥时，绝对安全</li>
</ul>
<p>如图：</p>
<ol>
<li>客户端向服务器索要公钥，服务器发送公钥</li>
<li>客户端生成随机数1，用公钥加密，发给服务器，安全，因为只能用私钥解密</li>
<li>服务器用私钥解密，获取随机数1</li>
<li>客户端和服务器都有随机数1了，之后的通信都使用这个数进行对称加密</li>
</ol>
<img src="https://luryblog.oss-cn-beijing.aliyuncs.com/noteImg/HTTPS/image-20220409174219331-16494973405802.png" alt="image-20220409174219331" style="zoom:50%;" />

<h2 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h2><p>以上方法看似很安全，但是无法防范中间人攻击</p>
<p>黑客组装一个伪装的服务器，也存储了一组私钥和公钥</p>
<ul>
<li>黑客拦截服务器发给客户端的公钥，把假公钥发给客户端</li>
<li>客户端用假公钥加密随机数发给黑客，黑客就能用假私钥解密</li>
<li>这样黑客可以获取所有与用户的通信</li>
<li>同时黑客再伪装成客户端去跟服务器通信</li>
</ul>
<img src="https://luryblog.oss-cn-beijing.aliyuncs.com/noteImg/HTTPS/image-20220409174302047-16494973854263.png" alt="image-20220409174302047" style="zoom:50%;" />

<h2 id="数字证书"><a href="#数字证书" class="headerlink" title="数字证书"></a>数字证书</h2><p>中间人攻击的根本原因是用户使用了黑客提供的假公钥，所以验证公钥是真实可信的才进行通信就行了</p>
<ul>
<li>首先使用一种 Hash 算法来对公钥和其他信息进行加密，生成一个<strong>信息摘要</strong></li>
<li>然后让有公信力的认证中心（简称 CA ）用它的私钥对消息摘要加密，形成<strong>签名</strong>。</li>
<li>最后将<strong>原始信息</strong>和<strong>签名</strong>合在一起，称为<strong>数字证书</strong>。</li>
<li>当接收方收到数字证书的时候，<ul>
<li>先根据<strong>原始信息</strong>使用同样的 Hash 算法生成一个<strong>摘要</strong></li>
<li>然后使用CA的公钥来对数字证书中的<strong>摘要</strong>进行<strong>解密</strong></li>
<li>最后将解密的摘要和生成的摘要进行对比，就能发现得到的信息是否被更改了。</li>
</ul>
</li>
</ul>
<p>这个方法最要的是认证中心的可靠性，一般<strong>浏览器里会内置一些顶层的认证中心的证书</strong>，相当于我们自动信任了他们，只有这样才能保证数据的安全。</p>
<img src="https://luryblog.oss-cn-beijing.aliyuncs.com/noteImg/HTTPS/1603965685765-ffc9a525-ccad-43f0-bb25-8e17281d68fe.png" alt="image" style="zoom:75%;" />

<h1 id="HTTPS握手过程"><a href="#HTTPS握手过程" class="headerlink" title="HTTPS握手过程"></a>HTTPS握手过程</h1><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/noteImg/HTTPS/image-20220409161130494-16494918954901.png" alt="image-20220409161130494" style="zoom:33%;" />

<img src="https://luryblog.oss-cn-beijing.aliyuncs.com/noteImg/HTTPS/image-20220409180911914.png" alt="image-20220409180911914" style="zoom:50%;" />

<p>HTTPS的通信过程如下：</p>
<ol>
<li>客户端向服务器发起请求，请求中包含使用的协议版本号、生成的一个<strong>随机数1</strong>、以及客户端支持的加密方法。</li>
<li>服务器端接收到请求后，确认双方使用的加密方法、并给出服务器的证书、以及一个服务器生成的<strong>随机数2</strong>。</li>
<li>客户端<strong>确认服务器证书有效</strong></li>
<li>客户端生成一个新的<strong>随机数3</strong>，并使用数字证书中的<strong>公钥，加密这个随机数3</strong>，然后发给服务器。并且还会提供一个<strong>前面所有内容的 hash 的值</strong>，用来供服务器检验。<ul>
<li>发送公钥加密的随机数3+前面所有内容的 hash 的值<ul>
<li>随机数1、2可能被截获，但随机数3绝对安全</li>
<li>hash是让<strong>服务器</strong>验证随机数1、2有没有被篡改</li>
</ul>
</li>
</ul>
</li>
<li>服务器使用自己的私钥，来解密客户端发送过来的<strong>随机数3</strong>。并提供前面所有内容的 hash 值来供客户端检验。<ul>
<li>发送前面所有内容的 hash 值来供客户端检验<ul>
<li>hash是让<strong>客户端</strong>验证随机数1、2、3没有被篡改</li>
</ul>
</li>
</ul>
</li>
<li>客户端和服务器端根据约定的加密方法<strong>使用前面的三个随机数</strong>，生成<strong>对话秘钥</strong>，以后的对话过程都使用这个秘钥来加密信息。</li>
</ol>
<h1 id="HTTPS优缺点"><a href="#HTTPS优缺点" class="headerlink" title="HTTPS优缺点"></a>HTTPS优缺点</h1><p>HTTPS的<strong>优点</strong>如下：</p>
<ul>
<li>使用HTTPS协议可以<strong>认证用户和服务器</strong>，确保数据发送到正确的客户端和服务器；</li>
<li>使用HTTPS协议可以进行加密传输、身份认证，通信更加<strong>安全</strong>，防止数据在传输过程中被窃取、修改，确保数据安全性；</li>
<li>HTTPS是现行架构下最安全的解决方案，虽然不是绝对的安全，但是大幅<strong>增加了中间人攻击的成本</strong>；</li>
</ul>
<p>HTTPS的<strong>缺点</strong>如下：</p>
<ul>
<li>HTTPS需要做服务器和客户端双方的加密解密处理，耗费更多服务器资源，过程复杂；</li>
<li>HTTPS协议握手阶段比较<strong>费时</strong>，增加页面的加载时间；</li>
<li>SSL证书是<strong>收费</strong>的，功能越强大的证书费用越高；</li>
<li>HTTPS连接服务器端资源占用高很多，支持访客稍多的网站需要投入更大的成本；</li>
<li>SSL证书需要绑定IP，不能再同一个IP上绑定多个域名。</li>
</ul>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>前端工程师进阶系列</category>
        <category>计算机网络笔记</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
        <tag>HTTPS</tag>
      </tags>
  </entry>
  <entry>
    <title>计网笔记：理解HTTP3——缓存</title>
    <url>/2022/04/13/computerNetwork/HTTP3_cache/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>重点掌握：</p>
<ul>
<li>强缓存：Expires, cache-control</li>
<li>协商缓存：Last-Modified&#x2F; If-Modified-Since, ETag&#x2F; If-None-Match</li>
<li>状态码304</li>
</ul>
<span id="more"></span>

<h3 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h3><ul>
<li>缓存数据<strong>未失效</strong>的情况下，那么就会直接使用浏览器的缓存数据，不会再向服务器发送任何请求。</li>
<li>可以通过设置两种 HTTP Header 实现：Expires 和 Cache-Control</li>
<li>判断过期：<ul>
<li>HTTP1.0：Expires的缓存时间没有过期</li>
<li>HTTP1.1：Cache-Control的max-age没有过期</li>
</ul>
</li>
<li>强制缓存生效时，http状态码为200，chrome中缓存从两种地方获取：<ul>
<li>from memory cache (从内存中获取&#x2F;一般缓存更新频率较高的js、图片、字体等资源)</li>
<li>from disk cache (从磁盘中获取&#x2F;一般缓存更新频率较低的js、css等资源)</li>
</ul>
</li>
</ul>
<h4 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h4><p>HTTP1.0的强缓存，值为过期时间（秒级）时间戳，现在基本不用，优先考虑Cache-Control</p>
<p><strong>缺点</strong>：存储的是服务器的时间，无法应对客户端的时间和服务器端的时间不一致，或者用户可以对客户端时间进行修改的情况</p>
<h4 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h4><p>HTTP1.1的强缓存，置为有效时间（秒级）</p>
<ul>
<li>例如，max-age&#x3D;300时，则代表在这个请求正确返回时间（浏览器也会记录下来）的5分钟内再次加载资源，就会命中强缓存。</li>
</ul>
<p>属性：</p>
<ul>
<li><p><code>public</code>：设置了该字段值的资源表示可以被任何对象（包括：发送请求的客户端、代理服务器等等）缓存。这个字段值不常用，一般还是使用max-age&#x3D;来精确控制；</p>
</li>
<li><p><code>private</code>：设置了该字段值的资源<strong>只能被用户浏览器缓存</strong>，不允许任何代理服务器缓存。在实际开发当中，对于一些含有用户信息的HTML，通常都要设置这个字段值，避免代理服务器(CDN)缓存；</p>
</li>
<li><p><strong><code>no-cache</code><strong>：客户端缓存内容，是否使用缓存则需要</strong>经过协商缓存</strong>来验证决定。</p>
<ul>
<li>表示不使用 Cache-Control的缓存控制方式做前置验证，而是使用 Etag 或者Last-Modified字段来控制缓存。</li>
</ul>
</li>
<li><p><strong><code>no-store</code><strong>：所有内容都不会被缓存，即</strong>不使用强制缓存，也不使用协商缓存</strong>(memory cache也会失效)</p>
</li>
<li><p>**<code>max-age</code>**：max-age&#x3D;xxx 表示缓存内容将在xxx秒后失效</p>
</li>
</ul>
<p>当两种强缓存方式一起使用时，Cache-Control 的优先级要高于 Expires</p>
<h3 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h3><ul>
<li>协商缓存就是强缓存<strong>失效</strong>后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程</li>
<li>可以通过设置两种 HTTP Header，Last-Modified或者ETag实现</li>
<li>判断过期：当浏览器第一次向服务器发送请求时，会在响应头中返回协商缓存的头属性：ETag和Last-Modified<ul>
<li>HTTP 1.0：Last-Modified&#x2F;If-Modified-Since<ul>
<li>Last-Modified返回的是GMT格式的最后修改时间（只能判断秒级修改）</li>
<li>浏览器在第二次发送请求的时候，会在请求头中带上与Last-Modified对应的If-Modified-Since，值为最后修改时间</li>
</ul>
</li>
<li>HTTP 1.1：ETag&#x2F;If-Not-Match <ul>
<li>ETag返回的是一个hash值</li>
<li>浏览器在第二次发送请求的时候，会在请求头中带上与ETag对应的If-Not-Match，值为Etag的hash值</li>
</ul>
</li>
</ul>
</li>
<li>如果服务器资源未修改，返回304，如果有修改，返回200和新资源</li>
</ul>
<h4 id="Last-Modified"><a href="#Last-Modified" class="headerlink" title="Last-Modified"></a>Last-Modified</h4><p>Last-Modified&#x2F; If-Modified-Since</p>
<p>HTTP1.0的协商缓存，值为资源文件最后一次更改时间（秒级）</p>
<p>缓存过程：</p>
<ul>
<li>浏览器第一次请求资源<ul>
<li>服务器通过在响应头中添加 Last-Modified 属性来指出资源最后一次修改的时间，</li>
</ul>
</li>
<li>浏览器下一次发起请求时<ul>
<li>浏览器在会在请求头中添加一个 If-Modified-Since 的属性，属性值为上一次资源返回时的 Last-Modified 的值。</li>
<li>服务器会通过这个属性来和资源的最后一次的修改时间来进行比较，以此来判断资源是否做了修改。<ul>
<li>如果资源没有修改，那么返回 304 状态，让客户端使用本地的缓存。</li>
<li>如果资源已经被修改了，则返回200状态和修改后的资源。</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>缺点</strong>：</p>
<ul>
<li>因为是秒级，如果某些文件在1秒钟以内，被修改多次的话，那么文件已将改变了但是 Last-Modified 却没有改变，这样会造成缓存命中的不准确</li>
<li>可能资源被修改过，但是值未发生变化，这种时候也不算已修改</li>
</ul>
<h4 id="Etag"><a href="#Etag" class="headerlink" title="Etag"></a>Etag</h4><p>Etag&#x2F; If-None-Match</p>
<p>全程Entity Tag，值是资源生成的唯一标识符，对输入敏感，资源发生改变后ETag也改变，可以解决Last-Modified问题</p>
<ul>
<li>生成Etag的方法有很多，通常是使用内容的散列、最后修改时间戳的哈希值或简单地使用版本号</li>
</ul>
<p>缓存过程：和Last-Modified类似</p>
<ul>
<li>浏览器第一次请求资源<ul>
<li>服务器在返回资源的时候，在头信息中添加了 Etag 属性</li>
</ul>
</li>
<li>浏览器下一次发起请求时<ul>
<li>浏览器会在请求头中添加一个 If-None-Match 属性，这个属性的值就是上次返回的资源的 Etag 的值。</li>
<li>服务接收到请求后会根据这个值来和资源当前的 Etag 的值来进行比较，以此来判断资源是否发生改变，是否需要返回资源。</li>
</ul>
</li>
</ul>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>前端工程师进阶系列</category>
        <category>计算机网络笔记</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>面经复盘2：百度前端暑期实习 2022-04-10</title>
    <url>/2022/04/10/interview/interview_Baidu/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>百度2022春暑期实习，2022-04-10，前端，下午场</p>
<p>需要加强理解：</p>
<ul>
<li>CSS：position优先级、垂直水平居中</li>
<li>手写：递归回溯相关leetcode（全排列、二叉树）</li>
<li>React：高阶组件、自定义Hook、Context实现插槽</li>
</ul>
<span id="more"></span>

<h1 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h1><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h3 id="垂直居中怎么写"><a href="#垂直居中怎么写" class="headerlink" title="垂直居中怎么写 *"></a>垂直居中怎么写 *</h3><p>参考：<a href="https://www.cnblogs.com/qwguo/p/13047176.html">https://www.cnblogs.com/qwguo/p/13047176.html</a></p>
<h4 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h4><p>利用transform里头的translateY（改变垂直的位移，如果使用百分比为单位，则是以元素本身的长宽为基准），搭配元素本身的top属性，就可以做出垂直居中的效果，比较需要注意的地方是，<strong>子元素必须要加上position:relative</strong>，不然就会没有效果喔。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.use-transform</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.use-transform</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;			//!!!</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">50%</span>;					//!!!</span><br><span class="line">    <span class="attribute">transform</span>:<span class="built_in">translateY</span>(-<span class="number">50%</span>); //!!!</span><br><span class="line">    <span class="attribute">background</span>:<span class="number">#095</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h4><p><strong>将上下左右的数值都设为0，再搭配一个margin:auto</strong>，就可以办到垂直居中，不过要特别注意的是，设定绝对定位的子元素，其父元素的position必须要指定为relative喔（<strong>子绝父相</strong>）！而且绝对定位的元素是会互相覆盖的，所以如果内容元素较多，可能就会有些问题。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.use-absolute</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;		//!!!</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.use-absolute</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;		//!!!</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">0</span>;					//!!!</span><br><span class="line">    <span class="attribute">right</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>:auto;			//!!!</span><br><span class="line">    <span class="attribute">background</span>:<span class="number">#f60</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h4><ul>
<li><p>使用<strong>align-items</strong>或<strong>align-content</strong>的属性，轻轻松松就可以做到垂直居中的效果。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.use-flexbox</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:flex;			//!!!</span><br><span class="line">    <span class="attribute">align-items</span>:center;		//垂直居中</span><br><span class="line">    <span class="attribute">justify-content</span>:center;	//水平居中</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.use-flexbox</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background</span>:<span class="number">#099</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="flex-1代表什么，默认值是什么"><a href="#flex-1代表什么，默认值是什么" class="headerlink" title="flex: 1代表什么，默认值是什么 *"></a>flex: 1代表什么，默认值是什么 *</h3><ul>
<li><a href="https://zhuanlan.zhihu.com/p/136223806">https://zhuanlan.zhihu.com/p/136223806</a></li>
<li>代表三个属性：<ul>
<li>flex-grow：定义项目的放大比例，默认为<strong>0</strong>，即如果存在剩余空间，也不放大。</li>
<li>flex-shrink：定义了项目的缩小比例，默认为<strong>1</strong>，即如果空间不足，该项目将缩小。</li>
<li>flex-basis：定义了在分配多余空间之前，项目占据的主轴空间。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<strong>auto</strong>，即项目的本来大小。</li>
</ul>
</li>
<li>flex: 1 &#x3D;&#x3D;&#x3D; flex 1 1 0</li>
<li>flex默认值是 0 1 auto</li>
</ul>
<h3 id="padding百分比是基于盒子的width还是height"><a href="#padding百分比是基于盒子的width还是height" class="headerlink" title="padding百分比是基于盒子的width还是height *"></a>padding百分比是基于盒子的width还是height *</h3><ul>
<li><p><strong>width</strong></p>
</li>
<li><p>padding的百分比是相对于父元素宽度，</p>
<ul>
<li>如果父元素有宽度，相对于父元素宽度，</li>
<li>如果没有，找其父辈元素的宽度，均没设宽度时，相对于屏幕的宽度。</li>
</ul>
</li>
</ul>
<h3 id="position，display-none，float优先级"><a href="#position，display-none，float优先级" class="headerlink" title="position，display: none，float优先级 *"></a>position，display: none，float优先级 *</h3><ul>
<li><code>display: none</code> &gt; <code>position: absolute/fixed</code> &gt; <code>float: 非none</code></li>
<li><img src="https://img-blog.csdn.net/20161225213004672?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY3J5c3RhbDY5MTg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"></li>
</ul>
<h3 id="less和sass的区别"><a href="#less和sass的区别" class="headerlink" title="less和sass的区别"></a>less和sass的区别</h3><ul>
<li><a href="https://www.jianshu.com/p/e3f1fcbbccc3">https://www.jianshu.com/p/e3f1fcbbccc3</a></li>
<li>最主要的是编译环境？<ul>
<li>less：JS，客户端处理，npm</li>
<li>sass：ruby，服务器处理</li>
</ul>
</li>
</ul>
<h2 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h2><h3 id="数组用什么方法"><a href="#数组用什么方法" class="headerlink" title="数组用什么方法"></a>数组用什么方法</h3><ul>
<li>push pop shift unshift forEach map</li>
<li>shift unshift 干什么的</li>
</ul>
<h3 id="get和post区别"><a href="#get和post区别" class="headerlink" title="get和post区别"></a>get和post区别</h3><ul>
<li>都是明文传输啊都很危险</li>
<li>为什么HTTPS安全</li>
</ul>
<h3 id="跨域失败的请求被谁拦截？"><a href="#跨域失败的请求被谁拦截？" class="headerlink" title="跨域失败的请求被谁拦截？*"></a>跨域失败的请求被谁拦截？*</h3><p><a href="https://cloud.tencent.com/developer/article/1745763">https://cloud.tencent.com/developer/article/1745763</a></p>
<p>被浏览器拦截，拦截的是响应不是请求</p>
<h3 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h3><p>Event Loop</p>
<h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><h3 id="说下用过的钩子"><a href="#说下用过的钩子" class="headerlink" title="说下用过的钩子"></a>说下用过的钩子</h3><p>useEffect, useState, useRef, useMemo…</p>
<h2 id="说输出"><a href="#说输出" class="headerlink" title="说输出"></a>说输出</h2><h3 id="function、var声明提升"><a href="#function、var声明提升" class="headerlink" title="function、var声明提升"></a>function、var声明提升</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  show(); <span class="comment">//5</span></span><br><span class="line">  <span class="keyword">var</span> show = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  show(); <span class="comment">//4</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">5</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  show(); <span class="comment">//4</span></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 顺序：</span></span><br><span class="line"><span class="comment">// function show()&#123;...&#125; 函数声明优先</span></span><br><span class="line"><span class="comment">// var show</span></span><br><span class="line"><span class="comment">// show = function()&#123;...&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="setTimeout，promise"><a href="#setTimeout，promise" class="headerlink" title="setTimeout，promise"></a>setTimeout，promise</h3><p>promise微任务插队</p>
<h2 id="手写"><a href="#手写" class="headerlink" title="手写"></a>手写</h2><h3 id="一段文字渲染到屏幕，改颜色"><a href="#一段文字渲染到屏幕，改颜色" class="headerlink" title="一段文字渲染到屏幕，改颜色 *"></a>一段文字渲染到屏幕，改颜色 *</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result = &#123;</span><br><span class="line">  <span class="attr">content</span>: <span class="string">&quot;sdhkjahsdhakhdjksahjs&quot;</span>,</span><br><span class="line">  <span class="attr">offset</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">offset</span>: [<span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">      <span class="attr">color</span>: <span class="string">&quot;red&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">offset</span>: [<span class="number">7</span>, <span class="number">10</span>],</span><br><span class="line">      <span class="attr">color</span>: <span class="string">&quot;yello&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">offset</span>: [<span class="number">12</span>, <span class="number">14</span>],</span><br><span class="line">      <span class="attr">color</span>: <span class="string">&quot;blue&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>把content内容按照下标和颜色渲染</p>
<p>思路：先按offset排序，然后遍历，组装成有颜色的span，替换原来的元素，然后拼接成模板字符串什么的加入html</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="built_in">document</span>.getElementById(<span class="string">&quot;app&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = &#123;</span><br><span class="line">  <span class="attr">content</span>: <span class="string">&quot;my name is Kitty Hello Hell no, Bye!&quot;</span>,</span><br><span class="line">  <span class="attr">offsets</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">offset</span>: [<span class="number">11</span>, <span class="number">16</span>],</span><br><span class="line">      <span class="attr">color</span>: <span class="string">&quot;blue&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">offset</span>: [<span class="number">3</span>, <span class="number">7</span>],</span><br><span class="line">      <span class="attr">color</span>: <span class="string">&quot;red&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">offset</span>: [<span class="number">17</span>, <span class="number">22</span>],</span><br><span class="line">      <span class="attr">color</span>: <span class="string">&quot;purple&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">offset</span>: [<span class="number">8</span>, <span class="number">10</span>],</span><br><span class="line">      <span class="attr">color</span>: <span class="string">&quot;green&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showResult</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> getSpan = <span class="function">(<span class="params">text, color</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> span = <span class="built_in">document</span>.createElement(<span class="string">&quot;span&quot;</span>);</span><br><span class="line">    span.innerHTML = text;</span><br><span class="line">    <span class="keyword">if</span> (color) span.style.color = color;</span><br><span class="line">    <span class="keyword">return</span> span;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">let</span> offsets = obj.offsets;</span><br><span class="line">  <span class="keyword">let</span> renderArr = [];</span><br><span class="line">  offsets.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.offset[<span class="number">0</span>] - b.offset[<span class="number">0</span>]);</span><br><span class="line">  <span class="comment">// console.log(offsets);</span></span><br><span class="line">  <span class="keyword">let</span> preIdx = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> text = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> offsets) &#123;</span><br><span class="line">    <span class="keyword">if</span> (item.offset[<span class="number">0</span>] &gt; preIdx) &#123;</span><br><span class="line">      text = obj.content.slice(preIdx, item.offset[<span class="number">0</span>]);</span><br><span class="line">      renderArr.push(getSpan(text));</span><br><span class="line">    &#125;</span><br><span class="line">    text = obj.content.slice(item.offset[<span class="number">0</span>], item.offset[<span class="number">1</span>]);</span><br><span class="line">    renderArr.push(getSpan(text, item.color));</span><br><span class="line">    preIdx = item.offset[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// console.log(renderArr);</span></span><br><span class="line">  &#125;</span><br><span class="line">  text = obj.content.slice(preIdx);</span><br><span class="line"></span><br><span class="line">  renderArr.push(getSpan(text));</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> renderArr) &#123;</span><br><span class="line">    app.appendChild(item);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">showResult(result);</span><br></pre></td></tr></table></figure>

<h3 id="对称二叉树"><a href="#对称二叉树" class="headerlink" title="对称二叉树"></a>对称二叉树</h3><p><a href="https://github.com/luryZhu/leetcode-js/issues/16">https://github.com/luryZhu/leetcode-js/issues/16</a></p>
<h1 id="二面"><a href="#二面" class="headerlink" title="二面 *"></a>二面 *</h1><p>自我介绍</p>
<p>一边手写一边回答问题，全寄</p>
<h2 id="全排列"><a href="#全排列" class="headerlink" title="全排列 *"></a>全排列 *</h2><p><a href="https://github.com/luryZhu/leetcode-js/issues/30">https://github.com/luryZhu/leetcode-js/issues/30</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">permute</span>(<span class="params">numbers</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = [];</span><br><span class="line">  <span class="keyword">const</span> used = [];</span><br><span class="line">  <span class="keyword">const</span> len = numbers.length;</span><br><span class="line">  <span class="keyword">let</span> dfs = <span class="function">(<span class="params">pre</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (pre.length === len) &#123;</span><br><span class="line">      res.push([...pre]);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (used[i]) <span class="keyword">continue</span>;</span><br><span class="line">      used[i] = <span class="literal">true</span>;</span><br><span class="line">      dfs([...pre, numbers[i]]);</span><br><span class="line">      used[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  dfs([]);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(permute(numbers));</span><br></pre></td></tr></table></figure>

<h2 id="解析URL"><a href="#解析URL" class="headerlink" title="解析URL *"></a>解析URL *</h2><p><code>url: https://interview.nowcoder.com/interview/confirm?code=Cq1y2tOP&amp;roundId=3819618</code> *</p>
<p>不停split</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">urlQuery</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> resObj = &#123;&#125;;</span><br><span class="line">  <span class="keyword">let</span> queries = url.split(<span class="string">&quot;?&quot;</span>)[<span class="number">1</span>].split(<span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">  queries.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> [key, value] = item.split(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">    resObj[key] = value;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> resObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> url =</span><br><span class="line">  <span class="string">&quot;url: https://interview.nowcoder.com/interview/confirm?code=Cq1y2tOP&amp;roundId=3819618&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(urlQuery(url));</span><br></pre></td></tr></table></figure>

<h2 id="reduce拆分递增数组"><a href="#reduce拆分递增数组" class="headerlink" title="reduce拆分递增数组 *"></a>reduce拆分递增数组 *</h2><p>[1,2,3,5,7,9]&#x3D;&gt;[[1,2,3],[5],[7],[9] *</p>
<p>reudce：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reduceSplit</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (pre.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> [[cur]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;pre&quot;</span>, pre);</span><br><span class="line">    <span class="keyword">let</span> temp = pre.pop();</span><br><span class="line">    <span class="keyword">if</span> (cur - temp[temp.length - <span class="number">1</span>] === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> [...pre, [...temp, cur]];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> [...pre, [...temp], [cur]];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, []);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reduceSplit([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">10</span>]));</span><br></pre></td></tr></table></figure>

<h2 id="useCountDown"><a href="#useCountDown" class="headerlink" title="useCountDown *"></a>useCountDown *</h2><p>说一下高阶组件：</p>
<ul>
<li>把组件转换为另一个组件：<a href="https://react.docschina.org/docs/higher-order-components.html">https://react.docschina.org/docs/higher-order-components.html</a></li>
<li>Memo</li>
<li>useMemo，useCallback使用场景</li>
<li>每个组件都要用Memo包吗？不用，渲染开销大的才包，因为缓存也要成本</li>
</ul>
<p>自定义Hook，实现读秒倒数，例如输入60，每秒-1，最终输出0 *</p>
<ul>
<li>自定义钩子返回什么？什么情况下返回DOM？ *<ul>
<li><a href="https://blog.csdn.net/qq_34895059/article/details/118913677">https://blog.csdn.net/qq_34895059/article/details/118913677</a></li>
<li>一般返回对象、数组之类的</li>
<li>返回DOM节点的情况可能是？组件？判断是否到底，到底返回一个到底了的元素</li>
</ul>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;./styles.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useCountDown = <span class="function">(<span class="params">prev</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(prev);</span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;countdown!&quot;</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (count &gt; <span class="number">0</span>) setCount(count - <span class="number">1</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;, [count]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> [count];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count] = useCountDown(<span class="number">10</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>count<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="vue插槽"><a href="#vue插槽" class="headerlink" title="vue插槽 *"></a>vue插槽 *</h2><p>说一下Context</p>
<ul>
<li>祖孙、兄弟传值</li>
</ul>
<p>react怎么实现vue的插槽？</p>
<ul>
<li>props.children? 不行，插槽跟顺序相关blabla</li>
<li>Context实现：<a href="https://segmentfault.com/a/1190000019797724">https://segmentfault.com/a/1190000019797724</a></li>
</ul>
<h2 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h2><p>leetcode 1：<a href="https://luryzhu.github.io/2021/07/21/leetcode/leetcode1/">https://luryzhu.github.io/2021/07/21/leetcode/leetcode1/</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">twoSum</span>(<span class="params">numbers, target</span>) </span>&#123;</span><br><span class="line">  numbers.sort();</span><br><span class="line">  <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> n <span class="keyword">of</span> numbers) &#123;</span><br><span class="line">    <span class="keyword">if</span> (map.has(n)) &#123;</span><br><span class="line">      <span class="keyword">return</span> [map.get(n), n];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      map.set(target - n, n);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>];</span><br><span class="line"><span class="built_in">console</span>.log(twoSum(arr, <span class="number">8</span>));</span><br></pre></td></tr></table></figure>

<h1 id="三面"><a href="#三面" class="headerlink" title="三面"></a>三面</h1><p>自我介绍</p>
<p>怎么学的前端</p>
<ul>
<li>怎么产生学前端的兴趣</li>
</ul>
<p>介绍一个最能说的项目</p>
<p>大学里学过什么语言</p>
<p>前端与后端语言、技术栈的区别</p>
<ul>
<li>说了点配环境简单，所见即所得什么的</li>
</ul>
<p>都是个人项目，有什么团队经验？</p>
<ul>
<li>说了社团经历</li>
</ul>
<p>反问</p>
<ul>
<li>招100个人怎么安排实习：说是百度联合招聘，会发配到不同部门</li>
</ul>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>前端面经</category>
        <category>复盘</category>
      </categories>
      <tags>
        <tag>面经</tag>
      </tags>
  </entry>
  <entry>
    <title>DL笔记1：Linear Regression</title>
    <url>/2021/07/14/deeplearning/dl1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>参考资料：</strong><br><a href="https://cuijiahua.com/blog/2018/10/dl-7.html">感知器</a><br><a href="https://cuijiahua.com/blog/2018/11/dl-8.html">线性单元</a><br><a href="https://www.bilibili.com/video/BV1JE411g7XF?p=3">李宏毅2020:Regression</a><br><a href="https://datawhalechina.github.io/leeml-notes/#/chapter3/chapter3">李宏毅2020:Regression-文字版</a></p>
<h1 id="感知器"><a href="#感知器" class="headerlink" title="感知器"></a>感知器</h1><p>感知器，激活函数是阶跃函数，和神经元的本质上一样，只是激活函数不同<br>上世纪提出的感知器的概念，现在<br><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/DL/pics/regression/1.png"></p>
<h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><ul>
<li>输入<ul>
<li>特征向量 $x&#x3D;(x_1,x_2,…x_n)$</li>
<li>权值 $w&#x3D;(w_1,w_2,…,w_n)$</li>
<li>偏置项 $b$</li>
</ul>
</li>
<li>激活函数<ul>
<li>$f(z)&#x3D;\left{\begin{array}{lr}<br>1 &amp; z&gt;0 \<br>0 &amp; \text { otherwise }<br>\end{array}\right.$</li>
</ul>
</li>
<li>输出<ul>
<li>$y&#x3D;f(wx+b)$</li>
</ul>
</li>
</ul>
<h3 id="二分类问题"><a href="#二分类问题" class="headerlink" title="二分类问题"></a>二分类问题</h3><p>感知器模型可以用于解决二分类问题：对给定输入，输出0或1</p>
<h4 id="例-感知器实现布尔运算"><a href="#例-感知器实现布尔运算" class="headerlink" title="例 感知器实现布尔运算"></a>例 感知器实现布尔运算</h4><p>输入: $x&#x3D;(x_1,  x_2)$<br>输出: $y&#x3D;f(w·x+b)$</p>
<p>激励函数: 阶跃函数 实现二分类</p>
<ol>
<li><p>and 与运算<br>$w 1&#x3D;0.5, \quad w 2&#x3D;0.5, \quad b&#x3D;-0.8$<br>$f(z)&#x3D;\left{\begin{array}{l}1 &amp; z&gt;0 \ 0 &amp; \text { otherwise }\end{array}\right.$</p>
</li>
<li><p>or 或运算<br>$w 1&#x3D;0.5, \quad w 2&#x3D;0.5, \quad b&#x3D;-0.3$<br>$f(z)&#x3D;\left{\begin{array}{l}1 &amp; z&gt;0 \ 0 &amp; \text { otherwise }\end{array}\right.$</p>
</li>
</ol>
<p>上述例子是线性可分的问题<br>如图 and 用线性函数可以把true和false分开<br><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/DL/pics/regression/2.png"></p>
<h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><p>优化目标：使损失最小的输入权值w和偏置项b</p>
<h3 id="感知器训练算法"><a href="#感知器训练算法" class="headerlink" title="感知器训练算法"></a>感知器训练算法</h3><ol>
<li>初始化<br> $w$和$b$初始化为0</li>
<li>迭代<br> $\begin{aligned} &amp;w_{i} &amp; \leftarrow &amp;\quad w_{i}+\Delta w_{i} \ &amp;b &amp; \leftarrow &amp;\quad b+\Delta b \end{aligned}$<br> 其中<br> $\begin{aligned} &amp;\Delta w_{i} &amp; &#x3D;&amp;\quad \eta (t-y)x_i \ &amp;\Delta b &amp; &#x3D;&amp;\quad \eta (t-y) \end{aligned}$</li>
</ol>
<table>
<thead>
<tr>
<th>数学表达</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>$y$</td>
<td>感知器的输出值</td>
</tr>
<tr>
<td>$t$</td>
<td>target&#x2F;label，训练样本的真实值</td>
</tr>
<tr>
<td>$\eta $</td>
<td>学习速率</td>
</tr>
</tbody></table>
<h1 id="线性单元"><a href="#线性单元" class="headerlink" title="线性单元"></a>线性单元</h1><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>深度学习笔记</category>
      </categories>
      <tags>
        <tag>DeepLearning</tag>
        <tag>LHY2020</tag>
      </tags>
  </entry>
  <entry>
    <title>面经整理1：异步输出——Promise，SetTimeout与async</title>
    <url>/2022/04/09/interview/interview1_async/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="考察要点"><a href="#考察要点" class="headerlink" title="考察要点"></a>考察要点</h1><ul>
<li>微任务和宏任务<ul>
<li>script（宏任务），最先执行，产生其他微任务和宏任务</li>
<li>微任务：promise.then的回调，<strong>优先级高</strong></li>
<li>宏任务：setTimeout的回调，优先级低</li>
</ul>
</li>
<li>Promise<ul>
<li>then 只接受函数做参数，不是函数则使用默认回调<ul>
<li>成功：值传递 <code>val=&gt;val</code></li>
<li>失败：<strong>异常穿透</strong> <code>reason=&gt;throw(reason)</code></li>
<li>then 方法的返回值不能是赋值对象（<code>p=otherP.then(res=&gt;return p)</code>会死循环！）</li>
</ul>
</li>
<li>finally<ul>
<li>读不到上一个Promise的状态，即没有入参</li>
<li><strong>返回值默认是上一个Promise</strong>，报错才会重写返回值<ul>
<li>在finally回调内写return没用</li>
<li>除非回调里throw err或return 失败Promise(<code>return Promise.reject</code>)，返回值会变成失败Promise</li>
</ul>
</li>
</ul>
</li>
<li>race，all<ul>
<li>all，返回值：<ul>
<li>所有成功，才返回成功Promise，值为全部Promise结果的数组，顺序和输入一样</li>
<li>一旦有一个失败，则立即返回失败Promise</li>
</ul>
</li>
<li>race，返回第一个改变状态的Promise</li>
<li>注意如果promise对象是<strong>延时</strong>后改变状态的情况</li>
</ul>
</li>
</ul>
</li>
<li>aysnc函数<ul>
<li>await 等待的的算new Promise，同步</li>
<li>await 后面的算then()，微任务</li>
<li>await 等待的Promise<ul>
<li>失败，直接<strong>抛出错误</strong></li>
<li>new Promise陷阱：<ul>
<li>如果没有resolve&#x2F;reject改变状态，就一直pending，<strong>await后面的代码不会执行</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<span id="more"></span>

<h1 id="面经"><a href="#面经" class="headerlink" title="面经"></a>面经</h1><p>题目来源：<a href="https://www.yuque.com/cuggz/interview/wm7x19">前端面试题之代码输出篇</a></p>
<h2 id="then相关"><a href="#then相关" class="headerlink" title="then相关"></a>then相关</h2><h3 id="1-then"><a href="#1-then" class="headerlink" title="1. then"></a>1. then</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line">promise.then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">4</span>);</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 </span><br><span class="line">2 </span><br><span class="line">4</span><br></pre></td></tr></table></figure>

<p>promise.then 是微任务，它会在所有的宏任务执行完之后才会执行，同时需要promise内部的状态发生变化，因为这里内部没有发生变化，一直处于pending状态，所以不输出3。</p>
<h3 id="2-then"><a href="#2-then" class="headerlink" title="2. then"></a>2. then</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;promise1&#x27;</span>)</span><br><span class="line">  resolve(<span class="string">&#x27;resolve1&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> promise2 = promise1.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;1&#x27;</span>, promise1);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;2&#x27;</span>, promise2);</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">promise1</span><br><span class="line">1 Promise&#123;&lt;resolved&gt;: resolve1&#125;</span><br><span class="line">2 Promise&#123;&lt;pending&gt;&#125;</span><br><span class="line">resolve1</span><br></pre></td></tr></table></figure>

<p>需要注意的是，直接打印promise1，会打印出它的状态值和参数。</p>
<p>代码执行过程如下：</p>
<ol>
<li>script是一个宏任务，按照顺序执行这些代码；</li>
<li>首先进入Promise，执行该构造函数中的代码，打印<code>promise1</code>；</li>
<li>碰到<code>resolve</code>函数, 将<code>promise1</code>的状态改变为<code>resolved</code>, 并将结果保存下来；</li>
<li>碰到<code>promise1.then</code>这个微任务，将它放入微任务队列；</li>
<li><code>promise2</code>是一个新的状态为<code>pending</code>的<code>Promise</code>；</li>
<li>执行同步代码1， 同时打印出<code>promise1</code>的状态是<code>resolved</code>；</li>
<li>执行同步代码2，同时打印出<code>promise2</code>的状态是<code>pending</code>；</li>
<li>宏任务执行完毕，查找微任务队列，发现<code>promise1.then</code>这个微任务且状态为<code>resolved</code>，执行它。</li>
</ol>
<h3 id="3-setTimeout、then顺序"><a href="#3-setTimeout、then顺序" class="headerlink" title="3. setTimeout、then顺序"></a>3. setTimeout、then顺序</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;timerStart&quot;</span>);</span><br><span class="line">    resolve(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;timerEnd&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line">promise.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">4</span>);</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">timerStart</span><br><span class="line">timerEnd</span><br><span class="line">success</span><br></pre></td></tr></table></figure>

<p>代码执行过程如下：</p>
<ul>
<li>首先遇到Promise构造函数，会先执行里面的内容，打印<code>1</code>；</li>
<li>遇到定时器<code>steTimeout</code>，它是一个宏任务，放入宏任务队列；</li>
<li>继续向下执行，打印出2；</li>
<li>由于<code>Promise</code>的状态此时还是<code>pending</code>，所以<code>promise.then</code>先不执行；</li>
<li>继续执行下面的同步任务，打印出4；</li>
<li>此时微任务队列没有任务，继续执行下一轮宏任务，执行<code>steTimeout</code>；</li>
<li>首先执行<code>timerStart</code>，然后遇到了<code>resolve</code>，将<code>promise</code>的状态改为<code>resolved</code>且保存结果并将之前的<code>promise.then</code>推入微任务队列，再执行<code>timerEnd</code>；</li>
<li>执行完这个宏任务，就去执行微任务<code>promise.then</code>，打印出<code>resolve</code>的结果。</li>
</ul>
<h3 id="4-setTimeout、then顺序"><a href="#4-setTimeout、then顺序" class="headerlink" title="4. setTimeout、then顺序"></a>4. setTimeout、then顺序</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;promise1&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> timer2 = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;timer2&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> timer1 = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;timer1&#x27;</span>)</span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;promise2&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;start&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start</span><br><span class="line">promise1</span><br><span class="line">timer1</span><br><span class="line">promise2</span><br><span class="line">timer2</span><br></pre></td></tr></table></figure>

<p>代码执行过程如下：</p>
<ol>
<li>首先，<code>Promise.resolve().then</code>是一个微任务，加入微任务队列</li>
<li>执行timer1，它是一个宏任务，加入宏任务队列</li>
<li>继续执行下面的同步代码，打印出<code>start</code></li>
<li>这样第一轮宏任务就执行完了，开始执行微任务<code>Promise.resolve().then</code>，打印出<code>promise1</code></li>
<li>遇到<code>timer2</code>，它是一个宏任务，将其加入宏任务队列，此时宏任务队列有两个任务，分别是<code>timer1</code>、<code>timer2</code>；</li>
<li>这样第一轮微任务就执行完了，开始执行第二轮宏任务，首先执行定时器<code>timer1</code>，打印<code>timer1</code>；</li>
<li>遇到<code>Promise.resolve().then</code>，它是一个微任务，加入微任务队列</li>
<li>开始执行微任务队列中的任务，打印<code>promise2</code>；</li>
<li>最后执行宏任务<code>timer2</code>定时器，打印出<code>timer2</code>；</li>
</ol>
<h3 id="5-状态只改变一次"><a href="#5-状态只改变一次" class="headerlink" title="5. 状态只改变一次"></a>5. 状态只改变一次</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">&#x27;success1&#x27;</span>);</span><br><span class="line">    reject(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">    resolve(<span class="string">&#x27;success2&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">promise.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;then:&#x27;</span>, res);</span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;catch:&#x27;</span>, err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">then：success1</span><br></pre></td></tr></table></figure>

<p>这个题目考察的就是<strong>Promise的状态在发生变化之后，就不会再发生变化</strong>。开始状态由<code>pending</code>变为<code>resolve</code>，说明已经变为已完成状态，下面的两个状态的就不会再执行，同时下面的catch也不会捕获到错误。</p>
<h3 id="6-then的入参为函数"><a href="#6-then的入参为函数" class="headerlink" title="6. then的入参为函数"></a>6. then的入参为函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="number">1</span>)</span><br><span class="line">  .then(<span class="number">2</span>)</span><br><span class="line">  .then(<span class="built_in">Promise</span>.resolve(<span class="number">3</span>))</span><br><span class="line">  .then(<span class="built_in">console</span>.log)</span><br><span class="line">  </span><br><span class="line">  (res)=&gt;&#123;<span class="built_in">console</span>.log(res)&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">Promise &#123;&lt;fulfilled&gt;: undefined&#125;</span><br></pre></td></tr></table></figure>

<p>Promise.resolve方法的参数如果是一个原始值，或者是一个不具有then方法的对象，则Promise.resolve方法返回一个新的Promise对象，状态为resolved，Promise.resolve方法的参数，会同时传给回调函数。</p>
<p>then方法接受的参数是函数，而如果传递的并非是一个函数，它实际上会将其解释为then(null)，这就会导致前一个Promise的结果会传递下面。</p>
<h3 id="7-状态何时改变"><a href="#7-状态何时改变" class="headerlink" title="7. 状态何时改变"></a>7. 状态何时改变</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> promise2 = promise1.then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;error!!!&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;promise1&#x27;</span>, promise1)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;promise2&#x27;</span>, promise2)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;promise1&#x27;</span>, promise1)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;promise2&#x27;</span>, promise2)</span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">promise1 Promise &#123;&lt;pending&gt;&#125;</span><br><span class="line">promise2 Promise &#123;&lt;pending&gt;&#125;</span><br><span class="line"></span><br><span class="line">Uncaught (in promise) Error: error!!!</span><br><span class="line">promise1 Promise &#123;&lt;fulfilled&gt;: &quot;success&quot;&#125;</span><br><span class="line">promise2 Promise &#123;&lt;rejected&gt;: Error: error!!&#125;</span><br></pre></td></tr></table></figure>

<h3 id="8-catch"><a href="#8-catch" class="headerlink" title="8. catch"></a>8. catch</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="number">1</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1   </span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<p>Promise是可以链式调用的，由于每次调用 <code>.then</code> 或者 <code>.catch</code> 都会返回一个新的 promise，从而实现了链式调用, 它并不像一般任务的链式调用一样return this。</p>
<p>上面的输出结果之所以依次打印出1和2，是因为<code>resolve(1)</code>之后走的是第一个then方法，并没有进catch里，所以第二个then中的res得到的实际上是第一个then的返回值。并且return 2会被包装成<code>resolve(2)</code>，被最后的then打印输出2。</p>
<h3 id="9-then返回值"><a href="#9-then返回值" class="headerlink" title="9. then返回值"></a>9. then返回值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;error!!!&#x27;</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;then: &quot;</span>, res)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;catch: &quot;</span>, err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;then: &quot; &quot;Error: error!!!&quot;</span><br></pre></td></tr></table></figure>

<p>返回任意一个非 promise 的值都会被包裹成 promise 对象，因此这里的<code>return new Error(&#39;error!!!&#39;)</code>也被包裹成了<code>return Promise.resolve(new Error(&#39;error!!!&#39;))</code>，因此它会被then捕获而不是catch。</p>
<h3 id="10-死循环"><a href="#10-死循环" class="headerlink" title="10. 死循环"></a>10. 死循环</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="built_in">Promise</span>.resolve().then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;)</span><br><span class="line">promise.catch(<span class="built_in">console</span>.err)</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Uncaught (in promise) TypeError: Chaining cycle detected for promise #&lt;Promise&gt;</span><br></pre></td></tr></table></figure>

<p>这里其实是一个坑，<code>.then</code> 或 <code>.catch</code> 返回的值不能是 promise 本身，否则会造成死循环。</p>
<h3 id="11-值传递"><a href="#11-值传递" class="headerlink" title="11. 值传递"></a>11. 值传递</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="number">1</span>)</span><br><span class="line">  .then(<span class="number">2</span>)</span><br><span class="line">  .then(<span class="built_in">Promise</span>.resolve(<span class="number">3</span>))</span><br><span class="line">  .then(<span class="built_in">console</span>.log)</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure>

<p>看到这个题目，好多的then，实际上只需要记住一个原则：<code>.then</code> 或<code>.catch</code> 的参数期望是函数，传入非函数则会发生<strong>值透传</strong>。</p>
<p>第一个then和第二个then中传入的都不是函数，一个是数字，一个是对象，因此发生了透传，将<code>resolve(1)</code> 的值直接传到最后一个then里，直接打印出1。</p>
<h3 id="12-异常穿透"><a href="#12-异常穿透" class="headerlink" title="12. 异常穿透"></a>12. 异常穿透</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.reject(<span class="string">&#x27;err!!!&#x27;</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;success&#x27;</span>, res)</span><br><span class="line">  &#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;error&#x27;</span>, err)</span><br><span class="line">  &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;catch&#x27;</span>, err)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">error err!!!</span><br></pre></td></tr></table></figure>

<p>我们知道，<code>.then</code>函数中的两个参数：</p>
<ul>
<li>第一个参数是用来处理Promise成功的函数</li>
<li>第二个则是处理失败的函数</li>
</ul>
<p>也就是说<code>Promise.resolve(&#39;1&#39;)</code>的值会进入成功的函数，<code>Promise.reject(&#39;2&#39;)</code>的值会进入失败的函数。</p>
<p>在这道题中，错误直接被<code>then</code>的第二个参数捕获了，所以就不会被<code>catch</code>捕获了，输出结果为：<code>error err!!!&#39;</code></p>
<p>但是，如果是像下面这样：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve()</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> <span class="title">success</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;error!!!&#x27;</span>)</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> <span class="title">fail1</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;fail1&#x27;</span>, err)</span><br><span class="line">  &#125;).catch(<span class="function"><span class="keyword">function</span> <span class="title">fail2</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;fail2&#x27;</span>, err)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<p>在<code>then</code>的第一参数中抛出了错误，那么他就不会被第二个参数捕获了，而是被后面的<code>catch</code>捕获到。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fail2 Error: error!!!</span><br></pre></td></tr></table></figure>

<h2 id="finally、all、race"><a href="#finally、all、race" class="headerlink" title="finally、all、race"></a>finally、all、race</h2><h3 id="13-finally"><a href="#13-finally" class="headerlink" title="13. finally"></a>13. finally</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">  &#125;)</span><br><span class="line">  .finally(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;finally&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="built_in">Promise</span>.resolve(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">  .finally(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;finally2&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;我是finally2返回的值&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;finally2后面的then函数&#x27;</span>, res)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">finally2</span><br><span class="line">finally</span><br><span class="line">finally2后面的then函数 2</span><br></pre></td></tr></table></figure>

<p><code>.finally()</code>一般用的很少，只要记住以下几点就可以了：</p>
<ul>
<li><p><code>.finally()</code>方法不管Promise对象最后的状态如何都会执行</p>
</li>
<li><p><code>.finally()</code>方法的回调函数不接受任何的参数，也就是说你在<code>.finally()</code>函数中是无法知道Promise最终的状态是<code>resolved</code>还是<code>rejected</code>的</p>
</li>
<li><p>它最终返回的默认会是一个上一次的Promise对象值，不过如果抛出的是一个异常则返回异常的Promise对象。</p>
<ul>
<li>return 没有用，除非return Promise.reject()</li>
</ul>
</li>
<li><p>finally本质上是then方法的特例</p>
</li>
</ul>
<p><code>.finally()</code>的错误捕获：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">  .finally(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;finally1&#x27;</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;我是finally中抛出的异常&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;finally后面的then函数&#x27;</span>, res)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;捕获错误&#x27;</span>, err)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<p>输出结果为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;finally1&#x27;</span><br><span class="line">&#x27;捕获错误&#x27; Error: 我是finally中抛出的异常</span><br></pre></td></tr></table></figure>

<h3 id="14-all"><a href="#14-all" class="headerlink" title="14. all"></a>14. all</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runAsync</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">r</span> =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> r(x, <span class="built_in">console</span>.log(x)), <span class="number">1000</span>))</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([runAsync(<span class="number">1</span>), runAsync(<span class="number">2</span>), runAsync(<span class="number">3</span>)]).then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res))</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">[1, 2, 3]</span><br></pre></td></tr></table></figure>

<p>首先，定义了一个Promise，来异步执行函数runAsync，该函数传入一个值x，然后间隔一秒后打印出这个x。</p>
<p>之后再使用<code>Promise.all</code>来执行这个函数，执行的时候，看到一秒之后输出了1，2，3，同时输出了数组[1, 2, 3]，三个函数是同步执行的，并且在一个回调函数中返回了所有的结果。并且结果和函数的执行顺序是一致的。</p>
<h3 id="15-all"><a href="#15-all" class="headerlink" title="15. all"></a>15. all</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runAsync</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">r</span> =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> r(x, <span class="built_in">console</span>.log(x)), <span class="number">1000</span>))</span><br><span class="line">  <span class="keyword">return</span> p</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runReject</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> rej(<span class="string">`Error: <span class="subst">$&#123;x&#125;</span>`</span>, <span class="built_in">console</span>.log(x)), <span class="number">1000</span> * x))</span><br><span class="line">  <span class="keyword">return</span> p</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Promise</span>.all([runAsync(<span class="number">1</span>), runReject(<span class="number">4</span>), runAsync(<span class="number">3</span>), runReject(<span class="number">2</span>)])</span><br><span class="line">       .then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res))</span><br><span class="line">       .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err))</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 1s后输出</span><br><span class="line">1</span><br><span class="line">3</span><br><span class="line">// 2s后输出</span><br><span class="line">2</span><br><span class="line">Error: 2</span><br><span class="line">// 4s后输出</span><br><span class="line">4</span><br></pre></td></tr></table></figure>

<p>可以看到。catch捕获到了第一个错误，在这道题目中最先的错误就是<code>runReject(2)</code>的结果。如果一组异步操作中有一个异常都不会进入<code>.then()</code>的第一个回调函数参数中。会被<code>.then()</code>的第二个回调函数捕获。</p>
<h3 id="16-race"><a href="#16-race" class="headerlink" title="16. race"></a>16. race</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runAsync</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">r</span> =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> r(x, <span class="built_in">console</span>.log(x)), <span class="number">1000</span>))</span><br><span class="line">  <span class="keyword">return</span> p</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Promise</span>.race([runAsync(<span class="number">1</span>), runAsync(<span class="number">2</span>), runAsync(<span class="number">3</span>)])</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;result: &#x27;</span>, res))</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err))</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">&#x27;result: &#x27; 1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure>

<p>then只会捕获第一个成功的方法，其他的函数虽然还会继续执行，但是不是被then捕获了。</p>
<h3 id="17-race"><a href="#17-race" class="headerlink" title="17. race"></a>17. race</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runAsync</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">r</span> =&gt;</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> r(x, <span class="built_in">console</span>.log(x)), <span class="number">1000</span>)</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runReject</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> rej(<span class="string">`Error: <span class="subst">$&#123;x&#125;</span>`</span>, <span class="built_in">console</span>.log(x)), <span class="number">1000</span> * x)</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Promise</span>.race([runReject(<span class="number">0</span>), runAsync(<span class="number">1</span>), runAsync(<span class="number">2</span>), runAsync(<span class="number">3</span>)])</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&quot;result: &quot;</span>, res))</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err));</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0</span><br><span class="line">Error: 0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure>

<p>可以看到在catch捕获到第一个错误之后，后面的代码还不执行，不过不会再被捕获了。</p>
<p>注意：<code>all</code>和<code>race</code>传入的数组中如果有会抛出异常的异步任务，那么只有最先抛出的错误会被捕获，并且是被then的第二个参数或者后面的catch捕获；但并不会影响数组中其它的异步任务的执行。</p>
<h2 id="async-await相关"><a href="#async-await相关" class="headerlink" title="async await相关"></a>async await相关</h2><h3 id="18-async"><a href="#18-async" class="headerlink" title="18. async"></a>18. async</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;async1 start&quot;</span>);</span><br><span class="line">  <span class="keyword">await</span> async2(); <span class="comment">// new Promise</span></span><br><span class="line">  <span class="comment">// .then</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;async1 end&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;async2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">async1();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;start&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">async1 start</span><br><span class="line">async2</span><br><span class="line">start</span><br><span class="line">async1 end</span><br></pre></td></tr></table></figure>

<p>代码的执行过程如下：</p>
<ol>
<li>首先执行函数中的同步代码<code>async1 start</code>，之后遇到了<code>await</code>，它会阻塞<code>async1</code>后面代码的执行，因此会先去执行<code>async2</code>中的同步代码<code>async2</code>，然后跳出<code>async1</code>；</li>
<li>跳出<code>async1</code>函数后，执行同步代码<code>start</code>；</li>
<li>在一轮宏任务全部执行完之后，再来执行<code>await</code>后面的内容<code>async1 end</code>。</li>
</ol>
<p><strong>这里可以理解为await后面的语句相当于放到了new Promise中，下一行及之后的语句相当于放在Promise.then中。</strong></p>
<h3 id="19-async"><a href="#19-async" class="headerlink" title="19. async"></a>19. async</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;async1 start&quot;</span>);</span><br><span class="line">  <span class="keyword">await</span> async2();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;async1 end&quot;</span>);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;timer1&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;timer2&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;async2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">async1();</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;timer3&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;start&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">async1 start</span><br><span class="line">async2</span><br><span class="line">start</span><br><span class="line">async1 end</span><br><span class="line">timer2</span><br><span class="line">timer3</span><br><span class="line">timer1</span><br></pre></td></tr></table></figure>

<p>代码的执行过程如下：</p>
<ol>
<li>首先进入<code>async1</code>，打印出<code>async1 start</code>；</li>
<li>之后遇到<code>async2</code>，进入<code>async2</code>，遇到定时器<code>timer2</code>，加入宏任务队列，之后打印<code>async2</code>；</li>
<li>由于<code>async2</code>阻塞了后面代码的执行，所以执行后面的定时器<code>timer3</code>，将其加入宏任务队列，之后打印<code>start</code>；</li>
<li>然后执行async2后面的代码，打印出<code>async1 end</code>，遇到定时器timer1，将其加入宏任务队列；</li>
<li>最后，宏任务队列有三个任务，先后顺序为<code>timer2</code>，<code>timer3</code>，<code>timer1</code>，没有微任务，所以直接所有的宏任务按照先进先出的原则执行。</li>
</ol>
<h3 id="20-async、new-Promise陷阱"><a href="#20-async、new-Promise陷阱" class="headerlink" title="20. async、new Promise陷阱"></a>20. async、new Promise陷阱</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;async1 start&#x27;</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;promise1&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;async1 success&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;async1 end&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;srcipt start&#x27;</span>)</span><br><span class="line">async1().then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;srcipt end&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">script start</span><br><span class="line">async1 start</span><br><span class="line">promise1</span><br><span class="line">script end</span><br></pre></td></tr></table></figure>

<p>这里需要注意的是在<code>async1</code>中<code>await</code>后面的Promise是没有返回值的，也就是它的状态始终是<code>pending</code>状态，所以在<code>await</code>之后的内容是不会执行的，包括<code>async1</code>后面的 <code>.then</code>。</p>
<h3 id="21-async"><a href="#21-async" class="headerlink" title="21. async"></a>21. async</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;async1 start&#x27;</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;promise1&#x27;</span>)</span><br><span class="line">    resolve(<span class="string">&#x27;promise1 resolve&#x27;</span>)</span><br><span class="line">  &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res))</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;async1 success&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;async1 end&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;srcipt start&#x27;</span>)</span><br><span class="line">async1().then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;srcipt end&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>这里是对上面一题进行了改造，加上了resolve。</p>
<p>输出结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">script start</span><br><span class="line">async1 start</span><br><span class="line">promise1</span><br><span class="line">script end</span><br><span class="line">promise1 resolve</span><br><span class="line">async1 success</span><br><span class="line">async1 end</span><br></pre></td></tr></table></figure>

<h3 id="22-async"><a href="#22-async" class="headerlink" title="22. async"></a>22. async</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;async1 start&quot;</span>);</span><br><span class="line">  <span class="keyword">await</span> async2();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;async1 end&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;async2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;script start&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;setTimeout&quot;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">async1();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;promise1&quot;</span>);</span><br><span class="line">  resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;promise2&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;script end&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">script start</span><br><span class="line">async1 start</span><br><span class="line">async2</span><br><span class="line">promise1</span><br><span class="line">script end</span><br><span class="line">async1 end</span><br><span class="line">promise2</span><br><span class="line">setTimeout</span><br></pre></td></tr></table></figure>

<p>代码执行过程如下： </p>
<ol>
<li>开头定义了async1和async2两个函数，但是并未执行，执行script中的代码，所以打印出script start；</li>
<li>遇到定时器Settimeout，它是一个宏任务，将其加入到宏任务队列；</li>
<li>之后执行函数async1，首先打印出async1 start；</li>
<li>遇到await，执行async2，打印出async2，并阻断后面代码的执行，将后面的代码加入到微任务队列；</li>
<li>然后跳出async1和async2，遇到Promise，打印出promise1；</li>
<li>遇到resolve，将其加入到微任务队列，然后执行后面的script代码，打印出script end；</li>
<li>之后就该执行微任务队列了，首先打印出async1 end，然后打印出promise2；</li>
<li>执行完微任务队列，就开始执行宏任务队列中的定时器，打印出setTimeout。</li>
</ol>
<h3 id="23-async、抛出错误"><a href="#23-async、抛出错误" class="headerlink" title="23. async、抛出错误"></a>23. async、抛出错误</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> async2();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;async1&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;async1 success&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;async2&#x27;</span>)</span><br><span class="line">    reject(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">async1().then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res))</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">async2</span><br><span class="line">Uncaught (in promise) error</span><br></pre></td></tr></table></figure>

<p>可以看到，如果async函数中抛出了错误，就会终止错误结果，不会继续向下执行。</p>
<p>如果想要让错误不足之处后面的代码执行，可以使用catch来捕获：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="built_in">Promise</span>.reject(<span class="string">&#x27;error!!!&#x27;</span>).catch(<span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">console</span>.log(e))</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;async1&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="string">&#x27;async1 success&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">async1().then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;script start&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>这样的输出结果就是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">script start</span><br><span class="line">error!!!</span><br><span class="line">async1</span><br><span class="line">async1 success</span><br></pre></td></tr></table></figure>

<h2 id="综合顺序相关"><a href="#综合顺序相关" class="headerlink" title="综合顺序相关"></a>综合顺序相关</h2><h3 id="24-微任务宏任务"><a href="#24-微任务宏任务" class="headerlink" title="24. 微任务宏任务"></a>24. 微任务宏任务</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> first = <span class="function">() =&gt;</span> (<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">7</span>);</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">5</span>);</span><br><span class="line">            resolve(<span class="number">6</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(p)</span><br><span class="line">        &#125;, <span class="number">0</span>)</span><br><span class="line">        resolve(<span class="number">1</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    resolve(<span class="number">2</span>);</span><br><span class="line">    p.then(<span class="function">(<span class="params">arg</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(arg);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;));</span><br><span class="line">first().then(<span class="function">(<span class="params">arg</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">4</span>);</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">7</span><br><span class="line">4</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">5</span><br><span class="line">Promise&#123;&lt;resolved&gt;: 1&#125;</span><br></pre></td></tr></table></figure>

<p>代码的执行过程如下：</p>
<ol>
<li>首先会进入Promise，打印出3，之后进入下面的Promise，打印出7；</li>
<li>遇到了定时器，将其加入宏任务队列；</li>
<li>执行Promise  p中的resolve，状态变为resolved，返回值为1；</li>
<li>执行Promise first中的resolve，状态变为resolved，返回值为2；</li>
<li>遇到p.then，将其加入微任务队列，遇到first().then，将其加入任务队列；</li>
<li>执行外面的代码，打印出4；</li>
<li>这样第一轮宏任务就执行完了，开始执行微任务队列中的任务，先后打印出1和2；</li>
<li>这样微任务就执行完了，开始执行下一轮宏任务，宏任务队列中有一个定时器，执行它，打印出5，由于执行已经变为resolved状态，所以<code>resolve(6)</code>不会再执行；</li>
<li>最后<code>console.log(p)</code>打印出<code>Promise&#123;&lt;resolved&gt;: 1&#125;</code>；</li>
</ol>
<h3 id="25-微任务宏任务、new-Promise"><a href="#25-微任务宏任务、new-Promise" class="headerlink" title="25. 微任务宏任务、new Promise"></a>25. 微任务宏任务、new Promise</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> async1 = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;async1&#x27;</span>);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;timer1&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">2000</span>)</span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;promise1&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;async1 end&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;async1 success&#x27;</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;script start&#x27;</span>);</span><br><span class="line">async1().then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;script end&#x27;</span>);</span><br><span class="line"><span class="built_in">Promise</span>.resolve(<span class="number">1</span>)</span><br><span class="line">  .then(<span class="number">2</span>)</span><br><span class="line">  .then(<span class="built_in">Promise</span>.resolve(<span class="number">3</span>))</span><br><span class="line">  .catch(<span class="number">4</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res))</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;timer2&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">script start</span><br><span class="line">async1</span><br><span class="line">promise1</span><br><span class="line">script end</span><br><span class="line">1</span><br><span class="line">timer2</span><br><span class="line">timer1</span><br></pre></td></tr></table></figure>

<p>代码的执行过程如下：</p>
<ol>
<li>首先执行同步带吗，打印出script start；</li>
<li>遇到定时器timer1将其加入宏任务队列；</li>
<li>之后是执行Promise，打印出promise1，由于Promise没有返回值，所以后面的代码不会执行；</li>
<li>然后执行同步代码，打印出script end；</li>
<li>继续执行下面的Promise，.then和.catch期望参数是一个函数，这里传入的是一个数字，因此就会发生值渗透，将resolve(1)的值传到最后一个then，直接打印出1；</li>
<li>遇到第二个定时器，将其加入到微任务队列，执行微任务队列，按顺序依次执行两个定时器，但是由于定时器时间的原因，会在两秒后先打印出timer2，在四秒后打印出timer1。</li>
</ol>
<h3 id="26-微任务宏任务"><a href="#26-微任务宏任务" class="headerlink" title="26. 微任务宏任务"></a>26. 微任务宏任务</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">&#x27;resolve3&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;timer1&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">  resolve(<span class="string">&#x27;resovle1&#x27;</span>);</span><br><span class="line">  resolve(<span class="string">&#x27;resolve2&#x27;</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)  <span class="comment">// resolve1</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(p1)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;).finally(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;finally&#x27;</span>, res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>执行结果为如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">resolve1</span><br><span class="line">finally  undefined</span><br><span class="line">timer1</span><br><span class="line">Promise&#123;&lt;resolved&gt;: undefined&#125;</span><br></pre></td></tr></table></figure>

<h3 id="27-process-nextTick"><a href="#27-process-nextTick" class="headerlink" title="27. process.nextTick"></a>27. process.nextTick</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">    process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;4&#x27;</span>);</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;6&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;7&#x27;</span>);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;8&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;9&#x27;</span>);</span><br><span class="line">    process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;10&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;11&#x27;</span>);</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;12&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">7</span><br><span class="line">6</span><br><span class="line">8</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">3</span><br><span class="line">5</span><br><span class="line">9</span><br><span class="line">11</span><br><span class="line">10</span><br><span class="line">12</span><br></pre></td></tr></table></figure>

<p><strong>（1）第一轮事件循环流程分析如下：</strong></p>
<ul>
<li>整体script作为第一个宏任务进入主线程，遇到<code>console.log</code>，输出1。</li>
<li>遇到<code>setTimeout</code>，其回调函数被分发到宏任务Event Queue中。暂且记为<code>setTimeout1</code>。</li>
<li>遇到<code>process.nextTick()</code>，其回调函数被分发到微任务Event Queue中。记为<code>process1</code>。</li>
<li>遇到<code>Promise</code>，<code>new Promise</code>直接执行，输出7。<code>then</code>被分发到微任务Event Queue中。记为<code>then1</code>。</li>
<li>又遇到了<code>setTimeout</code>，其回调函数被分发到宏任务Event Queue中，记为<code>setTimeout2</code>。</li>
</ul>
<table>
<thead>
<tr>
<th>宏任务Event Queue</th>
<th>微任务Event Queue</th>
</tr>
</thead>
<tbody><tr>
<td>setTimeout1</td>
<td>process1</td>
</tr>
<tr>
<td>setTimeout2</td>
<td>then1</td>
</tr>
</tbody></table>
<p>上表是第一轮事件循环宏任务结束时各Event Queue的情况，此时已经输出了1和7。发现了<code>process1</code>和<code>then1</code>两个微任务：</p>
<ul>
<li>执行<code>process1</code>，输出6。</li>
<li>执行<code>then1</code>，输出8。</li>
</ul>
<p>第一轮事件循环正式结束，这一轮的结果是输出1，7，6，8。</p>
<p><strong>（2）第二轮时间循环从</strong><code>**setTimeout1**</code><strong>宏任务开始：</strong></p>
<ul>
<li>首先输出2。接下来遇到了<code>process.nextTick()</code>，同样将其分发到微任务Event Queue中，记为<code>process2</code>。</li>
<li><code>new Promise</code>立即执行输出4，<code>then</code>也分发到微任务Event Queue中，记为<code>then2</code>。</li>
</ul>
<table>
<thead>
<tr>
<th>宏任务Event Queue</th>
<th>微任务Event Queue</th>
</tr>
</thead>
<tbody><tr>
<td>setTimeout2</td>
<td>process2</td>
</tr>
<tr>
<td></td>
<td>then2</td>
</tr>
</tbody></table>
<p>第二轮事件循环宏任务结束，发现有<code>process2</code>和<code>then2</code>两个微任务可以执行：</p>
<ul>
<li>输出3。</li>
<li>输出5。</li>
</ul>
<p>第二轮事件循环结束，第二轮输出2，4，3，5。</p>
<p><strong>（3）第三轮事件循环开始，此时只剩setTimeout2了，执行。</strong></p>
<ul>
<li>直接输出9。</li>
<li>将<code>process.nextTick()</code>分发到微任务Event Queue中。记为<code>process3</code>。</li>
<li>直接执行<code>new Promise</code>，输出11。</li>
<li>将<code>then</code>分发到微任务Event Queue中，记为<code>then3</code>。</li>
</ul>
<table>
<thead>
<tr>
<th>宏任务Event Queue</th>
<th>微任务Event Queue</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>process3</td>
</tr>
<tr>
<td></td>
<td>then3</td>
</tr>
</tbody></table>
<p>第三轮事件循环宏任务执行结束，执行两个微任务<code>process3</code>和<code>then3</code>：</p>
<ul>
<li>输出10。</li>
<li>输出12。</li>
</ul>
<p>第三轮事件循环结束，第三轮输出9，11，10，12。</p>
<p>整段代码，共进行了三次事件循环，完整的输出为1，7，6，8，2，4，3，5，9，11，10，12。</p>
<h3 id="28-微任务宏任务"><a href="#28-微任务宏任务" class="headerlink" title="28. 微任务宏任务"></a>28. 微任务宏任务</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span>  &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">  resolve(<span class="number">4</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">d</span> =&gt;</span> <span class="built_in">console</span>.log(d))</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">5</span>)</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span>  &#123;</span><br><span class="line">    resolve(<span class="number">6</span>)</span><br><span class="line">  &#125;).then(<span class="function"><span class="params">d</span> =&gt;</span> <span class="built_in">console</span>.log(d))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">7</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">8</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">3</span><br><span class="line">8</span><br><span class="line">4</span><br><span class="line">2</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td></tr></table></figure>

<p>代码执行过程如下：</p>
<ol>
<li>首先执行script代码，打印出1；</li>
<li>遇到第一个定时器，加入到宏任务队列；</li>
<li>遇到Promise，执行代码，打印出3，遇到resolve，将其加入到微任务队列；</li>
<li>遇到第二个定时器，加入到宏任务队列；</li>
<li>遇到第三个定时器，加入到宏任务队列；</li>
<li>继续执行script代码，打印出8，第一轮执行结束；</li>
<li>执行微任务队列，打印出第一个Promise的resolve结果：4；</li>
<li>开始执行宏任务队列，执行第一个定时器，打印出2；</li>
<li>此时没有微任务，继续执行宏任务中的第二个定时器，首先打印出5，遇到Promise，首选打印出6，遇到resolve，将其加入到微任务队列；</li>
<li>执行微任务队列，打印出6；</li>
<li>执行宏任务队列中的最后一个定时器，打印出7。</li>
</ol>
<h3 id="29-微任务宏任务"><a href="#29-微任务宏任务" class="headerlink" title="29. 微任务宏任务"></a>29. 微任务宏任务</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">  resolve(<span class="number">5</span>)</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">6</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">7</span>);</span><br></pre></td></tr></table></figure>

<p>代码输出结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">4</span><br><span class="line">7</span><br><span class="line">5</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">6</span><br></pre></td></tr></table></figure>

<p>代码执行过程如下：</p>
<ol>
<li>首先执行scrip代码，打印出1；</li>
<li>遇到第一个定时器setTimeout，将其加入到宏任务队列；</li>
<li>遇到Promise，执行里面的同步代码，打印出4，遇到resolve，将其加入到微任务队列；</li>
<li>遇到第二个定时器setTimeout，将其加入到红任务队列；</li>
<li>执行script代码，打印出7，至此第一轮执行完成；</li>
<li>指定微任务队列中的代码，打印出resolve的结果：5；</li>
<li>执行宏任务中的第一个定时器setTimeout，首先打印出2，然后遇到 Promise.resolve().then()，将其加入到微任务队列；</li>
<li>执行完这个宏任务，就开始执行微任务队列，打印出3；</li>
<li>继续执行宏任务队列中的第二个定时器，打印出6。</li>
</ol>
<h3 id="30-then和catch"><a href="#30-then和catch" class="headerlink" title="30. then和catch"></a>30. then和catch</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">&#x27;Error&#x27;</span>;</span><br><span class="line">&#125;).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">&#125;).catch(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">&#x27;Error&#x27;</span>;</span><br><span class="line">&#125;).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;4&#x27;</span>);</span><br><span class="line">&#125;).catch(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;5&#x27;</span>);</span><br><span class="line">&#125;).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;6&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>执行结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 </span><br><span class="line">3 </span><br><span class="line">5 </span><br><span class="line">6</span><br></pre></td></tr></table></figure>

<p>在这道题目中，我们需要知道，无论是thne还是catch中，只要throw 抛出了错误，就会被catch捕获，如果没有throw出错误，就被继续执行后面的then。</p>
<h3 id="31-微任务宏任务"><a href="#31-微任务宏任务" class="headerlink" title="31. 微任务宏任务"></a>31. 微任务宏任务</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">  resolve();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resove, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span>  &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">6</span>);</span><br><span class="line">    &#125;, <span class="number">10</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">7</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">8</span>);</span><br></pre></td></tr></table></figure>

<p>输出结果为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<p>代码执行过程如下：</p>
<ol>
<li>首先遇到定时器，将其加入到宏任务队列；</li>
<li>遇到Promise，首先执行里面的同步代码，打印出2，遇到resolve，将其加入到微任务队列，执行后面同步代码，打印出3；</li>
<li>继续执行script中的代码，打印出7和8，至此第一轮代码执行完成；</li>
<li>执行微任务队列中的代码，首先打印出4，如遇到Promise，执行其中的同步代码，打印出5，遇到定时器，将其加入到宏任务队列中，此时宏任务队列中有两个定时器；</li>
<li>执行宏任务队列中的代码，这里我们需要注意是的第一个定时器的时间为100ms，第二个定时器的时间为10ms，所以先执行第二个定时器，打印出6；</li>
<li>此时微任务队列为空，继续执行宏任务队列，打印出1。</li>
</ol>
<p>做完这道题目，我们就需要格外注意，每个定时器的时间，并不是所有定时器的时间都为0哦。</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>前端面经</category>
      </categories>
      <tags>
        <tag>微任务&amp;宏任务</tag>
        <tag>面经</tag>
      </tags>
  </entry>
  <entry>
    <title>爱してるばんざーい</title>
    <url>/2021/07/08/karaoke/karaoke1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=26111167&auto=1&height=66"></iframe>
<span id="more"></span>

<p>爱してるばんざーい!<br>aishiteru banzai!<br>ここでよかった　私たちの今がここにある<br>koko de yokatta    watashitachi no ima ga koko ni aru<br>爱してるばんざーい!<br>aishiteru banzai!<br>始まったばかり　明日もよろしくね　<br>hajimatta bakari     ashita mo yoroshikune </p>
<p>笑ってよ　悲しいなら吹きとばそうよ<br>waratteyo kanashii- nara    fukitoba sou–yo<br>笑えたら変わる景色　晴れ间がのぞく<br>warae tara kawaru keshiki    harema ga nozoku<br>不安でもしあわせへと繋がる道が<br>fuan demo shiawase eto tsunagaru michi ga<br>见えてきたよな青空<br>mietekita yona aozora<br>时々雨が降るけど水がなくちゃたいへん<br>tokidoki ame ga furukedo mizu ga nakucha taihen<br>乾いちゃだめだよ　みんなの梦の木よ育て<br>kawaicha damedayo    minna no yume no kiyo sodate—</p>
<p>さあ!<br>saa!<br>大好きだばんざーい!<br>daisukida banzai!<br>まけないゆうき　私たちは今を楽しもう<br>makenai yuuki    watashitachi wa ima o tanoshimou–<br>大好きだばんざーい!<br>daisukida banzai!<br>顽张れるから　昨日に手をふって　<br>ganbareru kara    kinou ni te o futte<br>ほら前向いて<br>hora    mae muite</p>
<p>进んでよ　苦しくても隣にいてよ<br>susundeyo kurushiku temo    tonari ni iteyo<br>进んだら燃える太阳　东を照らす<br>susundara moeru taiyou     higashi o terasu<br>迷ってた答えがない先への道は<br>mayotteta kokotae ga nai saki eno michi wa<br>谁も知らない言えない<br>dare mo shiranai ienai<br>突然岚のなかへ落ちる银のひかり<br>totsuzen arashi no naka e     ochiru gin no hikari<br>怯えちゃだめだよみんなの梦の木は强い<br>obiecha damedayo minna no yume no ki wa tsuyoi</p>
<p>さあ!<br>saa!<br>爱してるばんざーい!<br>aishiteru banzai!<br>ここでよかった　私たちの今がここにある<br>koko de yokatta watashitachi no ima ga koko ni aru</p>
<p>爱してるばんざーい!<br>aishiteru banzai!<br>始まったばかり　明日もよろしくね　<br>hajimatta bakari    ashita mo yoroshikune<br>まだゴールじゃない<br>mada GOORU janai</p>
<p>时々雨が降るんだ　风で干が揺れる<br>tokidoki ame ga furunda    kaze de miki ga yureru<br>一绪にいくんだ　みんなの梦の木よ育て<br>issho ni ikunda minna no yume no ki yo sodate</p>
<p>さあ!<br>saa<br>大好きだばんざーい!<br>daisukida banzai<br>まけないゆうき　私たちは今を楽しもう<br>makenai yuuki    watashitachi wa ima wo    tanoshi mou–<br>大好きだばんざーい!<br>daisukida banzai<br>顽张れるから　昨日に手をふって　<br>ganbareru kara   kinou ni te wofutte<br>ほら前向いて<br>hora    mae mui te</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>KTV小助手</category>
        <category>LoveLive</category>
      </categories>
  </entry>
  <entry>
    <title>Komm, süsser Tod</title>
    <url>/2021/07/08/karaoke/karaoke11/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1483488615&auto=1&height=66"></iframe>
<span id="more"></span>

<p>I know, I know I’ve let you down<br>我知道 我知道 是我让你失望了<br>I’ve been a fool to myself<br>对自己来说我不过是傻瓜<br>I thought that I could live for no one else<br>我一直以为我只能是为你而活<br>But now, through all the hurt and pain<br>但是现在却只是通过伤害和苦痛<br>It’s time for me to respect<br>到了我该有所敬畏的时候了<br>the ones you love mean more than anything<br>你爱的人比什么都重要<br>So with sadness in my heart<br>这真让我感觉满心苦楚<br>feel the best thing I could do<br>我想我真的该做<br>Is end it all and leave forever<br>结束了所有的一切 再永远地离开<br>What’s done is done it feels so bad<br>应该做的都已经做完 那是多么浩大的伤感<br>What once was happy now is sad<br>曾经的快乐现在成了悲伤<br>I’ll never love again my world is ending<br>我失去了再爱的心 我的世界已经完了<br>I wish that I could turn back time<br>我希望我能让时间倒转<br>‘Cos now the guilt is all mine<br>因为这都是我的罪孽<br>Can’t live without the trust from those you love<br>倘若是没有了你爱的信任我会无法生存<br>I know we can’t forget the past<br>我知道我们无法遗忘那些过去<br>You can’t forget love and pride<br>你也不能忘却爱和骄傲<br>Because of that it’s killing me inside<br>因为这样 这将把我扼杀</p>
<p>It all returns to nothing<br>一切化为乌有<br>It all comes tumbling down<br>所有的一切都倒下来吧<br>Tumbling down, tumbling down<br>倒下来 倒下来<br>It all returns to nothing<br>一切都化为了乌有<br>I just keep letting me down<br>我也让自己让我失望<br>Letting me down, letting me down<br>让我失望 让我失望<br>In my heart of hearts<br>在我内心深处<br>I know that I could never love again<br>我知道我再也不会有爱<br>I’ve lost everything, everything<br>我已经失去了所有<br>Everything that matters to me, matters in this world<br>一切与我有关的与这个世界有关的麻烦<br>I wish that I could turn back time<br>我希望我能让时间倒转<br>Cause now the guilt is all mine<br>因为这都是我的罪孽<br>Can’t live without the trust from those you love<br>倘若是没有了你爱的信任我会无法生存<br>I know we can’t forget the past<br>我知道我们无法遗忘那些过去<br>You can’t forget love and pride<br>你也不能忘却爱和骄傲<br>Because of that it’s killing me inside<br>因为这样 这将把我扼杀</p>
<p>It all returns to nothing<br>一切化为乌有<br>It just keeps tumbling down<br>所有的一切都倒下来吧<br>Tumbling down, tumbling down<br>倒下来 倒下来<br>It all returns to nothing<br>一切都化为了乌有<br>I just keep letting me down<br>我也让自己让我失望<br>Letting me down, letting me down<br>让我失望 让我失望</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>KTV小助手</category>
      </categories>
  </entry>
  <entry>
    <title>面经复盘1：贝壳前端暑期实习 2022-03-26</title>
    <url>/2022/03/26/interview/interview_Beike/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>贝壳暑期实习，2022-03-26，前端，下午场</p>
<p>第一次正式面试，有点紧张，流水面比较高压，但是纵深不会太深</p>
<p>面试模式：牛客外包，流水面，2技术面+1hr面</p>
<ul>
<li>面试结束会立刻通知下一面</li>
<li>需要扫码摇号排队</li>
</ul>
<p>需要加强理解：</p>
<ul>
<li>如何反问技术面试官</li>
<li>如何面对hr<ul>
<li>表现责任心、不一味强调个人追求</li>
<li>表现对公司的好奇和了解<ul>
<li>雷区：！！！工作地点一定要说那个公司的城市，提前看好！</li>
</ul>
</li>
<li>团队意识，整理一下团队经验</li>
<li>hr可能在套话<ul>
<li>其他投递公司可以实话实说（都在流程中）、</li>
<li>人设：精神状态正常，肯吃苦吧大概</li>
</ul>
</li>
<li>提问：公司架构，人才培养计划之类的</li>
</ul>
</li>
</ul>
<span id="more"></span>

<h1 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h1><p>自我介绍</p>
<p>html</p>
<ul>
<li>header footer标签有什么了解</li>
</ul>
<p>http</p>
<ul>
<li><p>post和get的区别 *** <a href="https://github.com/febobo/web-interview/issues/145">参考</a></p>
<ul>
<li>get怎么提交数据</li>
<li>get提交数据有什么缺点</li>
</ul>
</li>
<li><p>常用状态码</p>
<ul>
<li>503  504 *** <a href="https://mp.weixin.qq.com/s?__biz=MzA4MjkxMzMyNg==&mid=2654068952&idx=1&sn=1bd63a71610d73fcd563888d6f93398d&scene=24&srcid=0804843QrwLCsKWGYxfPum2H#wechat_redirect">参考</a><ul>
<li>503 Servive Unavailable 由于<strong>超载或系统维护</strong>，<strong>服务器暂时的无法处理客户端的请求</strong>。延时的长度可包含在服务器的Retry-After头信息中</li>
<li>504 Gateway Timeout <strong>充当网关或代理的服务器，未及时从远端服务器获取请求</strong>（通常是由于DNS解析）</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>css</p>
<ul>
<li><p>说下行内标签，块标签</p>
</li>
<li><p>less用过什么功能</p>
</li>
<li><p>css平时写什么布局</p>
<ul>
<li>flex用过什么属性</li>
</ul>
</li>
</ul>
<p>react</p>
<ul>
<li><p>函数式编程和类式编程区别</p>
</li>
<li><p>纯函数是什么 *** <a href="https://blog.csdn.net/c_kite/article/details/79138814">参考</a></p>
<ul>
<li>返回值只由输入参数决定</li>
<li>没有副作用（一个函数的执行过程产生了外部可观察的变化）</li>
</ul>
</li>
<li><p>平时用的什么构建工具，说了脚手架eject，less-loader</p>
</li>
</ul>
<p>js</p>
<ul>
<li><p>es6新特性了解</p>
<ul>
<li><p>let</p>
</li>
<li><p>promise</p>
</li>
</ul>
</li>
<li><p>数组用过什么方法</p>
<ul>
<li>forEach和map的区别，返回值不一样，forEach没有返回值</li>
</ul>
</li>
</ul>
<p>手写防抖</p>
<p>平时学习方法是什么</p>
<p>有什么问题</p>
<h1 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h1><p>自我介绍</p>
<ul>
<li>根据自我介绍问了下为什么学前端，怎么学的</li>
</ul>
<p>看项目，对React有什么了解</p>
<ul>
<li>state 副作用</li>
<li>redux怎么用的</li>
</ul>
<p>手写：红绿灯，10s绿灯，2s黄灯，10s红灯，循环 ***</p>
<ul>
<li>瞎写也没运行，问了setTimeout执行顺序 ***</li>
<li>setTimeout时间准确吗 <a href="https://blog.csdn.net/weixin_43862991/article/details/108838173">参考</a> ***</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>红绿灯<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#light</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: grey;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>实现红绿灯：循环亮，绿灯2s，黄灯1s，红灯2s<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;light&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> light=<span class="built_in">document</span>.getElementById(<span class="string">&#x27;light&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        light.style.backgroundColor=<span class="string">&quot;green&quot;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">setLight</span>(<span class="params">color, delay</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                    light.style.backgroundColor=color</span></span><br><span class="line"><span class="javascript">                    resolve()</span></span><br><span class="line"><span class="javascript">                &#125;,delay)</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 法1：直接then</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">trafficLight</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">Promise</span>.resolve().then(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> setLight(<span class="string">&#x27;yellow&#x27;</span>, <span class="number">2000</span>)</span></span><br><span class="line"><span class="javascript">            &#125;).then(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> setLight(<span class="string">&#x27;red&#x27;</span>, <span class="number">1000</span>)</span></span><br><span class="line"><span class="javascript">            &#125;).then(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> setLight(<span class="string">&#x27;green&#x27;</span>,<span class="number">2000</span>)</span></span><br><span class="line"><span class="javascript">            &#125;).then(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                trafficLight()</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">            </span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 法2：async await</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncTrafficLight</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">await</span> setLight(<span class="string">&#x27;yellow&#x27;</span>, <span class="number">2000</span>)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">await</span> setLight(<span class="string">&#x27;red&#x27;</span>, <span class="number">1000</span>)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">await</span> setLight(<span class="string">&#x27;green&#x27;</span>,<span class="number">2000</span>)</span></span><br><span class="line"><span class="javascript">            asyncTrafficLight()</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        </span></span><br><span class="line"><span class="javascript">        <span class="comment">// trafficLight()</span></span></span><br><span class="line"><span class="javascript">        asyncTrafficLight()</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        </span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>有什么问题</p>
<h1 id="HR面"><a href="#HR面" class="headerlink" title="HR面"></a>HR面</h1><p>自我介绍</p>
<p>简历上有几个项目，介绍一下你最能说的，说一下实现的功能，最有成就感的部分</p>
<p>有什么团队合作的项目经历</p>
<p>还面了什么公司，怎么会想投贝壳的</p>
<p>实习想学到什么，对工作内容和团队职责有什么预期</p>
<p>什么时候能实习，时间节点</p>
<p>有什么问题</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>前端面经</category>
        <category>复盘</category>
      </categories>
      <tags>
        <tag>面经</tag>
      </tags>
  </entry>
  <entry>
    <title>残酷な天使のテーゼ</title>
    <url>/2021/07/08/karaoke/karaoke10/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=657666&auto=1&height=66"></iframe>
<span id="more"></span>

<p>残酷な天使のように 少年よ 神话になれ<br>zankoku na tenshi no youni    shounen yo shinwa ni na re</p>
<p>苍い风がいま 胸のドアを叩いても<br>aoi kaze ga ima    mune no doa wo tatai temo<br>私だけを ただ见つめて 微笑んでるあなた<br>watashi dake wo    tada mitsume te    hohoen deru anata<br>そっとふれるもの もとめることに梦中で<br>sotto fureru mono    motomeru koto ni muchuu de<br>运命さえ まだ知らない いたいけな瞳<br>unmei sae    mada shiranai    itai ke na hi to mi</p>
<p>だけどいつか气付くでしょう その背中には<br>dakedo itsuka kitsuku deshyou    sono senaka ni wa<br>遥か未来 めざすための 羽根があること<br>haruka mirai mezasu tame no hane ga aru koto</p>
<p>残酷な天使のテ－ゼ 窗边からやがて飞び立つ<br>zankoku na tenshi no teeze    madobe kara yagate tobitatsu<br>ほとばしる热いパトスで 思い出を里切るなら<br>hotoba shiru atsui patosu de    omoide wo uragiru nara<br>この宇宙を抱いて辉く 少年よ 神话になれ<br>kono sora wo daite kagayaku    shounen yo shinwa ni na re</p>
<hr>
<p>ずっと眠ってる 私の爱の摇りかご<br>tsutto nemu u teru    watashi no ai no yurikago<br>あなただけが 梦の使者に 呼ばれる朝がくる<br>anata dake ga    yume no shisha ni    yobareru asa ga kuru<br>细い首筋を 月あかりが映してる<br>hosoi kubisuji wo    tsuki akari ga utsushi te ru<br>世界中の时を止めて 闭じこめたいけど<br>sekai chu u no toki wo tomete    tojikome tai ke do</p>
<p>もしもふたり逢えたことに 意味があるなら<br>moshimo futari aeta koto ni    imi ga aru na ra<br>私はそう 自由を知る ためのバイブル<br>watashi wa sou jiyuu wo shiru tame no baiburu</p>
<p>残酷な天使のテ－ゼ 悲しみがそしてはじまる<br>zankoku na tenshi no teeze    kanashimi ga soshite hajimaru<br>抱きしめた命のかたち その梦に目觉めたとき<br>dakishime ta inochi no katachi    so no yume ni mezameta toki<br>谁よりも光を放つ 少年よ 神话になれ<br>dare yori mo hikari wo hanatsu shounen yo shinwa ni na re</p>
<p>人は爱をつむぎながら 历史をつくる<br>hito wa ai wo tsumugi na ga ra    rekishi wo tsukuru<br>女神なんてなれないまま 私は生きる<br>megami nante nare nai mama    watashi wa ikiru</p>
<p>残酷な天使のテ－ゼ 窗边からやがて飞び立つ<br>zankoku na tenshi no teeze    madobe kara yagate tobitatsu<br>ほとばしる热いパトスで 思い出を里切るなら<br>hotoba shiru atsui patosu de    omoide wo uragiru nara<br>この宇宙を抱いて辉く 少年よ 神话になれ<br>kono sora wo daite kagayaku    shounen yo shinwa ni na re</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>KTV小助手</category>
      </categories>
  </entry>
  <entry>
    <title>VOYAGER～日付のない墓標</title>
    <url>/2021/07/08/karaoke/karaoke12/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1854433633&auto=1&height=66"></iframe>
<span id="more"></span>

<p>傷ついた友達さえ<br>Kizutsuita tomodachi sae<br>置き去りにできるソルジャー<br>Okizari ni dekiru sorujā(soldier)<br>あなたの苦しさを私だけに<br>Anata no kurushi-sa o watashi dakeni<br>つたえていってほしい<br>Tsutaete i  tte hoshī<br>忘れない<br>Wasurenai<br>自分のためだけに<br>Jibun no tame dake ni<br>生きられなかった淋さみしいひと<br>Iki rarenakatta Samishī hito</p>
<p>私があなたと知り合えたことを<br>Watashi ga anata to shiriaeta koto o<br>私があなたを愛してたことを<br>Watashi ga anata o aishi teta koto o<br>死ぬまで死ぬまで誇りにしたいから<br>Shinu made shinu made hokori ni shitaikara</p>
<p>冷い夢に乗り込んで<br>Tsumetai yume ni norikonde<br>宇宙に消えるヴォイジャー<br>aosora ni kieru vu~oijā(voyager)<br>いつでも人々を変えるものに<br>Itsu demo hitobito o kaeru mono ni<br>人々は気づかない<br>Hitobito wa kidzukanai<br>行く先は どれくらい遠いの<br>Yukusaki wa dore kurai tōi no<br>もう二度と戻れないの<br>Mō nidoto modorenai no</p>
<p>私があなたと知り合えたことを<br>Watashi ga anata to shiriaeta koto o<br>私があなたを愛してたことを<br>Watashi ga anata o aishi teta koto o<br>死ぬまで死ぬまで誇りにしたいから<br>Shinu made shinu made hokori ni shitaikara</p>
<p>私があなたと知り合えたことを<br>Watashi ga anata to shiriaeta koto o<br>私があなたを愛してたことを<br>Watashi ga anata o aishi teta koto o<br>死ぬまで死ぬまで誇りにしたいから<br>Shinu made shinu made hokori ni shitaikara<br>私があなたと知り合えたことを<br>Watashi ga anata to shiriaeta koto o<br>私があなたを愛してたことを<br>Watashi ga anata o aishi teta koto o<br>死ぬまで死ぬまで誇りにしたいから<br>Shinu made shinu made hokori ni shitaikara</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>KTV小助手</category>
      </categories>
  </entry>
  <entry>
    <title>銀の龍の背に乗って</title>
    <url>/2021/07/08/karaoke/karaoke13/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=28661544&auto=1&height=66"></iframe>
<span id="more"></span>

<p>あの苍（あお）ざめた海の彼方で<br>ano ao zame ta umi no kanata de<br>今まさに谁かが伤んでいる<br>ima masani dareka ga itande iru<br>まだ飞べない雏たちみたいに<br>mada tobenai hina-tachi mitai ni<br>仆はこの非力を叹いている<br>boku wa kono hiriki o nageite iru</p>
<p>急げ悲しみ 翼に変われ<br>isoge kanashimi tsubasa ni kaware<br>急げ伤迹 罗针盤になれ<br>isoge kizuato rashinban ni nare<br>まだ飞べない雏たちみたいに<br>mada tobenai hina-tachi mitai ni<br>仆はこの非力を叹いている<br>boku wa kono hiriki o nageite iru</p>
<p>梦が迎えに来てくれるまで<br>yume ga mukae ni kite kureru made<br>震えて待ってるだけだった昨日<br>furuete matte rudakeda  tta kinō<br>明日 仆は龙の足元へ崖を登り<br>ashita boku wa ryū no ashimoto e gake o nobori<br>呼ぶよ「さあ、行（い）こうぜ」<br>yobu yo &#96;sā, ikou ze’</p>
<p>银の龙の背に乗って<br>gin’no ryū no seni notte<br>届けに行こう 命の砂漠へ<br>todoke ni ikou inochi no sabaku e<br>银の龙の背に乗って<br>gin’no ryū no seni notte<br>运んで行こう 雨云の涡を<br>hakonde ikou amagumo no uzu o</p>
<hr>
<p>失うものさえ失ってなお<br>ushinau mono sae ushi natte nao<br>人はまだ谁かの指にすがる<br>hito wa mada dareka no yubi ni sugaru<br>柔らかな皮肤しかない理由（わけ）は<br>yawa raka na hifu shika nai wake wa<br>人が人の伤みを聴くためだ<br>hito ga hito no itami o kiku tameda</p>
<p>急げ悲しみ 翼に変われ<br>isoge kanashimi tsubasa ni kaware<br>急げ伤迹 罗针盤になれ<br>isoge kizuato rashinban ni nare<br>まだ飞べない雏たちみたいに<br>mada tobenai hina-tachi mitai ni<br>仆はこの非力を叹いている<br>boku wa kono hiriki o nageite iru</p>
<p>わたボコリみたいな翼でも<br>wata bokori mitaina tsubasa demo<br>木の芽みたいな頼りない爪でも<br>kinome mitai na tayori nai tsume demo<br>明日 仆は龙の足元へ崖を登り<br>ashita boku wa ryū no ashimoto e gake o nobori<br>呼ぶよ「さあ、行（い）こうぜ」<br>yobu yo &#96;sā, ikou ze’</p>
<p>银の龙の背に乗って<br>gin’no ryū no seni notte<br>届けに行こう 命の砂漠へ<br>todoke ni ikou inochi no sabaku e<br>银の龙の背に乗って<br>gin’no ryū no seni notte<br>运んで行こう 雨云の涡を<br>hakonde ikou amagumo no uzu o</p>
<p>银の龙の背に乗って<br>gin’no ryū no seni notte<br>运んで行こう 雨云の涡を<br>hakonde ikou amagumo no uzu o</p>
<p>银の龙の背に乗って<br>gin’no ryū no seni notte<br>银の龙の背に乗って<br>gin’no ryū no seni notte</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>KTV小助手</category>
      </categories>
  </entry>
  <entry>
    <title>硝子の花園</title>
    <url>/2021/07/08/karaoke/karaoke15/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=28341947&auto=1&height=66"></iframe>

<span id="more"></span>

<p>ユメの迷路…ユリの迷路…<br>Yume no meiro… Yuri no meiro…<br>憧れを語る目が<br>ako gare o kataru me ga<br>遠くを探してる時<br>tōku o sagashi teru toki<br>寂しくなる私は<br>Sabishi ku naru Watashi wa <br>ここにいると言いたいの<br>koko ni iru to iitai no</p>
<p>Ah!ふたりきりで硝子の花園へと<br>Ah! Futari kiri de   garasu no hanazono e to<br>誰もいない 誰もいらない<br>Dare mo inai   dare mo iranai<br>そっと＿（こ）われそうに咲きたい<br>Sotto koware sō ni sakitai</p>
<p>秘密のブランコ<br>Himitsu no buranko<br>あなたと揺られながら今<br>Anata to yure nagara ima<br>ただ優しく見つめあうの<br>Tada yasashiku mitsume au no</p>
<p>恋に恋する少女の静かな溜息は<br>Koi ni koisuru shōjo no shizukana tameiki wa<br>Lonely…満ち足りたLonely<br>Lonely… michi tarita Lonely…</p>
<p>閉じこめたい心を<br>toji kome tai kokoro o<br>どこにも行かない様に<br>dokoni mo ika nai yō ni<br>寂しいのよ<br>Sabishī no yo<br>私と＿＿（ここ）にいてよいつまでも<br>Watashi to koko ni iteyo itsu made mo<br>Ah!ユメの迷路 硝子の蝶々たちは<br>Ah! Yume no meiro garasu no chōchō tachi wa<br>誘いながら 誘われてる<br>Sasoi nagara sasowa re teru<br>指で＿（こ）われそうな羽ばたき<br>Yubi de koware sōna haba taki</p>
<p>内緒のロマンス<br>Naisho no romansu<br>あなたを感じたいのに<br>Anata o kanji tai noni<br>まだ切なく見つめるだけ<br>Mada setsu naku mitsu meru dake<br>恋を恋する少女でいられない気持ちに<br>Koi o koisuru shōjo de i rarenai kimochi ni<br>なぜ…苦しくなるの？<br>Naze… Kurushi ku naru no?</p>
<hr>
<p>ふたりきりの花園で眠りにつく<br>Futari kiri no hanazono de nemuri ni tsuku<br>髪を撫でるその手が好き もっと…<br>Kami o nade ru sono te ga suki motto…</p>
<p>内緒のロマンス<br>Naisho no romansu<br>あなたを感じたいのに<br>Anata o kanji tai noni<br>まだ切なく見つめるだけ<br>Mada setsu naku mitsu meru dake<br>恋を恋する少女でいられない気持ちに<br>Koi o koi suru shōjo de i rare nai kimochi ni<br>なぜ…苦しくなるの？<br>Naze… Kurushi ku naru no?</p>
<p>秘密のブランコ<br>Himitsu no buranko<br>あなたと揺られながら今<br>Anata to yure nagara ima<br>ただ優しく見つめあうの<br>Tada yasashi ku mitsume au no</p>
<p>恋に恋する少女の静かな溜息は<br>Koi ni koi suru shōjo no shizu kana tameiki wa<br>Lonely…満ち足りたLonely<br>Lonely… Michi tarita Lonely…<br>ユメの迷路…ユリの迷路…<br>Yume no meiro… Yuri no meiro…</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>KTV小助手</category>
        <category>LoveLive</category>
      </categories>
  </entry>
  <entry>
    <title>START:DASH!!</title>
    <url>/2021/07/08/karaoke/karaoke14/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=26218091&auto=1&height=66"></iframe>

<span id="more"></span>

<p>I say…<br>Hey, hey, hey, START:DASH!!<br>Hey, hey, hey, START:DASH!!<br>うぶ毛の小鸟たちも<br>ubuke no kotori tachi mo<br>いつか空に羽ばたく<br>itsuka sora ni habataku<br>大きな强い翼で飞ぶ<br>ookina tsuyoi tsubasa de tobu<br>谛めちゃダメなんだ<br>akirame cha dame nanda<br>その日が绝対来る<br>sono hi ga zettai kuru<br>君も感じてるよね<br>kimi mo kanji teru yone<br>始まりの鼓动<br>hajimari no kodou</p>
<p>明日よ変われ!<br>ashitayo kaware !<br>希望に変われ!<br>kibou ni kaware !<br>眩しい光に照らされて変われ<br>mabushii hikari ni tera sarete kaware<br>START!!</p>
<p>悲しみに闭ざされて<br>kana shimi ni toza sarete<br>泣くだけの君じゃない<br>naku dakeno kimi janai<br>热い胸　きっと未来を切り开く筈さ<br>atsui mune kitto mirai wo kiri hiraku hazusa<br>悲しみに闭ざされて<br>kana shimi ni toza sarete<br>泣くだけじゃつまらない<br>naku dake ja tsuma ranai<br>きっと （きっと） 君の （梦の）<br>kitto ( kitto ) kimi no ( yume no )<br>チカラ （いまを） 动かすチカラ<br>chikara ( ima wo ) ugo kasu chikara<br>信じてるよ…だから START!!<br>shinji teru yo … dakara START!!</p>
<p>雨上がりの気分で<br>ame agari no kibun de<br>高まる期待のなか<br>taka maru kitai no naka<br>踬いたことさえも<br>tsuma zuita koto saemo<br>思い出にしよう<br>omoide ni shiyou<br>明日が咲くよ!<br>ashita ga sakuyo !<br>希望が咲くよ!<br>kibou ga sakuyo !<br>楽しいメロディー口ずさみ咲いた<br>tanoshii melody- kuchi zu sami saita<br>DASH!!</p>
<p>喜びを受けとめて<br>yoro kobi wo uke tomete<br>君と仆つながろう<br>kimi to boku tsuna garou<br>迷い道　やっと外へ抜けだした筈さ<br>mayoi michi yatto soto e nuke dashita hazusa<br>喜びを受けとめて<br>yoro kobi wo uke tomete<br>君と仆　进むだろう<br>kimi to boku susumu darou<br>それは （それは） 远い （梦の）<br>sore wa ( sore wa ) tooi ( yume no )<br>カケラ （だけど） 爱しいカケラ<br>kakera ( dakedo ) itoshii kakera<br>彼方へと…仆は DASH!!<br>kanata eto … boku wa DASH!!<br>またひとつ　梦が生まれ…</p>
<p>mata hitotsu yume ga umare …<br>悲しみに闭ざされて<br>kana shimi ni toza sarete<br>泣くだけの君じゃない<br>naku dakeno kimi janai<br>热い胸　きっと未来を切り开く筈さ<br>atsui mune kitto mirai wo kiri hiraku hazusa<br>喜びを受けとめて<br>yorokobi wo uketomete<br>君と仆つながろう<br>kimi to boku tsuna garou<br>迷い道　やっと外へ抜けだした筈さ<br>mayoi michi yatto soto e nuke dashita hazusa</p>
<p>喜びを受けとめて<br>yoro kobi wo uke tomete<br>君と仆　进むだろう<br>kimi to boku susumu darou<br>それは （それは） 远い （梦の）<br>sore wa ( sore wa ) tooi ( yume no )<br>カケラ （だけど） 爱しいカケラ<br>kakera ( dakedo ) itoshii kakera<br>彼方へと…仆は DASH!!<br>kanata eto … boku wa DASH!!</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>KTV小助手</category>
        <category>LoveLive</category>
      </categories>
  </entry>
  <entry>
    <title>美しきもの</title>
    <url>/2021/07/08/karaoke/karaoke16/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1384973305&auto=1&height=66"></iframe>
<span id="more"></span>

<p>君(きみ)の大好(だいす)きな<br>kimi no daisuki na<br>この旋律(Melodie)…<br>kono Melodie…<br>大空(おおぞら)へと<br>o osora e to<br>响(ひび)け口风琴(Harmonica)…<br>hibi ke Haramonica…</p>
<p>*天使(てんし)が抱(いだ)いた<br>*tenshi ga daita<br>まどわくの画布(Tolie)…<br>mado waku no toiwa…<br>ねえ…その风景画(Paysage)…<br>nee…sono Paysage…<br>绮丽(きれい)かしら?<br>kirei kashira?</p>
<p>(C’est)——<br>C’est–<br>风(かぜ)が运(はこ)んだ…<br>kaze ga hakonda…<br>淡(あわ)い花弁(はなびら)…<br>awai hana bira…<br>春(はる)の追想(ついそう)…<br>haru no tsui sou…</p>
<p>绮丽(きれい)な音(ね)…<br>kirei na ne…<br>呗(うた)うモニカ…<br>uta u Monica…<br>鸟(とり)の啭(さえず)り…<br>tori no sae zuri…<br>针(はり)は进(すす)んだ<br>hari wa susunda</p>
<p>(C’est)——<br>C’est–<br>苍(あお)が繋(つな)いで…<br>aoga tsunai de…<br>流(なが)れる云(くも)…<br>naga reru kumo…<br>夏(なつ)の追想(ついそう)…<br>natsu no tsuisou…<br>绮丽(きれい)な音(ね)…<br>kirei na ne…<br>谣(うた)うモニカ…<br>utau Monica<br>蝉(せみ)の时雨(しぐれ)…<br>semi no shigure…<br>针(はり)は进(すす)んだ<br>hari wa susun da</p>
<p>绮丽(きれい)だと…<br>kirei dato…<br>君(きみ)が言(い)った景色(けしき)…<br>kimi ga itta keshiki…<br>きつと忘(わす)れない…<br>kitto wasure nai…</p>
<p>『美(うつく)しきもの』…<br>『utsuku shi kimono』…<br>集(あつ)める为(ため)に…<br>atsu meru tameni…<br>生命(ひと)はやあって来(く)る … …<br>hito wa yaate kuru</p>
<p>君(きみ)が抱(だ)きしめた<br>kimi ga daki shimeta<br>短(みじか)い季节(Saison)…<br>miji kai Saison…<br>痛(いた)みの雨(あめ)に<br>itami no ame ni<br>打(う)たれながら…<br>utare nagara…</p>
<p>「心配(しんぱい)ないよ」…<br>「shinbai naiyo」…<br>笑(わら)って言(い)った…<br>warate itta…<br>君(きみ)の様相(Visage)<br>kimi no Visage<br>忘(わす)れないよ… …<br>wasure nai yo……</p>
<p>(C’est)——<br>C’est–<br>夜(よる)の窓(まど)边(べ)に…<br>yoru no madobe ni…<br>微笑(ほほえ)む月(つき)…<br>hohoe mu tsuki…<br>秋(あき)の追想(ついそう)…<br>aki no tsuisou…</p>
<p>绮丽(きれい)な音(ね)<br>kirei na ne<br>咏(うた)うモニカ…<br>utau Monica<br>虫(むし)の羽音(はおと)…<br>mushi no ha oto<br>针(はり)は进(すす)んだ<br>hari wa susunda</p>
<p>(C’est)——<br>C’est–<br>大地(だいち)を包(つつ)み…<br>daichi wo tsutsu mi…<br>微睡(まどろ)む雪(ゆき) …<br>madoro mu yuki…<br>冬(ふゆ)の追想(ついそう)<br>fuyu no tsuisou</p>
<p>绮丽(きれい)な音(ね)…<br>kirei na ne…<br>讴(うた)うモニカ…<br>utau Monica…<br>时(とき)の木枯(こが)らし…<br>toki no koga rashi…<br>针(はり)は进(すす)んだ →<br>hari wa susunda →</p>
<p>绮丽(きれい)だね…<br>kirei dane…<br>君(きみ)が生(い)きた景色(けしき)…<br>kimi ga ikita keshiki…<br>ずつと忘(わす)れない…<br>zutto wasure nai…</p>
<p>『美(うつく)しきもの』…<br>『utsuku shi kimono』…<br>集(あつ)める为(ため)に…<br>atsumeru tameni…<br>生命(いの)は过(す)ぎて行(ゆ)く…<br>ino wa sugite yuku…</p>
<p>君(きみ)が駆(か)け抜(ぬ)けた<br>kimi ga kake nuke ta<br>眩(まばゆ)い季节(Saison)…<br>mabayui Saison…<br>病(やまい)の焔(ほむら)に<br>yamai no homura ni<br>焼(や)かれながら…<br>yakare nagara…</p>
<p>「呜呼(ああ)…绮丽(きれい)だね」…<br>「aa…kirei dane」…<br>笑(わら)って逝(い)った<br>wara tte itta<br>君(きみ)の面影(Image)<br>kimi no Image<br>忘(わす)れないよ…<br>wasure nai yo…</p>
<p>君(きみ)が生(う)まれた朝(あさ)…<br>kimi ga umare ta asa…<br>泣(な)き虫(むし)だつた私(わたし)は…<br>naki mushi datta watashi wa…<br>小(ちい)さくても姉(あね)となつた——<br>chiisa ku temo ane to natta–</p>
<p>嬉(うれ)しくて<br>ureshi kute<br>少(すこ)し照(て)れくさくて…<br>sukoshi tereku sa kute…<br>とても夸(ほこ)らしかった… …<br>totemo hokorashi katta……</p>
<p>苦(くる)しみに摇荡(ゆうか)う<br>kuru shimi ni yukau<br>生(なま)の荒野(あらの)を<br>seii no kouya wo<br>「美(うつく)しきもの」探(さが)すように<br>「utsuku shi kimo 」saga suyouni<br>駆(か)け抜(ぬ)けた<br>kake nu keta</p>
<p>果(は)てしなき地平(ちへい)へ<br>hateshi naki chiei e<br>旅立(たびだ)つ君(きみ)の<br>tabi da tsu kimi no<br>寝颜(ねがお)何(なに)より<br>negeo nani yori<br>美(うつく)しいと思(おも)ったよ… …<br>utsuku shii to omo tsu tayo……</p>
<p>君(きみ)の大好(だいす)きな<br>kimi no daisukina<br>この旋律(Melodie)…<br>kono Melodie…<br>大空(おおぞら)へと<br>oosora e to<br>响(ひび)け口风琴(Harmonica)…<br>hibi ke Haramonica…</p>
<p>*天使(てんし)が抱(いだ)いた<br>*tenshi ga daita<br>まどわくの画布(Tolie)…<br>mado waku no toiwa…<br>ねえ…その风景画(Paysage)…<br>nee…sono Pay sage…<br>绮丽(きれい)かしら?<br>kirei kashira?</p>
<p>私(わたし)は 世界(せかい)で一番(いちばん)<br>美(うつく)しい光(ひかり)を见(みる)つた<br>watashi wa sekai de ichi ban<br>utsuku shii hikari wo miru tsuta<br>その花(はな)を胸(むね)に抱(いだ)いて<br>sono hana wo mune ni idaite<br>laurantの分(ぶん)も 咏(うた)い続(つづ)けよう<br>laurant no fun mo utaitsutsuke you<br>「其処(そのか)にロマンは在(あ)るのかしら?」<br>「sono ka ni ROMANSU wa aru no kashira?」</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>KTV小助手</category>
      </categories>
  </entry>
  <entry>
    <title>トライアングラー (triangular)</title>
    <url>/2021/07/12/karaoke/karaoke18/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=589146&auto=1&height=66"></iframe>

<span id="more"></span>

<p>君(きみ)は谁(だれ)とキスをする <br>kimi wa dare to kisu wo suru<br>私(わたし)それともあの子(こ)？<br>watashi soretomo anoko<br>君(きみ)は谁(だれ)とキスをする<br>kimi wa dare to kisu wo suru<br>星(ほし)を巡(めぐ)るよ纯情(じゅんじょう)<br>hoshi wo meguru yo junjou        </p>
<p>弱虫(よわむし)泣(な)き虫(むし)连(つ)れて<br>yowamushi nakimushi tsurete<br>また行(い)くんだと思(おも)う私(わたし)<br>mada ikun da to omou watashi<br>爱(あい)するより求(もと)めるより<br>aisuru yori motomeru yori<br>疑(うたが)う饱和(ほうわ)がずっと<br>utagau hou ga zutto<br>容易(たやす)い 自分(じぶん)が悔(くや)しい<br>tayasui jibun ga kuyashii        </p>
<p>痛(いた)いよ<br>itai yo<br>味方(みかた)だけど  爱(あい)してないとか<br>mikata dakedo aishite nai toka<br>守(まも)るけど 傍(そば)に居(い)れないとか<br>mamoru kedo soba ni ire nai toka<br>苦い 二律背反(にりつはいはん) <br>nigai niritsu haihan<br>今(いま)すぐ Touch me<br>imasugu tacchimi-<br>运命(うんめい)ならば 繋(つな)がせて<br>unmei naraba tsuna gasete        </p>
<p>君(きみ)は谁(だれ)とキスをする <br>kimi wa dare to kisu wo suru<br>私(わたし)それともあの子(こ)？<br>watashi soretomo anoko<br>心(こころ)揺(ゆ)らす言叶(ことば)より<br>kokoro yurasu kotoba yori<br>无责任(むせきにん)に抱(だ)いて限界(げんかい)<br>mu sekinin ni daite genkai        </p>
<p>妄想(もうそう)の砂漠(さばく)をきって <br>mousou wo sabaku okite<br>后(うし)ろから蹴(け)り上(あ)げたら<br>ushiro kara keri age tara<br>むき出(だ)しの恋(こい)によろけた<br>mukidashi no koi ni yoroketa<br>呼吸(こきゅう)だけで精一杯(せいいっぱい)<br>kokyuu dake de seiippai<br>迎(むか)えに来(き)て  覚(おぼ)えてるから<br>mukae ni kite obore teru kara        </p>
<p>痛(いた)いよ<br>itai yo<br>前向(まえむ)きな嘘(うそ)  真(まな)に受(う)けるのは<br>maemuki na uso ma ni ukeru nowa<br>笑(わら)ってると 正解(せいかい)が无(な)いから<br>waratteru koe segamenai kara<br>持(も)て余(あま)して <br>mirai moteamashita<br>今(いま)すぐ Hold me<br>imasugu hold me<br>理性(りせい)なんて 押(お)し倒(たお)して<br>risei nante oshitaoshite        </p>
<p>君(きみ)は谁(だれ)とキスをする <br>kimi wa dare to kisu wo suru<br>私(わたし)それともあの子(こ)？<br>watashi soretomo watashi<br>涙(なみだ)まるで役立(やくだ)たず<br>namida marude yakutatazu<br>星(ほし)を翔(かけ)けるよ纯情(じゅんじょう)<br>hoshi wo kakeru yo junjou        </p>
<p>君は誰とキスをする<br>kimi wa dare to kisu wo suru<br>君は誰とキスをする<br>kimi wa dare to kisu wo suru<br>私それともあの子？<br>watashi soretomo watashi<br>たった一つ命を盾に<br>tatta hitotsu inochi wo tate ni<br>今振りかざす感傷<br>ima furikazasu kanshou        </p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>KTV小助手</category>
      </categories>
  </entry>
  <entry>
    <title>Soldier Game</title>
    <url>/2021/07/12/karaoke/karaoke17/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=26214458&auto=1&height=66"></iframe>

<span id="more"></span>

<p>Three,two,one,zero!<br>Three, two, one zero<br>ここで登场<br>Koko de toujou<br>见てなさい 私の本气<br>Mite nasai watashi no honki<br>スリルと美意识で胜つのよ必ず<br>Thrill to biishiki de katsu no yo kanarazu        </p>
<p>优しげな言叶ささやく<br>Yasashigena kotoba sasayaku<br>伪(にせ)のさじゃなくて<br>Nise no kawaisa janakute<br>冷たく强く守らなきゃ<br>Tsumetaku, tsuyoku, mamoranakya<br>切なモノ达 弱きモノ达<br>Taisetsuna monotachi, yowaki monotachi        </p>
<p>私は谁でしょ? 知りたくなったでしょう?<br>Watashi wa dare desho, shiritaku natta deshou<br>ならば恋かも<br>Naraba koi kamo<br>私のには秘密があるとして<br>Watashi no naka ni wa himitsu ga aru to shite<br>それを君はどうするの<br>Sore wo kimi wa do suru no<br>It’s soldier game<br>It’ s soldier game<br>またえた 讯こうかな<br>Mata aeta toki, kikou ka na        </p>
<p>Three,two,one,zero!<br>Three, two, one zero<br>つぎの作战<br>Tsugi no sakusen<br>见てなさい 私は本气<br>Mitenasai watashi wa honki<br>シグナル受けとめて未を顶く<br>Signal uketomete mirai wo itadaku        </p>
<p>微笑みよりも甘いのは<br>Hohoemi yori mo amai no wa<br>嘘が招いた泪よ<br>Uso ga maneita namida yo<br>儚さ脆さ隐してる<br>Hakanasa, morosa kakushiteru<br>切なモノなの 弱きモノなの<br>Taisetsuna mono nano yowaki mono nano        </p>
<p>私とるでしょ? 触れたくなったでしょう?<br>Watashi to kuru desho, furetaku natta deshou<br>すでに恋だよ<br>Sude ni koi da yo<br>私といつかは战うべき相手<br>Watashi to itsuka wa tatakaubeki aite<br>それは君の理性かも<br>Sore wa kimi no risei kamo<br>I’m soldier heart<br>I’m soldier heart<br>负けないからね It’s soldier game<br>Makenai kara ne, it’s soldier game        </p>
<p>Come on!<br>Come on!<br>いまが胜负よ!<br>Ima ga shoubu yo<br>私は谁でしょ? 知りたくなったでしょう?<br>Watashi wa dare deshou, shiritaku natta deshou<br>ならば恋かも<br>Naraba koi kamo<br>私のには秘密があるとして<br>Watashi no naka ni wa himitsu ga aru to shite<br>それを君は?<br>Sore wo kimi wa        </p>
<p>私とるでしょ? 触れたくなったでしょう?<br>Watashi to kuru desho, furetaku natta deshou<br>すでに恋だよ<br>Sude ni koi da yo<br>私といつかは战うべき相手<br>Watashi to itsuka wa tatakaubeki aite<br>それは君の理性かも<br>Sore wa kimi no risei kamo<br>It’s soldier game<br>It’s soldier game<br>またえたのに I’m soldier heart<br>Mata aeta no ni, I’m soldier heart        </p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>KTV小助手</category>
        <category>LoveLive</category>
      </categories>
  </entry>
  <entry>
    <title>snow halation</title>
    <url>/2021/07/08/karaoke/karaoke2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=28768036&auto=1&height=66"></iframe>
<span id="more"></span>

<p>不思议だね いまの気持ち<br>fushigi dane    imano kimochi<br>空から降ってきたみたい<br>sora ka ra   futte kita mitai–<br>特别な季节の色が ときめきを见せるよ<br>tokubetsu na kisetsu no iro ga    tokimekiwo mise ruyo<br>初めて出会った时から<br>hajimete deatta toki kara<br>予感に騒ぐ心のMelody<br>yokan ni sawagu    kokoro no Melody<br>とめられないとまらない な??ぜ<br>tomerarenai tomaranai    naze</p>
<p>届けて<br>todoke te<br>切なさには名前をつけようか“Snow halation”<br>setsuna saniwa    namae wo    tsukeyouka “ Snow halation “<br>想いが重なるまで待てずに<br>omoi ga    kasana rumade    mate zuni<br>悔しいけど好きって纯情<br>kuyashi ikedo    suki tte junjou<br>微热の中 ためらってもダメだね<br>binetsu no naka    tamerattemo dame dane<br>飞び込む勇気に賛成 まもなくStart!!<br>tobikomu yuuki ni sansei    mamonaku Start!!</p>
<p>音もなく 気配もなく<br>oto monaku    kehai- monaku<br>静かに运命は変わる<br>shizuka ni un-mei wa kawa ru<br>これからの未来に胸の 鼓动が早くなる<br>korekarano mirai ni mune no    kodou ga hayaku naru<br>例えば困った时には<br>tatoeba    komatta tokini wa<br>すぐ駆けつけて抱きしめたくて<br>sugu kake tsukete    daki shimetakute<br>どこにいてもどこでも Fly high<br>dokoniitemo dokodemo    Fly high</p>
<p>急いで<br>isoi de<br>いつの间にか大きくなりすぎた“True emotion”<br>itsuno mani ka    ookiku narisugita “ True emotion “<br>梦だけみてる様じゃつらいよ<br>yume dake miteru you ja    tsuraiyo<br>恋人は君って言いたい<br>koibito wa kimi tte ii tai<br>优しい目が とまどってるイヤだよ<br>yasashii me ga    tomadotteru iya dayo<br>このまま一気に爱情 あずけて Please!!<br>konomama ikki ni aijou azukete Please!!</p>
<p>届けて<br>todoke te<br>切なさには名前をつけようか“Snow halation”<br>setsuna saniwa    namae wo    tsukeyouka “ Snow halation “<br>想いが重なるまで待てずに<br>omoi ga kasana rumade     mate zuni<br>悔しいけど好きって纯情<br>kuyashi ikedo    suki tte junjou<br>微热の中 ためらってもダメだね<br>binetsu no naka    tamerattemo dame dane<br>飞び込む勇気に賛成 まもなくStart!!<br>tobikomu yuuki ni sansei    mamonaku Start!!</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>KTV小助手</category>
        <category>LoveLive</category>
      </categories>
  </entry>
  <entry>
    <title>辉夜の城で踊りたい</title>
    <url>/2021/07/08/karaoke/karaoke4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=26279806&auto=1&height=66"></iframe>
<span id="more"></span>

<p>おいで!おいで!诱惑のDance again<br>oide! oide! yuuwaku no Dance again<br>おいでよおいで!辉夜(かぐや)の城へ<br>oide yo oide! kaguya no shiro e<br>出逢いがあやつるミステリー<br>deai ga ayatsuru misuteri-<br>危険なペルソナ<br>kikenna perusona</p>
<p>踊ろう!踊ろう!终わらないDance beat<br>odorou! odorou! owaranai Dance beat<br>踊ろうよ踊ろう!辉夜の城で<br>odorou yo odorou! kaguya no shiro de<br>夜空を切りとるレーザービーム<br>yozora wo kiritoru re-za-bi-mu<br>私と见てよ?<br>watashi to mite yo?</p>
<p>まばゆい星が照らす想い<br>mabayui hoshi ga terasu omoi<br>今宵の梦よ永远(とわ)に<br>koyoi no yume yo towa ni<br>明日(あす)のことは忘れたいの<br>asu no    koto wa    wasuretai no</p>
<p>私は红い蔷薇の姫よ 优しくさらわれたい<br>watashi wa akai bara no hime yo yasashiku sarawaretai<br>そっと嗫いて意味ありげに目をそらす<br>sotto sasayaite imiarige ni me wo sorasu<br>あなたは白い月の骑士(ナイト) 触れた手がまだ热い<br>anata wa shiroi tsuki no naito fureta te ga mada atsui<br>のがさずに抱きしめて<br>nogasazu ni dakishimete<br>この奇迹を恋と呼ぶのね<br>kono kiseki wo koi to yobu no ne</p>
<p>おいで!おいで!情热でDance again<br>oide! oide! jounetsu de Dance again<br>おいでよおいで!辉夜の城へ<br>oide yo oide! kaguya no shiro e<br>迷いを饮みこむエナジー<br>mayoi wo nomikomu enaji-<br>眠らぬパッショネイト<br>nemuranu passhoneito</p>
<p>踊ろう!踊ろう!止まらないDance beat<br>odorou! odorou! tomaranai Dance beat<br>踊ろうよ踊ろう!辉夜の城で<br>odorou yo odorou! kaguya no shiro de<br>星座が织りなすディスコティーク<br>seiza ga orinasu disukoti-ku<br>私も混ぜて?<br>watashi mo    mazete?</p>
<p>きらめく星に誓う心<br>kirameku hoshi ni chikau kokoro<br>儚い梦でいいわ<br>hakanai yume de ii wa<br>明日は明日の风が吹くの<br>asu wa asu no kaze ga fuku no<br>私は黒い蔷薇の姫よ 激しくさらわれたい<br>watashi wa kuroi bara no hime yo hageshiku sarawaretai<br>だから微笑んで追いかけてと目が诱う<br>dakara hohoende oikakete to me ga sasou<br>あなたも黒い月の骑士 瞳の奥は热い<br>anata mo kuroi tsuki no naito hitomi no oku wa atsui<br>つかまえて抱きしめて<br>tsukamaete dakishimete<br>この奇迹は恋を呼ぶのね<br>kono kiseki wa koi wo yobu no ne</p>
<p>私は红い蔷薇の姫よ 优しくさらわれたい<br>watashi wa akai bara no hime yo yasashiku sarawaretai<br>そっと嗫いて意味ありげに目をそらす<br>sotto sasayaite imiarige ni me wo sorasu<br>あなたは白い月の骑士 触れた手がまだ热い<br>anata wa shiroi tsuki no naito fureta te ga mada atsui<br>のがさずに抱きしめて<br>nogasazu ni dakishimete<br>この奇迹を恋と呼ぶのね<br>kono kiseki wo koi to yobu no ne</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>KTV小助手</category>
        <category>LoveLive</category>
      </categories>
  </entry>
  <entry>
    <title>cutie panther</title>
    <url>/2021/07/08/karaoke/karaoke3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=28592856&auto=1&height=66"></iframe>
<span id="more"></span>

<p>捕まえちゃう!<br>Tsukamae chau !<br>(どこにいるの? ムリよムリよ どこにいたってムリよ)<br>( dokoni iruno?    muriyo muriyo    dokoni itatte muriyo )<br>捕まえちゃう!<br>Tsukamae chau !<br>(だれといるの? ダメよダメよ わたし外はダメよ)<br>( dareto iruno?    dameyo dameyo    watashi igai wa dameyo )</p>
<p>甘いよ甘い そんな装备じゃ<br>amai yo amai    sonna sōbija<br>逃げられるわけいじゃないか<br>nigera reru wake nai janai ka<br>狙いをつけて密かに背后から<br>nerai o tsukete hisokani    haigo kara</p>
<p>I love you 私のことをきになるはず<br>I love you    watashi no kotoo    sukini naru hazu<br>I love you そこに义があるの<br>I love you    sokoni seigi ga aruno</p>
<p>Hi,hi!(何度も言わせるつもりなの?)おやおや<br>Hi , hi !( nandomo iwaseru tsumori nano ?) o ya o ya<br>Hi,hi!(抵抗するならしてごらん!)いがいと<br>Hi , hi !( teikō surunara shite goran !) i ga i to<br>我が尽だと知ってるけれど<br>wagamama dato    shitteru keredo<br>私のが手(うわて)なようね<br>watashino hōga uwatena yō ne<br>冷たい言叶 优しい视线 获物は…君だよ!<br>tsumetai kotoba yasashii shisen    emono wa? kimi dayo !</p>
<p>Cutie Panther 私どこでも行くよ<br>Cutie Panther watashi    dokodemo ikuyo<br>君の君の盗んでみせるよ<br>Kimino kimino    kokoro nusunde  miseru yo<br>Cutie Panther 私どこでも行くよ<br>Cutie Panther watashi    dokodemo ikuyo<br>君の君のを离さない<br>kimino kimino    kokoro o hanasa nai</p>
<p>热いよ热い のルールは<br>atsui yo  atsui    ai no rūru wa<br>破られるためるんだよ<br>yaburareru tame arun- dayo<br>ずるい罠へと诱(いざな)う微笑みは<br>zurui wana eto izanau    hohoemiwa</p>
<p>I miss you きのせいだし悪くないでしょ<br>I miss you    suki no seidashi    waruku nai desho<br>I miss you それが重度の恋よ<br>I miss you    sorega jūdo no koi yo</p>
<p>Hi,hi(绝対全てをいただくよ?)おやおや<br>Hi , hi ( zettai subete    oitadakuyo ?) o ya o ya<br>Hi,hi(反抗するならしてごらん!)てごわい<br>Hi , hi ( hankōsuruna    rashite goran !) te go wa i<br>伪りだって疑うよりも<br>itsuwari datte    utagau yorimo<br>私の事信じてみてよ<br>watashi no koto    shinjite miteyo<br>优しい言叶 冷たい视线 获物は…君だよ!<br>yasashii kotoba    tsumetai shisen    emono wa? kimi dayo !</p>
<p>Cutie Panther 君の瞳が欲しい<br>Cutie Panther kimino    hitomi ga hoshii<br>私きっときっと盗んでみせるよ<br>watashi kiitto    kitto nusunde miseru yo<br>Cutie Panther 君の瞳が欲しい<br>Cutie Panther kimino     hitomi ga hoshii<br>私きっと素早く逃さない<br>watashi kiitto    subayaku nogasa nai</p>
<p>Hi,hi!(何度も言わせるつもりなの?)おやおや<br>Hi , hi !( nandomo iwaseru tsumori nano ?) o ya o ya<br>Hi,hi!(抵抗するならしてごらん!)いがいと<br>Hi , hi !( teikōsuru nara shite goran !) i ga i to<br>我が尽だと知ってるけれど<br>wagamama dato    shitteru keredo<br>私のが手(うわて)なようね<br>watashino hōga uwatena yō ne<br>冷たい言叶 优しい视线 获物は…君だよ!<br>tsumetai kotoba yasashii shisen    emono wa? kimi dayo !</p>
<p>Cutie Panther 私どこでも行くよ<br>Cutie Panther watashi    dokodemo ikuyo<br>君の君の盗んでみせるよ<br>Kimino kimino    kokoro nusunde  miseru yo<br>Cutie Panther 私どこでも行くよ<br>Cutie Panther watashi    dokodemo ikuyo<br>君の君のを离さない<br>kimino kimino    kokoro o hanasa nai</p>
<p>捕まえちゃう!<br>Tsukamae chau !<br>(どこにいるの? ムリよムリよ どこにいたってムリよ)<br>( dokoni iruno?    muriyo muriyo    dokoni itatte muriyo )<br>捕まえちゃう!<br>Tsukamae chau !<br>(だれといるの? ダメよダメよ わたし外はダメよ)<br>( dareto iruno?    dameyo dameyo    watashi igai wa dameyo )</p>
<p>捕まえちゃう!<br>Tsukamae chau !<br>(どこにいるの? ムリよムリよ どこにいたってムリよ)<br>( dokoni iruno?    muriyo muriyo    dokoni itatte muriyo )<br>捕まえちゃう!<br>Tsukamae chau !<br>(だれといるの? ダメよダメよ わたし外はダメよ)<br>( dareto iruno?    dameyo dameyo    watashi igai wa dameyo )</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>KTV小助手</category>
        <category>LoveLive</category>
      </categories>
  </entry>
  <entry>
    <title>星間飛行</title>
    <url>/2021/07/08/karaoke/karaoke5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=589160&auto=1&height=66"></iframe>
<span id="more"></span>

<p>水面（すいめん）が摇（ゆ）らぐ<br>Sui men ga yura gu<br>风（かぜ）の轮（わ）が拡（ひろ）がる<br>Kaze no wa ga hiro ga ru<br>触（ふ）れ合（あ）った指先（ゆびさき）の<br>Fure a tta yubi saki no<br>青（あお）い电流（でんりゅう）<br>Aoi den ryuu</p>
<p>见（み）つめあうだけで<br>Mitsume a u dake de<br>孤独（こどく）な加速度（かそくど）が<br>Kodoku na kasoku do ga<br>一瞬（いっしゅん）に砕（くだ）け散（ち）る<br>I sshun ni kuda kechi ru<br>あなたが好（す）きよ<br>Anata ga suki yo</p>
<p>透明（とうめい）な真珠（しんじゅ）のように<br>Tou mei na shinju no you ni<br>宙（ちゅう）に浮（う）く涙（なみだ）<br>Chuu ni uku namida<br>悲剧（ひげき）だってかまわない<br>Higeki da tte kama wa nai<br>あなたと生（い）きたい<br>Anata to iki tai</p>
<p>キラッ！<br>Ki ra !</p>
<p>流星（りゅうせい）にまたがって<br>Ryuu sei ni mata ga tte<br>あなたに急降下（きゅうこうか） ah ah<br>Anata ni kyuu kou ka ah ah<br>浓绀（のうこん）の星空（ほしぞら）に<br>Nou kon no hoshi zora ni<br>私（わたし）たち花火（はなび）みたい<br>Watashi tachi hanabi mitai<br>心（こころ）が光（ひかり）の矢（や）を放（はな）つ<br>Kokoro ga hikari no ya wo hanatsu</p>
<p>会话（かいわ）などなしに<br>Kai wa na do nashi ni<br>内侧（うちがわ）に潜（もぐ）って<br>Uchi gawa ni mo gu tte<br>考（かんが）えが読（よ）み取（と）れる<br>Kan ga e ga yomi tore ru<br>不思议（ふしぎ）な夜（よる）<br>Fu shigi na yoru</p>
<p>あなたの名（な） 呪文（じゅもん）みたいに<br>Anata no na Jumon mitai ni<br>无限（むげん）のリピート<br>Mugen no repeat<br>憎（にく）らしくて手（て）の甲（こう）に<br>Niku rashi ku te te no kou ni<br>爪（つめ）をたててみる<br>Tsume wo ta te te mi ru</p>
<p>キラッ！<br>Ki ra !                    </p>
<p>身体（からだ）ごと透（す）き通（とお）り<br>Karada go to suki to o ri<br>絵（え）のように漂（ただ）う uh uh<br>E no youni tada yo u uh uh<br>けし粒（つぶ）の生命（いのち）でも<br>Keshi tsubu no inochi* de mo<br>私（わたし）たち瞬（またた）いてる<br>Watashi ta chi Ma ta ta i te ru<br>魂（たましい）に银河（ぎんが） 雪崩（なだ）れてく<br>Tamashi i ni ginga Nadare te ku</p>
<p>流星（りゅうせい）にまたがって<br>Ryuu sei ni ma ta ga tte<br>あなたは急上升（きゅうじょうしょう） oh oh<br>Anata wa kyuu jou shou oh oh<br>浓绀（のうこん）の星空（ほしぞら）に<br>Nou kon no hoshi zora ni<br>私（わたし）たち花火（はなび）みたい<br>Watashi ta chi hanabi mitai<br>心（こころ）が光（ひかり）の矢（や）を放（はな）つ<br>Kokoro ga hikari no ya wo hanatsu</p>
<p>けし粒（つぶ）の生命（いのち）でも<br>Keshi tsubu no inochi de mo<br>私（わたし）たち瞬（またた）いてる<br>Watashi ta chi ma ta i te ru<br>魂（たましい）に银河（ぎんが） 雪崩（なだ）れてく<br>Tamashi i ni ginga Nada re te ku<br>魂（たましい）に银河（ぎんが） 雪崩（なだ）れてく<br>Tamashi i ni ginga Nada re te ku</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>KTV小助手</category>
      </categories>
  </entry>
  <entry>
    <title>and I&#39;m home</title>
    <url>/2021/07/08/karaoke/karaoke6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=496902073&auto=1&height=66"></iframe>
<span id="more"></span>

<p>【红】<br>锖びつbaiいた心、音もない世界du、何を见てるの？<br>Sabi tsuita kokoro, oto mo nai sekai, nani o miteruno?</p>
<p>またzhiねを言える颜を探すよそdaoれを缲り返すだけ<br>Matanewo ieru kaoo sagasuyo sore o kuri kaesu dake</p>
<p>【蓝】<br>気づけばそこには　ひとりきりで泣く後ろ姿<br>Kizukeba soko niwa     hitori kiri de naku ushiro sugata</p>
<p>【红】辛いような、【蓝】寂しいような、<br>Tsurai youna, sabishii youna, </p>
<p>【合】<br>场所　手を繋いでいたいんだ<br>basho    te o tsunaide itainda</p>
<p>何度目の気持ちだろう　ここにある温もりは<br>Nandome no kimochi darou    koko ni aru nukumori wa</p>
<p>间违いでも构わない、傍にいること<br>Machigai demo kamawanai, soba ni iru koto</p>
<p>涙の音、ため息の色　今、确かめる现在地<br>Namida no oto , tameiki no iro    ima, tashika meru genzaichi</p>
<p>冗谈みたいな毎日　见たい、见たい、未来<br>Joudan mitai na mainichi    mitai, mitai, mirai</p>
<p>【蓝】<br>强がりの声も掠れたな、と梦に落ちるの<br>Tsuyogari no koe mo kasu reta nato    yume ni ochiru no</p>
<p>抱えた膝、目を落とすとすぐに崩れてしまいそうで<br>Daka eta hiza, me o otosu to sugu ni    kuzu rete shimai soude</p>
<p>【红】<br>このまま、このまま　ふたりきり駆け込む远い出口<br>Konomama, konomama   futarikiri kakekomu tooi deguchi</p>
<p>【蓝】<br>まだ、期待しているの。<br>Mada, kitai shiteiru no. </p>
<p>【合】<br>さあ　笑って见つめ合うんだ<br>Saa waratte mitsume aunda</p>
<p>単纯で无邪気な颜　くしゃくしゃの思い抱いて<br>Tanjun de mujaki na kao    kushakusha no omoi daite</p>
<p>迷い込んだ场所さえ优しすぎて<br>Mayoikonda basho sae    yasashi sugite</p>
<p>何度でも名前を呼ぶよ　不确かな未来でも<br>Nando demo namae o yobu yo futashika na mirai demo</p>
<p>离せないもの、思うだけ心が痛いよ<br>Hanasenai mono, omou dake kokoro ga itai yo</p>
<p>ここにいるよ<br>Koko ni iru yo</p>
<p>ここにいるよ<br>Koko ni iru yo</p>
<p>帰る场所はここだよ？<br>kaeru basho wa koko da yo?</p>
<p>いつだって変わらない　思いを残すの<br>Itsudatte kawaranai omoi o nokosu no</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>KTV小助手</category>
      </categories>
  </entry>
  <entry>
    <title>Magnet</title>
    <url>/2021/07/08/karaoke/karaoke7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=33916400&auto=1&height=66"></iframe>
<span id="more"></span>

<p>【MIKU】<br>か细い火が 心の端にbai灯る<br>ka hosoi hi ga kokoro no hashini tomoru<br>いつの间にか燃え広がるdu热情zhi<br>itsuno manika moe hirogaru netsujou<br>私の蝶 不规则に飞び回り<br>watashi no chou fukisoku ni tobi mawari<br>あなたの手に鳞粉daoを付けた<br>anata no te ni rinpun wo duketa</p>
<p>【LUKA】<br>络み合う指ほどいて 唇から舌へと<br>karami au yubi hodo ite kuchibi ruka ra shita e to<br>许されない事ならば 尚更燃え上がるの<br>yuru sarenai koto naraba nao sara moe agaruno</p>
<p>【合唱】<br>抱き寄せて欲しい 确かめて欲しい<br>dakiyo sete hoshii tashi kame te hoshii<br>间违いなど无いんだと 思わせて<br>machiga i na do nain dato omo wase te<br>キスをして 涂り替えて欲しい<br>kisu wo shite nuri kaete hoshii<br>魅惑の时に酔いしれ溺れていたいの<br>miwaku no toki ni yoi shire obo rete itaino</p>
<p>【LUKA】<br>束缚して もっと必要として<br>soku baku shi te motto hitsuyou toshite<br>爱しいなら执着を见せつけて<br>i to shii nara shuu chaku wo mise tsukete<br>「おかしい」のが たまらなく好きになる<br>(o ka shi i) noga tamara naku suki ninaru<br>行けるトコまで行けばいいよ<br>ikeru toko made    ikeba iiyo</p>
<p>【MIKU】<br>迷い込んだ心なら 简単に融けてゆく<br>mayoikon da kokoro nara kantan ni tokete yuku<br>优しさなんて感じる暇など 无い位に<br>yasa shisa nante kanjiru hima nado nai kurai ni</p>
<p>【合唱】<br>缲り返したのは あの梦じゃなくて<br>kuri kae shi ta no wa    ano yume ja naku te<br>纷れも无い现実の私达<br>magire mo nai genjitsu no watashi tachi<br>触れてから 戻れないと知る それでいいの…<br>furete kara modore nai to shiru    sore de iino…<br>谁よりも大切なあなた<br>dare yori mo taisetsu na anata</p>
<p>【MIKU】<br>夜明けが来ると不安で 泣いてしまう私に<br>yo a ke ga ku ru to fu an de na i te shi ma u wa ta shi ni<br>「大丈夫」と嗫いたあなたも 泣いていたの？<br>(dai jou bu) to sa sa ga i ta a na ta mo na i te i ta no?</p>
<p>【合唱】<br>抱き寄せて欲しい 确かめて欲しい<br>daki yosete hoshii    tashika me te hoshii<br>间违いなど无いんだと 思わせて<br>machi ga i nado nain dato omo wasete<br>キスをして 涂り替えて欲しい 魅惑の时に<br>kisu wo shite    nurika e te hoshii    miwaku no toki ni<br>酔いしれ溺れたい<br>yoi shi re obo re tai<br>引き寄せて マグネットのように<br>biki yo sete    magunetto no you ni<br>例えいつか离れても巡り会う<br>tatoe itsuka hanarete mo meguri a u<br>触れていて 戻れなくていい それでいいの<br>furete i te    modore naku te ii    sorede ii no<br>谁よりも大切なあなた<br>dare yori mo taisetsu na anata</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>KTV小助手</category>
      </categories>
  </entry>
  <entry>
    <title>フリージア 希望之花</title>
    <url>/2021/07/08/karaoke/karaoke8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=459925524&auto=1&height=66"></iframe>
<span id="more"></span>

<p>漂う宇宙(そら)のどこか遠く<br>tada you sorano    dokoka too ku</p>
<p>祈り通ずる惑星(ほし)があるとしたら<br>inori tsu u zuru    hoshiga aru toshitara</p>
<p>僕らはそこへ向かうだろうか<br>bokuraha sokoe    mukau darou- ka</p>
<p>そして何を祈るのだろう<br>soshite naniwo inoru no darou-</p>
<p>果たせなかった約束や<br>hatase nakatta    yakusoku ya</p>
<p>犠牲になった高潔の光<br>gisei ni na-tta    kouketsu no hikari</p>
<p>残る物など何もないとしても<br>nokoru mono nado    nanimo nai toshitemo</p>
<p>今は信じた道をただ進め<br>ima wa shinjita michi wo  tada susume</p>
<p>希望の花 繋いだ絆が<br>kibou no hana    tsunaida kizuna ga</p>
<p>今僕らの胸の中にあるから<br>ima bokura no    mune no naka    ni aru kara</p>
<p>決して散ることはない<br>keshite chiru koto wa nai</p>
<p>生きる力<br>ikiru chikara</p>
<p>希望の花 繋いだ絆を<br>kibou no hana    tsunaida kizuna wo</p>
<p>力にして明日を強く咲き誇れ<br>chikara ni shite    asu wo tsuyoku    sakiho kore</p>
<p>戻る場所なんてない辿り着くべき場所<br>motoru basho nante nai    tadori tsuku beki basho heto</p>
<p>迷いのない旗を高く掲げて<br>mayoi no nai    hata wo takaku kakagete</p>
<p>今を生きていく<br>ima wo ikite i ku</p>
<p>見えないものに 怯えていた<br>mie nai mono ni     obiete i ta</p>
<p>弛むことない この世界の中<br>tayumu koto nai     kono sekai no naka</p>
<p>それでも一つ 心の波間に<br>sore demo hitotsu     kokoro no namima ni</p>
<p>変わらないもの 浮かべながら<br>kawara nai mono     ukabe nagara</p>
<p>希望の花 繋いだ絆が<br>kibou no hana    tsunaida kizuna ga</p>
<p>今僕らの胸の中にあるから<br>ima bokura no    muneno naka    ni aru kara</p>
<p>綻びを縫い合い<br>hokorobi wo    nui a i</p>
<p>強くなれる<br>tsuyoku  nareru</p>
<p>希望の花 繋いだ絆を<br>kibou no hana    tsunai da kizuna wo</p>
<p>力にして 明日を強く咲き誇れ<br>chikara ni shite    asu wo tsuyoku    saki hokore</p>
<p>何の為向かうのか見失いそうな時に<br>nan nno tame muka unoka    miushi nai souna tokini</p>
<p>守り抜きたいものがあること<br>mamori nuki tai     mono ga aru koto-</p>
<p>気付いたんだ<br>kitsui tan nda</p>
<p>傷を隠し 一人泣いた夜に<br>ki zu wo    ka ku shi     hitori naita yoru ni</p>
<p>くれた優しさ 溢れ出したのは<br>kureta yasashisa     afureda shita no wa</p>
<p>未来を誓った「決意の涙」<br>mirai wo chika-tta     ketsui no    namita</p>
<p>希望の花 繋いだ絆が<br>kibou no hana    tsunaida kizuna ga</p>
<p>今僕らの胸の中にあるから<br>ima bokura no    muneno naka    ni aru kara</p>
<p>決して散ることはない<br>keshite chiru koto wa nai</p>
<p>生きる力<br>ikiru chikara</p>
<p>希望の花 繋いだ絆を<br>kibou no hana    tsunaida kizuna wo</p>
<p>力にして明日を強く咲き誇れ<br>chikara ni shite    asu wo tsuyoku    sakiho kore</p>
<p>戻る場所なんてない辿り着くべき場所<br>motoru basho nante nai    tadori tsuku beki basho heto</p>
<p>迷いのない旗を高く掲げて<br>mayoi no nai    hata wo takaku kakagete</p>
<p>今を生きていく<br>ima wo ikite i ku</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>KTV小助手</category>
      </categories>
  </entry>
  <entry>
    <title>Redux学习笔记1：原理及基本使用</title>
    <url>/2022/04/07/redux/redux1_intro/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h1><p>本节主要包含</p>
<ul>
<li>Redux的核心概念</li>
<li>如何在React中使用Redux</li>
</ul>
<span id="more"></span>

<h1 id="Redux核心概念"><a href="#Redux核心概念" class="headerlink" title="Redux核心概念"></a>Redux核心概念</h1><p><a href="http://cn.redux.js.org/tutorials/essentials/part-1-overview-concepts/">http://cn.redux.js.org/tutorials/essentials/part-1-overview-concepts/</a></p>
<p>Redux本质上是一个状态管理工具，由三个核心概念：</p>
<ul>
<li><strong>state</strong>：驱动应用的真实数据源头</li>
<li><strong>view</strong>：基于当前状态的 UI 声明性描述</li>
<li><strong>actions</strong>：根据用户输入在应用程序中发生的事件，并触发状态更新</li>
</ul>
<h2 id="store-action-reducer"><a href="#store-action-reducer" class="headerlink" title="store action reducer"></a>store action reducer</h2><p>store：状态树</p>
<ul>
<li>state：store的一个快照</li>
<li>state改变会引起view的变化</li>
</ul>
<p>action：事件派发</p>
<ul>
<li>view接收到事件，派发action</li>
</ul>
<p>reducer：接收state和action</p>
<ul>
<li><p>类似于事件监听器</p>
</li>
<li><p>根据以前的state和接收到的action，改变state</p>
</li>
</ul>
<h2 id="Redux数据流"><a href="#Redux数据流" class="headerlink" title="Redux数据流"></a>Redux数据流</h2><p>具体来说，对于 Redux，我们可以将这些步骤分解为更详细的内容：</p>
<ul>
<li>初始启动：<ul>
<li>使用最顶层的 root reducer 函数创建 Redux store</li>
<li>store 调用一次 root reducer，并将返回值保存为它的初始 <code>state</code></li>
<li>当 UI 首次渲染时，UI 组件访问 Redux store 的当前 state，并使用该数据来决定要呈现的内容。同时监听 store 的更新，以便他们可以知道 state 是否已更改。</li>
</ul>
</li>
<li>更新环节：<ul>
<li>应用程序中发生了某些事情，例如用户单击按钮</li>
<li>dispatch 一个 action 到 Redux store，例如 <code>dispatch(&#123;type: &#39;counter/increment&#39;&#125;)</code></li>
<li>store 用之前的 <code>state</code> 和当前的 <code>action</code> 再次运行 reducer 函数，并将返回值保存为新的 <code>state</code></li>
<li>store 通知所有订阅过的 UI，通知它们 store 发生更新</li>
<li>每个订阅过 store 数据的 UI 组件都会检查它们需要的 state 部分是否被更新。</li>
<li>发现数据被更新的每个组件都强制使用新数据重新渲染，紧接着更新网页</li>
</ul>
</li>
</ul>
<h1 id="在React中使用Redux"><a href="#在React中使用Redux" class="headerlink" title="在React中使用Redux"></a>在React中使用Redux</h1><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install --save redux</span><br><span class="line">npm install --save react-redux</span><br><span class="line">npm install --save-dev redux-devtools-extension</span><br></pre></td></tr></table></figure>

<p>chrome插件：Redux DevTools</p>
<h2 id="reducer"><a href="#reducer" class="headerlink" title="reducer"></a>reducer</h2><p>创建reducer，传入的参数是state和action</p>
<ul>
<li>state要有默认值</li>
<li>根据action.type判断怎样修改state</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> defaultState= &#123;</span><br><span class="line">    <span class="attr">cityName</span>: <span class="string">&quot;北京&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> city= <span class="function">(<span class="params">state=defaultState,action</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(action.type)&#123;</span><br><span class="line">        <span class="keyword">case</span> INIT_CITY:</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">cityName</span>: action.cityName</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">case</span> CHANGE_CITY:</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">cityName</span>: action.cityName</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> city</span><br></pre></td></tr></table></figure>

<p>用 <a href="http://cn.redux.js.org/api/combinereducers"><code>combineReducers</code></a> 来把多个 reducer 创建成一个rootReducer</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> city <span class="keyword">from</span> <span class="string">&quot;./city&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rootReducer= combineReducers(&#123;</span><br><span class="line">    city</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> rootReducer</span><br></pre></td></tr></table></figure>

<h2 id="store"><a href="#store" class="headerlink" title="store"></a>store</h2><p>创建store，应用中只创建一个 store！接收rootReducer</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; composeWithDevTools &#125; <span class="keyword">from</span> <span class="string">&quot;redux-devtools-extension&quot;</span></span><br><span class="line"><span class="keyword">import</span> rootReducer <span class="keyword">from</span> <span class="string">&quot;../reducers&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store= createStore(rootReducer, composeWithDevTools())</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure>

<p>用Provider传递store</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  <span class="comment">// Render a `&lt;Provider&gt;` around the entire `&lt;App&gt;`,</span></span><br><span class="line">  <span class="comment">// and pass the Redux store to as a prop</span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">React.StrictMode</span>&gt;</span></span>,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="action"><a href="#action" class="headerlink" title="action"></a>action</h2><p>创建action creator函数，每次调用会返回一个action对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeCity</span>(<span class="params">cityName</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        <span class="attr">type</span>: INIT_CITY,</span><br><span class="line">        cityName</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>派发action，在DOM中useDispatch派发action对象</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useSelector, useDispatch &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> City=<span class="function">()=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> city=useSelector(<span class="function"><span class="params">state</span> =&gt;</span> state.city)</span><br><span class="line">    <span class="keyword">const</span> dispatch=useDispatch()</span><br><span class="line">    <span class="built_in">console</span>.log(city);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">onCityEvent</span>(<span class="params">city</span>)</span>&#123;       </span><br><span class="line">        dispatch(changeCity(city))</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>onCityEvent(city)&#125;&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="问题：reducer互相影响"><a href="#问题：reducer互相影响" class="headerlink" title="问题：reducer互相影响"></a>问题：reducer互相影响</h2><p><a href="https://segmentfault.com/q/1010000012062981">https://segmentfault.com/q/1010000012062981</a></p>
<p>注意default应该返回传入的state快照</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>前端工程师进阶系列</category>
        <category>Redux学习笔记</category>
      </categories>
      <tags>
        <tag>Redux</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>3年目の浮気</title>
    <url>/2021/07/08/karaoke/karaoke9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=4902185&auto=1&height=66"></iframe>
<span id="more"></span>

<p>（男）马鹿いってんじゃないよ お前と俺は<br>baka itten janaiyo<br>o mae to ore wa<br>（男）ケンカzhiもしたけどひとつ屋根の下暮らして来たんだぜ<br>kenka mo shita kedo<br>hitotsu yane no shita<br>kurashi te kitan daze<br>（男）马鹿いってんじゃないよ お前の事だけは<br>baka itten janaiyo<br>o mae no koto dakewa<br>（男）一日たりとも 忘れた事など无かった俺だぜ<br>ichinichi taritomo<br>wasure ta koto nado<br>naka tta ore daze</p>
<p>（女）よくいうわ いつもだましてばかりで<br>yoku i u wa itsumo dama shite bakari de<br>（女）私が何にも知らないとでも思っているのね<br>watashi ga nani nimo shira nai<br>to demo omotte iru none</p>
<p>（男）よくいうよ 惚れたお前の负けだよ<br>yokuiuyo hore ta omae no make dayo<br>（男）もてない男が好きなら 俺も考えなおすぜ<br>motenai otoko ga suki nara<br>ore mo kangae naosuze</p>
<p>（女）马鹿いってんじゃないわ<br>baka itten janaiwa<br>（男）马鹿いってんじゃないよ<br>baka itten janaiyo<br>（女）あそばれてるのわからないなんてかわいそうだわ<br>asobare teru nowa<br>kara nai nante<br>kawai soudawa<br>（男）3年目の浮気ぐらい大目にみろよ<br>3 nenme no uwaki gurai oome nimiroyo<br>（女）ひらきなおるその态度が気にいらないのよ<br>hiraki naoru sono taido ga kini iranai noyo<br>（男）3年目の浮気ぐらい大目にみてよ<br>3 nenme no uwaki gurai oome nimiteyo<br>（女）両手をついてあやまったって 许してあげない<br>ryoute wo tsuite ayama ttatte yurushite age nai</p>
<p>（男）马鹿やってんじゃないよ 本気でそんな<br>baka yattenjanaiyo<br>honki desonna<br>（男）荷物をまとめて 涙もみせずに旅だてるのかよ<br>nimotsu wo matome te<br>namida mo misezu ni<br>tabi da teru no kayo<br>（男）马鹿やってんじゃないよ 男はそれなりに<br>baka yatten janaiyo<br>otoko wa sore narini<br>（男）浮気もするけど 本気になれない可爱いもんだぜ<br>uwaki mo suru kedo<br>honki ni narenai<br>kawaii mondaze</p>
<p>（女）よくいうわ そんな胜手なことばが<br>yokuiuwa sonna katte na kotoba ga<br>（女）あなたの口から出てくるなんて 心うたがうわ<br>anatano kuchi kara dete kuru<br>nante kokoro utagau wa</p>
<p>（男）よくいうよ いつもあまえてばかりで<br>yokuiuyo itsumo amaete bakari de<br>（男）やきもちやいても可爱くないぜ 大人になりなよ<br>yaki mochi yaitemo kawai ku<br>naize otona ni nari nayo</p>
<p>（女）马鹿やってんじゃないわ<br>baka yatten janaiwa<br>（男）马鹿やってんじゃないよ<br>baka yatten janaiyo<br>（女）私にだってその気になれば 相手はいるのよ<br>watashi ni datte<br>sono kini nareba<br>aite wa iru noyo<br>（男）3年目の浮気ぐらい大目にみろよ<br>3 nenme no uwaki gurai oome nimi ro yo<br>（女）ひらきなおるその态度が気にいらないのよ<br>hiraki naoru sono taido ga kini ira nai noyo<br>（男）3年目の浮気ぐらい大目にみてよ<br>3 nenme no uwaki gurai oome nimi te yo<br>（女）両手をついてあやまったって 许してあげない<br>ryoute wotsuite ayama ttatte yurushi te age nai</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>KTV小助手</category>
      </categories>
  </entry>
  <entry>
    <title>Redux学习笔记2：Redux API</title>
    <url>/2022/04/07/redux/redux2_api/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h1><p><strong>参考</strong></p>
<ul>
<li><a href="https://www.bilibili.com/video/BV1RF411v7cE">视频：Redux Fundamentals</a></li>
<li><a href="https://www.redux.org.cn/docs/api/">文档：Redux API</a></li>
</ul>
<p>Redux对外暴露的API较少，有5个顶层API，4个Store API</p>
<p><strong>顶级暴露的方法</strong></p>
<ul>
<li><a href="https://www.redux.org.cn/docs/api/createStore.html"><code>createStore(reducer, [preloadedState], [enhancer])</code></a></li>
<li><a href="https://www.redux.org.cn/docs/api/combineReducers.html"><code>combineReducers(reducers)</code></a></li>
<li><a href="https://www.redux.org.cn/docs/api/applyMiddleware.html"><code>applyMiddleware(...middlewares)</code></a></li>
<li><a href="https://www.redux.org.cn/docs/api/bindActionCreators.html"><code>bindActionCreators(actionCreators, dispatch)</code></a></li>
<li><a href="https://www.redux.org.cn/docs/api/compose.html"><code>compose(...functions)</code></a></li>
</ul>
<p><strong>Store API</strong></p>
<ul>
<li><a href="https://www.redux.org.cn/docs/api/Store.html#getState"><code>getState()</code></a></li>
<li><a href="https://www.redux.org.cn/docs/api/Store.html#dispatch"><code>dispatch(action)</code></a></li>
<li><a href="https://www.redux.org.cn/docs/api/Store.html#subscribe"><code>subscribe(listener)</code></a></li>
<li><a href="https://www.redux.org.cn/docs/api/Store.html#replaceReducer"><code>replaceReducer(nextReducer)</code></a></li>
</ul>
<span id="more"></span>

<h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><p>Redux基础：action，reducer，store</p>
<p>Redux三大原则：</p>
<ul>
<li>单一数据源：<strong>有且只有一个store</strong>，里面有一个object tree，存储所有state</li>
<li>state只读：修改state的唯一途径：<strong>触发action</strong>（store.diapatch触发action，reducer接收更新state）</li>
<li>纯函数修改state：reducer都是<strong>纯函数</strong>，接收之前的state和action，返回新action</li>
</ul>
<h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><h2 id="顶层API"><a href="#顶层API" class="headerlink" title="顶层API"></a>顶层API</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span></span><br><span class="line"><span class="comment">// ES5 CommonJS</span></span><br><span class="line"><span class="keyword">var</span> createStore = <span class="built_in">require</span>(<span class="string">&#x27;redux&#x27;</span>).createStore;</span><br></pre></td></tr></table></figure>

<h3 id="createStore"><a href="#createStore" class="headerlink" title="createStore"></a>createStore</h3><p>[createStore(reducer, <a href="https://www.redux.org.cn/docs/api/createStore.html">preloadedState], [enhancer])</a></p>
<p>创建一个store，储存所有state，<strong>一个应用只应该有一个store！</strong></p>
<p>入参：</p>
<ul>
<li>reducer，函数，入参是state和action，返回值是新的state</li>
<li>[preloadedState]，任意值，可以传入state的初值，但是一般喜欢在reducer里给state赋初值，所以一般没用</li>
<li>[enhancer]，见applyMiddleware</li>
</ul>
<p>返回值：</p>
<ul>
<li>一个Store类型的对象，存储了全部的state，详见Store API</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> store=createStore(reducer)</span><br></pre></td></tr></table></figure>

<h3 id="combineReducers"><a href="#combineReducers" class="headerlink" title="combineReducers"></a>combineReducers</h3><p><a href="https://www.redux.org.cn/docs/api/combineReducers.html">combineReducers(reducers)</a></p>
<p>面对复杂的状态更新逻辑，把一个reducer<strong>拆分</strong>为多个独立的函数，最后使用combineReducers合并成一个函数，作为createStore的输入</p>
<p>入参：</p>
<ul>
<li>reducers，对象，由多个reducer组合而成<ul>
<li>key：键名，整合后统一的reducer中输出的state就以该键名拆分</li>
<li>value：state对应的reducer函数</li>
</ul>
</li>
</ul>
<p>返回值：</p>
<ul>
<li>统一的reducer，<strong>函数</strong>，这个统一的reducer函数返回的state是一个对象，<ul>
<li>key：与入参的对象的key一致</li>
<li>value：为入参的reducer对应管理的state</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> rootReducer=combineReducers(&#123;</span><br><span class="line">    <span class="attr">counter</span>: counterReducer, </span><br><span class="line">    <span class="attr">todos</span>: todosReducer</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// rootReducer管理的state树是下面这个结构（对象）：</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">counter</span>: &#123;</span><br><span class="line">        <span class="comment">// 由counterReducer管理的state</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="attr">todos</span>:&#123;</span><br><span class="line">        <span class="comment">// 由todosReducer管理的state</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意点：</p>
<ul>
<li>可以采用ES6语法，reducer函数命名与键名一致，这样写简便<code>combineReducers(&#123;counter, todos&#125;)</code></li>
<li>每一个子reducer需要满足如下规则：<ul>
<li>未匹配到action时，必须<strong>返回原state</strong>，也就是switch - default中返回原state</li>
<li>state必须赋初值，且禁止为undefined，<strong>禁止返回undefined</strong>，不然报错</li>
</ul>
</li>
<li>每一次dispatch action之后都会触发这个集成的reducer<ul>
<li><strong>遍历</strong>每一个子reducer，命中则返回新state，未命中则返回<strong>默认值</strong>（所以reducer一定要写默认返回值！）</li>
<li>传入的集成reducer对象越<strong>扁平</strong>，遍历更新他的开销就越小</li>
</ul>
</li>
</ul>
<h3 id="bindActionCreators"><a href="#bindActionCreators" class="headerlink" title="bindActionCreators"></a>bindActionCreators</h3><p><a href="https://www.redux.org.cn/docs/api/bindActionCreators.html">bindActionCreators(actionCreators, dispatch)</a></p>
<p><strong>概念：Action creator</strong></p>
<p>一个创建 action 的函数，通常action的格式是：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">type</span>: blabla, <span class="comment">// action类型</span></span><br><span class="line">    <span class="attr">payload</span>: blabla <span class="comment">// action的负载</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>bindActionCreators做了什么</strong></p>
<p>把多个action creator整合到一起，用store.dispatch统一包起来，这样就不用每次都写store.disatch了</p>
<p>入参</p>
<ul>
<li>actionCreator<ul>
<li>可以是函数，返回一个action对象</li>
<li>可以是对象，它的value是一个action creator</li>
</ul>
</li>
<li>dispatch，函数，（Store.dispatch）</li>
</ul>
<p>返回值</p>
<ul>
<li>可以是函数或是对象，取决于第一个入参是函数还是对象<ul>
<li>入参是函数，返回函数，直接调用就能派发事件</li>
<li>入参是对象，返回对象，每个属性值是新函数</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假设有两个action creator</span></span><br><span class="line">store.dispatch(increment(<span class="number">1</span>));</span><br><span class="line">store.dispatch(reset());</span><br><span class="line"><span class="comment">// 等价于, bindeActionCreators</span></span><br><span class="line"><span class="keyword">const</span> actions=bindActionCreators(</span><br><span class="line">  &#123; increment, decrement, reset &#125;,</span><br><span class="line">  store.dispatch</span><br><span class="line">);</span><br><span class="line">actions.increment(<span class="number">1</span>)</span><br><span class="line">actions.reset()</span><br><span class="line"><span class="comment">// 等价于, compose</span></span><br><span class="line"><span class="keyword">const</span> dispatchIncrement=compose(store.dispatch,increment)</span><br><span class="line"><span class="keyword">const</span> dispatchReset=compose(store.dispatch,reset)</span><br><span class="line">dispatchIncrement(<span class="number">1</span>)</span><br><span class="line">dispatchReset()</span><br></pre></td></tr></table></figure>

<h3 id="applyMiddleware"><a href="#applyMiddleware" class="headerlink" title="applyMiddleware"></a>applyMiddleware</h3><p><a href="https://www.redux.org.cn/docs/api/applyMiddleware.html">applyMiddleware(…middlewares)</a></p>
<h4 id="enhancer"><a href="#enhancer" class="headerlink" title="enhancer"></a>enhancer</h4><p><strong>概念：<a href="https://www.redux.org.cn/docs/Glossary.html">Store enhancer</a></strong></p>
<p>Store enhancer 是一个组合 store creator 的高阶函数，返回一个新的强化过的 store creator</p>
<ul>
<li>内置API <code>createStore</code>就是一个标准的store creator<ul>
<li>入参：(reducer, [preloadedState], [enhancer])</li>
<li>返回值：store对象</li>
</ul>
</li>
<li>enhancer是一个函数，输入store creator，输出store creator</li>
<li>在enhancer内部可以对store creator做一些其他的处理</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 监控reducer执行时间的enhancer</span></span><br><span class="line"><span class="keyword">const</span> monitorEnhancer = <span class="function">(<span class="params">createStore</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 返回新的store creator</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">reducer, initialState, enhancer</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> monitorReducer = <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> start = performance.now();</span><br><span class="line">      <span class="keyword">const</span> newState = reducer(state, action);</span><br><span class="line">      <span class="keyword">const</span> end = performance.now();</span><br><span class="line">      <span class="keyword">const</span> diff = end - start;</span><br><span class="line">      <span class="built_in">console</span>.log(diff);</span><br><span class="line">      <span class="keyword">return</span> newState;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 返回值：调用createStore得到的store对象</span></span><br><span class="line">    <span class="keyword">return</span> createStore(monitorReducer, initialState, enhancer);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store= createStore(rootReducer, monitorEnhancer) <span class="comment">// initialState可以省略的</span></span><br></pre></td></tr></table></figure>

<p>存在多个enhancer的情况下，可以使用conpose把enhancer串起来</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> enhancers = compose(logEnhancer, monitorEnhancer);</span><br><span class="line"><span class="keyword">const</span> store= createStore(rootReducer, enhancers);</span><br></pre></td></tr></table></figure>

<h4 id="middleware"><a href="#middleware" class="headerlink" title="middleware"></a>middleware</h4><p>使用包含自定义功能的 middleware 来扩展 Redux 是一种推荐的方式</p>
<ul>
<li>middleware的本质，包装store的dispatch方法</li>
<li>store enhancer的本质，包装store creator的reducer方法</li>
</ul>
<p>这里主要介绍如何使用middleware来写enhancer，当然middleware也能干别的事</p>
<p><strong>自定义middleware</strong></p>
<p>middleware 的函数签名是 <code>store =&gt; next =&gt; action</code></p>
<ul>
<li>外层：接收store对象，返回一个函数，这个返回的函数如下：<ul>
<li>接收一个next方法，返回一个新函数：<ul>
<li>接收action对象</li>
<li>可以调用next(action)，表示执行一次dispatch(action)<ul>
<li>实际上并没有真的执行，详见下一部分</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>trick：记住首字母 <strong>snack</strong>（<code>store=&gt;next=&gt;action</code>）</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 监控state变化和action</span></span><br><span class="line"><span class="keyword">const</span> logMiddleWare = <span class="function">(<span class="params">store</span>) =&gt;</span> <span class="function">(<span class="params">next</span>) =&gt;</span> <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;old state :&quot;</span>, store.getState());</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;will diapatch:&quot;</span>, action);</span><br><span class="line">  next(action);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;new state :&quot;</span>, store.getState());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="applyMiddleware-1"><a href="#applyMiddleware-1" class="headerlink" title="applyMiddleware"></a>applyMiddleware</h4><p><a href="https://www.redux.org.cn/docs/api/applyMiddleware.html">applyMiddleware(…middlewares)</a></p>
<p>入参：</p>
<ul>
<li>任意个middleware函数<ul>
<li>这些函数会被逐个调用</li>
<li>链式调用到最后一个middleware时，遇到next(action)时会真正执行dispatch(action)</li>
<li>效果上看就是在dispatch操作外包了好几层middleware</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建store</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(</span><br><span class="line">  rootReducers,</span><br><span class="line">  applyMiddleware(logMiddleWare, monitorMiddleWare)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="compose"><a href="#compose" class="headerlink" title="compose"></a>compose</h3><p><a href="https://www.redux.org.cn/docs/api/compose.html">compose(…functions)</a></p>
<p>组合函数，后一个函数的输出作为前一个函数的输入</p>
<p><code>compose(funcA, funcB, funcC)</code> 等价于 <code>compose(funcA(funcB(funcC())))</code>）</p>
<h2 id="Store-API"><a href="#Store-API" class="headerlink" title="Store API"></a>Store API</h2><h3 id="getState"><a href="#getState" class="headerlink" title="getState"></a>getState</h3><p><a href="https://www.redux.org.cn/docs/api/Store.html#getState">getState()</a></p>
<p>返回当前的state树（其实是个对象）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> rootReducer=combineReducers(&#123;</span><br><span class="line">    <span class="attr">counter</span>: counterReducer, </span><br><span class="line">    <span class="attr">todos</span>: todosReducer</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> store=createStore(rootReducer)</span><br><span class="line">store.getState()</span><br><span class="line"><span class="comment">// 返回值为如下格式</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">counter</span>: blabla,</span><br><span class="line">    <span class="attr">todos</span>: blabla,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="dispatch"><a href="#dispatch" class="headerlink" title="dispatch"></a>dispatch</h3><p><a href="https://www.redux.org.cn/docs/api/Store.html#dispatch">dispatch(action)</a></p>
<p>唯一改变state的途径</p>
<p>入参：</p>
<ul>
<li>action，一个对象，通常可以由action creator函数产生，默认的写法是有一个type属性<ul>
<li>type：action的类型，通常是字符串常量</li>
<li>payload：可以带个值</li>
</ul>
</li>
</ul>
<p>返回值：</p>
<ul>
<li>对象，要派发的action</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> INCREMENT=<span class="string">&quot;INCREMENT&quot;</span></span><br><span class="line"><span class="keyword">const</span> increment=<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">type</span>: INCREMENT</span><br><span class="line">        <span class="attr">payload</span>: value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">store.dispatch(increment(<span class="number">5</span>)) <span class="comment">// 派发action</span></span><br><span class="line"><span class="comment">// 返回值如下，一般不关心它的返回值，因为真正重要的事情是派发这个对象到store</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">type</span>: INCREMENT</span><br><span class="line">    <span class="attr">payload</span>: <span class="number">5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="subscribe"><a href="#subscribe" class="headerlink" title="subscribe"></a>subscribe</h3><p><a href="https://www.redux.org.cn/docs/api/Store.html#subscribe">subscribe(listener)</a></p>
<p>监听state树的变化，每当dispatch action之后，就会触发listener回调函数</p>
<p>入参</p>
<ul>
<li>listener，回调函数，监听器<ul>
<li>通常可以在这个回调里调用store.getState()，查看state树</li>
</ul>
</li>
</ul>
<p>返回值：</p>
<ul>
<li>函数，可以用来解绑监听器</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 绑定监听</span></span><br><span class="line"><span class="keyword">let</span> unsubscribe = store.subscribe(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log((store.getState()))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 取消监听</span></span><br><span class="line">unsubscribe()</span><br></pre></td></tr></table></figure>

<h3 id="replaceReducer"><a href="#replaceReducer" class="headerlink" title="replaceReducer"></a>replaceReducer</h3><p><a href="https://www.redux.org.cn/docs/api/Store.html#replaceReducer">replaceReducer(nextReducer)</a></p>
<p>替换当前store的reducer函数</p>
<h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>可以使用codeSandbox调试</p>
<p><a href="https://codesandbox.io/s/learn-redux-api-3y60r4">https://codesandbox.io/s/learn-redux-api-3y60r4</a></p>
<p>template：Vanilla JS</p>
<p>注意在package.json中添加依赖：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;redux&quot;</span>: <span class="string">&quot;^4.0.5&quot;</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<h2 id="需求1"><a href="#需求1" class="headerlink" title="需求1"></a>需求1</h2><ul>
<li><p>2个state：counter（number）和todos（array）</p>
</li>
<li><p>5个action creator：</p>
<ul>
<li>increment，decrement，reset，分别可以对使counter加减归零</li>
<li>addTodo，在todos加入一个元素</li>
<li>shiftTodo，去掉todos的第一个元素</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  createStore,</span><br><span class="line">  combineReducers,</span><br><span class="line">  bindActionCreators,</span><br><span class="line">  compose,</span><br><span class="line">  applyMiddleware</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// action type</span></span><br><span class="line"><span class="keyword">const</span> INCREMENT = <span class="string">&quot;INCREMENT&quot;</span>,</span><br><span class="line">  DECREMENT = <span class="string">&quot;DECREMENT&quot;</span>,</span><br><span class="line">  RESET = <span class="string">&quot;RESET&quot;</span>,</span><br><span class="line">  ADDTODO = <span class="string">&quot;ADDTODO&quot;</span>,</span><br><span class="line">  SHIFTTODO = <span class="string">&quot;SHIFTTODO&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// reducers，注意一定要赋初值！</span></span><br><span class="line"><span class="keyword">const</span> counter = <span class="function">(<span class="params">state = <span class="number">0</span>, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> INCREMENT:</span><br><span class="line">      <span class="keyword">return</span> state + action.payload;</span><br><span class="line">    <span class="keyword">case</span> DECREMENT:</span><br><span class="line">      <span class="keyword">return</span> state - action.payload;</span><br><span class="line">    <span class="keyword">case</span> RESET:</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> todos = <span class="function">(<span class="params">state = [], action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> ADDTODO:</span><br><span class="line">      <span class="keyword">return</span> [...state, action.payload];</span><br><span class="line">    <span class="keyword">case</span> SHIFTTODO:</span><br><span class="line">      <span class="keyword">let</span> [, ...rest] = state;</span><br><span class="line">      <span class="keyword">return</span> rest;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// action creators</span></span><br><span class="line"><span class="keyword">const</span> increment = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">type</span>: INCREMENT,</span><br><span class="line">    <span class="attr">payload</span>: value</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> decrement = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">type</span>: DECREMENT,</span><br><span class="line">    <span class="attr">payload</span>: value</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reset = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">type</span>: RESET</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> addTodo = <span class="function">(<span class="params">todo</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">type</span>: ADDTODO,</span><br><span class="line">    <span class="attr">payload</span>: todo</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> shiftTodo = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">type</span>: SHIFTTODO</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 集成reducer</span></span><br><span class="line"><span class="keyword">const</span> rootReducers = combineReducers(&#123; counter, todos &#125;);</span><br><span class="line"><span class="comment">// 创建store</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(rootReducers);</span><br><span class="line"><span class="comment">// 集成actions</span></span><br><span class="line"><span class="keyword">const</span> actions = bindActionCreators(</span><br><span class="line">  &#123; increment, decrement, reset, addTodo, shiftTodo &#125;,</span><br><span class="line">  store.dispatch</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 派发事件</span></span><br><span class="line"><span class="comment">// console.log(store.dispatch(increment(1)));</span></span><br><span class="line">actions.increment(<span class="number">10</span>);</span><br><span class="line">actions.decrement(<span class="number">5</span>);</span><br><span class="line">actions.addTodo(<span class="string">&quot;learn Redux&quot;</span>);</span><br><span class="line">actions.addTodo(<span class="string">&quot;learn React&quot;</span>);</span><br><span class="line">actions.shiftTodo();</span><br><span class="line">actions.reset();</span><br></pre></td></tr></table></figure>

<h2 id="需求2"><a href="#需求2" class="headerlink" title="需求2"></a>需求2</h2><p>在1的基础上，加入监听器</p>
<ul>
<li>每一次更新state，打印当前state树</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 前面到action creator的部分都一样</span></span><br><span class="line"><span class="comment">// 添加监听器</span></span><br><span class="line"><span class="keyword">const</span> unsubscribe = store.subscribe(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(store.getState());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 派发事件</span></span><br><span class="line">actions.increment(<span class="number">10</span>);</span><br><span class="line">actions.decrement(<span class="number">5</span>);</span><br><span class="line">actions.addTodo(<span class="string">&quot;learn Redux&quot;</span>);</span><br><span class="line">actions.addTodo(<span class="string">&quot;learn React&quot;</span>);</span><br><span class="line">actions.shiftTodo();</span><br><span class="line">actions.reset();</span><br><span class="line"><span class="comment">// 取消监听</span></span><br><span class="line">unsubscribe();</span><br></pre></td></tr></table></figure>

<h2 id="需求3"><a href="#需求3" class="headerlink" title="需求3"></a>需求3</h2><p>在1的基础上，加入 store enhancer，每一次调用reducer</p>
<ul>
<li>打印reducer的执行时间</li>
<li>打印更新前后的state树</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 前面到action creator的部分都一样</span></span><br><span class="line"><span class="comment">// 集成reducer</span></span><br><span class="line"><span class="keyword">const</span> rootReducers = combineReducers(&#123; counter, todos &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监控reducer执行时间的enhancer</span></span><br><span class="line"><span class="keyword">const</span> monitorEnhancer = <span class="function">(<span class="params">createStore</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">reducer, initialState, enhancer</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> monitorReducer = <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> start = performance.now();</span><br><span class="line">      <span class="keyword">const</span> newState = reducer(state, action);</span><br><span class="line">      <span class="keyword">const</span> end = performance.now();</span><br><span class="line">      <span class="keyword">const</span> diff = end - start;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;reducer execute time: &quot;</span>, diff);</span><br><span class="line">      <span class="keyword">return</span> newState;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> createStore(monitorReducer, initialState, enhancer);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监控state 的enhancer</span></span><br><span class="line"><span class="keyword">const</span> logEnhancer = <span class="function">(<span class="params">createStore</span>) =&gt;</span> <span class="function">(<span class="params">reducer, initialState, enhancer</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> logReducer = <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;old state: &quot;</span>, state);</span><br><span class="line">    <span class="keyword">const</span> newState = reducer(state, action);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;new state: &quot;</span>, newState);</span><br><span class="line">    <span class="keyword">return</span> newState;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> createStore(logReducer, initialState, enhancer);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 集成enhancer</span></span><br><span class="line"><span class="keyword">const</span> enhancers = compose(logEnhancer, monitorEnhancer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建store</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(rootReducers, enhancers);</span><br><span class="line"><span class="comment">// 集成actions</span></span><br><span class="line"><span class="keyword">const</span> actions = bindActionCreators(</span><br><span class="line">  &#123; increment, decrement, reset, addTodo, shiftTodo &#125;,</span><br><span class="line">  store.dispatch</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 派发事件</span></span><br><span class="line">actions.increment(<span class="number">10</span>);</span><br><span class="line">actions.decrement(<span class="number">5</span>);</span><br><span class="line">actions.addTodo(<span class="string">&quot;learn Redux&quot;</span>);</span><br><span class="line">actions.addTodo(<span class="string">&quot;learn React&quot;</span>);</span><br><span class="line">actions.shiftTodo();</span><br><span class="line">actions.reset();</span><br></pre></td></tr></table></figure>

<h2 id="需求4"><a href="#需求4" class="headerlink" title="需求4"></a>需求4</h2><p>在3的基础上，使用applyMiddleware完成该功能</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 前面到action creator的部分都一样</span></span><br><span class="line"><span class="comment">// 集成reducer</span></span><br><span class="line"><span class="keyword">const</span> rootReducers = combineReducers(&#123; counter, todos &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// middleWare</span></span><br><span class="line"><span class="comment">// 监控state变化和action</span></span><br><span class="line"><span class="keyword">const</span> logMiddleWare = <span class="function">(<span class="params">store</span>) =&gt;</span> <span class="function">(<span class="params">next</span>) =&gt;</span> <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;old state :&quot;</span>, store.getState());</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;will diapatch:&quot;</span>, action);</span><br><span class="line">  next(action);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;new state :&quot;</span>, store.getState());</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监控执行时间</span></span><br><span class="line"><span class="keyword">const</span> monitorMiddleWare = <span class="function">(<span class="params">store</span>) =&gt;</span> <span class="function">(<span class="params">next</span>) =&gt;</span> <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> start = performance.now();</span><br><span class="line">  next(action);</span><br><span class="line">  <span class="keyword">const</span> end = performance.now();</span><br><span class="line">  <span class="keyword">const</span> diff = end - start;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;reducer execute time: &quot;</span>, diff);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建store</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(</span><br><span class="line">  rootReducers,</span><br><span class="line">  applyMiddleware(logMiddleWare, monitorMiddleWare)</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 集成actions</span></span><br><span class="line"><span class="keyword">const</span> actions = bindActionCreators(</span><br><span class="line">  &#123; increment, decrement, reset, addTodo, shiftTodo &#125;,</span><br><span class="line">  store.dispatch</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 派发事件</span></span><br><span class="line">actions.increment(<span class="number">10</span>);</span><br><span class="line">actions.decrement(<span class="number">5</span>);</span><br><span class="line">actions.addTodo(<span class="string">&quot;learn Redux&quot;</span>);</span><br><span class="line">actions.addTodo(<span class="string">&quot;learn React&quot;</span>);</span><br><span class="line">actions.shiftTodo();</span><br><span class="line">actions.reset();</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>前端工程师进阶系列</category>
        <category>Redux学习笔记</category>
      </categories>
      <tags>
        <tag>Redux</tag>
      </tags>
  </entry>
  <entry>
    <title>Redux学习笔记3：React和Redux的2种连接方法</title>
    <url>/2022/04/08/redux/redux3_react/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.bilibili.com/video/BV1RF411v7cE">视频：Redux Fundamentals</a> | <a href="https://stevekinney.github.io/redux-fundamentals/">课件</a></li>
<li><a href="https://www.redux.org.cn/docs/api/">官方文档：Redux API</a></li>
</ul>
<p>探究的问题：</p>
<ul>
<li><p>将React和Redux绑定的两种方式</p>
<ul>
<li>react-redux中的useSelector、useDispatch钩子</li>
<li>Connect API，mapStateToProps，mapDispatchToProps</li>
</ul>
</li>
</ul>
<span id="more"></span>

<h1 id="将React和Redux绑定"><a href="#将React和Redux绑定" class="headerlink" title="将React和Redux绑定"></a>将React和Redux绑定</h1><p>两种方法，</p>
<ul>
<li><p>新的技术栈，Hook API：useSelector、useDispatch</p>
</li>
<li><p>旧的技术栈，Connect API：mapStateToProps，mapDispatchToProps</p>
</li>
</ul>
<p>这两种方法的Connect API和Hook API都由react-redux库提供</p>
<h2 id="React-Redux"><a href="#React-Redux" class="headerlink" title="React Redux"></a>React Redux</h2><p>文档：<a href="https://react-redux.js.org/api/">https://react-redux.js.org/api/</a></p>
<p>翻译版：<a href="https://zhuanlan.zhihu.com/p/81569230">https://zhuanlan.zhihu.com/p/81569230</a></p>
<p>添加依赖</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cnpm install --save redux</span><br><span class="line">cnpm install --save react-redux</span><br><span class="line">cnpm install --save-dev redux-devtools-extension</span><br></pre></td></tr></table></figure>

<p>react-redux库中提供了useSelector、useDispatch钩子和connect API</p>
<p>redux-devtools-extension库可以激活redux devtools插件，对redux进行调试</p>
<h2 id="Hooks-API"><a href="#Hooks-API" class="headerlink" title="Hooks API"></a>Hooks API</h2><p>基本理念：在React中，不直接操作store对象，而是通过钩子获取state派发事件</p>
<h3 id="Provider"><a href="#Provider" class="headerlink" title="Provider"></a>Provider</h3><p>要在应用中获取store，需要使用Provider将应用包起来，使store暴露在组件树中，之后才能用其他Hooks管理Redux store</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(rootReducer)</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span>,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="useSelector"><a href="#useSelector" class="headerlink" title="useSelector"></a>useSelector</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result : any = useSelector(selector : <span class="built_in">Function</span>, equalityFn? : <span class="built_in">Function</span>)</span><br></pre></td></tr></table></figure>

<p>入参</p>
<ul>
<li>selector，回调函数，输入为state树，输出为想要获取的state树的一部分</li>
</ul>
<p>返回值</p>
<ul>
<li>回调的输出</li>
</ul>
<p>原理</p>
<ul>
<li>监听原理：每一个useSelector都对store创建了一个独立的subscription（store.subscribe），监听了state变化</li>
<li>渲染时机：函数组件渲染时，执行selector，useSelector存储了上一次selector的返回值，与这一次的比较，不同才触发重新渲染<ul>
<li>此处的比较是<code>===</code>严格引用比较</li>
</ul>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useSelector &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line"><span class="comment">// 获取state.count，count改变重新渲染</span></span><br><span class="line"><span class="keyword">const</span> Counter=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> count = useSelector(<span class="function"><span class="params">state</span>=&gt;</span>state.count)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="useDispatch"><a href="#useDispatch" class="headerlink" title="useDispatch"></a>useDispatch</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> dispatch = useDispatch()</span><br></pre></td></tr></table></figure>

<p>返回 Redux store 的 分发(dispatch) 函数的引用。等价于：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// react redux里不会这么用，只是意会一下</span></span><br><span class="line"><span class="keyword">const</span> dispatch=store.diapatch</span><br></pre></td></tr></table></figure>

<p>调用dispatch函数派发action</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;increment, decrement, set&#125; <span class="keyword">from</span> <span class="string">&#x27;./actions&#x27;</span></span><br><span class="line">dispatch(increment())</span><br><span class="line">dispatch(decrement())</span><br><span class="line">dispatch(set())</span><br></pre></td></tr></table></figure>

<p>在这里同样可以用redux中的bindActionCreators来集成action creator，上面的语法和下面的等价</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> actions=bindActionCreators(</span><br><span class="line">  &#123; increment, decrement, reset &#125;,</span><br><span class="line">  dispatch</span><br><span class="line">);</span><br><span class="line">actions.increment()</span><br><span class="line">actions.decrement()</span><br><span class="line">actions.set()</span><br></pre></td></tr></table></figure>

<h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>原sandbox：<a href="https://codesandbox.io/s/uo1rb">https://codesandbox.io/s/uo1rb</a></p>
<blockquote>
<p>需求：</p>
<p>按钮：按下按钮改变count的值</p>
<ul>
<li>INCREMENT，+1</li>
<li>DECREMENT，-1</li>
<li>RESET，-&gt; 0</li>
</ul>
<p>输入框：</p>
<ul>
<li>count改变时输入框的值也改变</li>
<li>按下提交后将count值置为输入框的值</li>
</ul>
</blockquote>
<img src="https://luryblog.oss-cn-beijing.aliyuncs.com/noteImg/redux/image-20220408153532536.png" alt="image-20220408153532536" style="zoom:50%;" />

<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>mysandbox：<a href="https://codesandbox.io/s/redux-counter-zbtugj">https://codesandbox.io/s/redux-counter-zbtugj</a></p>
<p>使用useCounter封装获取dispatch，action和state的操作</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useSelector, useDispatch &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; increment, decrement, set &#125; <span class="keyword">from</span> <span class="string">&#x27;../redux/actions&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; bindActionCreators &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounter = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> dispatch = useDispatch();</span><br><span class="line">  <span class="keyword">const</span> count = useSelector(<span class="function">(<span class="params">state</span>) =&gt;</span> state.count);</span><br><span class="line">  <span class="keyword">const</span> actions = bindActionCreators(&#123; increment, decrement, set &#125;, dispatch);</span><br><span class="line">  <span class="keyword">return</span> &#123; count, actions &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>表单组件中，表单、输入框、store的state、组件的state、输入框的value的绑定逻辑</p>
<ul>
<li>store的state、组件的state互相影响<ul>
<li>store的state改变引起组件state改变（useEffect）</li>
<li>表单提交时使用组件state改变store的state（onSubmit）</li>
</ul>
</li>
<li>组件的state、输入框的value双向绑定<ul>
<li>组件state改变引起输入框value改变（value&#x3D;{value}）</li>
<li>输入框value被用户改写时引起state改变（onChange）</li>
</ul>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useCounter &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils/useCounter&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SetCounter = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// count 与 val 相互影响</span></span><br><span class="line">  <span class="comment">// count改变引起val改变，val提交引起count改变</span></span><br><span class="line">  <span class="comment">// val 和 input.value 双向绑定</span></span><br><span class="line">  <span class="comment">// val改变引起input.value改变，input.value改变引起val改变</span></span><br><span class="line">  <span class="keyword">const</span> &#123; count, actions &#125; = useCounter();</span><br><span class="line">  <span class="keyword">const</span> [val, setVal] = useState(count);</span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setVal(count);</span><br><span class="line">  &#125;, [count]);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">section</span> <span class="attr">className</span>=<span class="string">&quot;controls&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">form</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">onSubmit</span>=<span class="string">&#123;(e)</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="xml">          e.preventDefault();</span></span><br><span class="line"><span class="xml">          actions.set(val);</span></span><br><span class="line"><span class="xml">        &#125;&#125;</span></span><br><span class="line"><span class="xml">      &gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">&quot;set-to&quot;</span>&gt;</span>Set Count<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">id</span>=<span class="string">&quot;set-to&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">type</span>=<span class="string">&quot;number&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">value</span>=<span class="string">&#123;val&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="xml">            setVal(e.target.value);</span></span><br><span class="line"><span class="xml">          &#125;&#125;</span></span><br><span class="line"><span class="xml">        /&gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Connect-API"><a href="#Connect-API" class="headerlink" title="Connect API"></a>Connect API</h2><h3 id="connect"><a href="#connect" class="headerlink" title="connect"></a>connect</h3><p><a href="https://www.redux.org.cn/docs/react-redux/api.html#connectmapstatetoprops-mapdispatchtoprops-mergeprops-options"><code>connect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])</code></a></p>
<p>连接 React 组件与 Redux store。</p>
<p><code>const NewComponent=connect(...)(OldComponent)</code></p>
<p>连接操作不会改变原来的组件类。<br>反而<strong>返回</strong>一个新的已与 Redux store 连接的组件类。</p>
<p>一般只会用到前两个参数：mapStateToProps，mapDispatchToProps</p>
<p>注* 如果一个参数都不传，默认会把dispatch传入到组件中作为参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> NewComponent = connect()(OldComponent);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> OldComponent=<span class="function">(<span class="params">&#123;dispatch&#125;</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 原组件里可以接收dispatch</span></span><br><span class="line">    dispatch(&#123;<span class="comment">//todo&#125;)</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="comment">// todo...</span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="mapStateToProps"><a href="#mapStateToProps" class="headerlink" title="mapStateToProps"></a>mapStateToProps</h3><p><code>mapStateToProps(state, [ownProps]): stateProps</code> (<em>Function</em>)</p>
<p>作为connect函数的第一个参数，如果不传这个参数，或者传入null，组件就不会监听store</p>
<p>如果定义该参数，组件将会监听 Redux store 的变化。任何时候，只要 Redux store 发生改变，<code>mapStateToProps</code> 函数就会被调用。</p>
<p>入参：</p>
<ul>
<li>state，值为store中存储的state树</li>
<li>ownProps，可省略，值为传递到组件的 props，<ul>
<li>，如果传了ownProps，那么只要组件接收到新的 props，<code>mapStateToProps</code> 也会被调用（例如，当 props 接收到来自父组件一个小小的改动，那么你所使用的 ownProps 参数，mapStateToProps 都会被重新计算）</li>
</ul>
</li>
</ul>
<p>返回值：</p>
<ul>
<li>stateProps，必须返回一个纯对象，这个对象会与组件的 props 合并</li>
</ul>
<p>例子：</p>
<p>MenuItems需要接收store中的state.items作为输入参数</p>
<p>在不改变原组件的基础上，使用connect返回一个新组件，新组建能够监听store的变化，并将state.items输入到原组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MenuItems &#125; <span class="keyword">from</span> <span class="string">&#x27;../components/MenuItems&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">items</span>: state.items</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> MenuItemsContainer = connect(mapStateToProps)(MenuItems);</span><br></pre></td></tr></table></figure>

<h3 id="mapDispatchToProps"><a href="#mapDispatchToProps" class="headerlink" title="mapDispatchToProps"></a>mapDispatchToProps</h3><p><code>mapDispatchToProps(dispatch, [ownProps]): dispatchProps</code> (<em>Object</em> or <em>Function</em>)</p>
<p>mapStateToProps可以是一个<strong>对象</strong>：</p>
<ul>
<li>每个定义在该对象的函数都将被当作 Redux action creator，对象所定义的方法名将作为属性名；</li>
<li>每个方法将返回一个新的函数，函数中<code>dispatch</code>方法会将action creator的返回值作为参数执行。</li>
<li>这些属性会被合并到组件的 props 中。</li>
</ul>
<p>mapStateToProps可以是一个<strong>函数</strong>：</p>
<p>入参：</p>
<ul>
<li><code>dispatch</code>，函数，就是useDispatch产生的dispatch函数</li>
<li><code>ownProps</code>，可省略，该参数的值为传递到组件的 props，<ul>
<li>如果传了ownProps，只要组件接收到新 props，<code>mapDispatchToProps</code> 也会被调用。</li>
</ul>
</li>
</ul>
<p>返回值：对象，</p>
<ul>
<li>这个对象通过 <code>dispatch</code> 函数与 action creator 以某种方式绑定在一起</li>
<li>（提示：你也许会用到 Redux 的辅助函数 <a href="http://rackt.github.io/redux/docs/api/bindActionCreators.html"><code>bindActionCreators()</code></a>）。</li>
</ul>
<p>如果省略这个 <code>mapDispatchToProps</code> 参数，默认情况下，<code>dispatch</code> 会自动注入到组件 props 中。</p>
<p>例子：</p>
<p>NewItemForm需要一个函数submitHandler作为它的输入参数，</p>
<ul>
<li>并且这个 submitHandler 要跟 dispatch 绑定，调用即可派发action</li>
<li>需要派发的 action 由 addNewItem 生成</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapDispatchToProps = <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">submitHandler</span>: <span class="function">(<span class="params">name, price</span>) =&gt;</span> dispatch(addNewItem(name, price))</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> NewItemFormContainer = connect(</span><br><span class="line">  <span class="literal">null</span>,</span><br><span class="line">  mapDispatchToProps</span><br><span class="line">)(NewItemForm);</span><br></pre></td></tr></table></figure>

<p>也可以简写，只传对象，connect会自动把dispatch包到对象外面（bindActionCreators）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mapDispatchToProps = &#123;</span><br><span class="line">  <span class="attr">submitHandler</span>: addNewItem</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h3><h4 id="需求-1"><a href="#需求-1" class="headerlink" title="需求"></a>需求</h4><p>原sandbox：<a href="https://codesandbox.io/s/df1j4">https://codesandbox.io/s/df1j4</a></p>
<p>应用实现的功能是商品价格计算器</p>
<ul>
<li>可以输入商品名和商品价格添加商品</li>
<li>可以删除商品</li>
<li>可以修改商品价格和数量</li>
<li>可以选择小费比例</li>
<li>最终计算出商品价格，小费价格和总价格</li>
</ul>
<p>state树结构：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">items</span>: [</span><br><span class="line">        &#123; <span class="attr">uuid</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;Tofu Roast&quot;</span>, <span class="attr">price</span>: <span class="number">14</span>, <span class="attr">quantity</span>: <span class="number">1</span> &#125;</span><br><span class="line">        &#123; <span class="attr">uuid</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;Vegan Ham&quot;</span>, <span class="attr">price</span>: <span class="number">12</span>, <span class="attr">quantity</span>: <span class="number">1</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">	<span class="attr">tipPercentage</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>给按钮绑定事件：</p>
<ul>
<li>add item：将表单中的item加入到state.items</li>
<li>remove：去掉state.items中对应的item</li>
</ul>
<p>给每一个商品的价格和数量输入框绑定事件：</p>
<ul>
<li>修改后更新state.items中的对应item</li>
</ul>
<p>每一次产生上述修改后要重新计算总价</p>
<img src="https://luryblog.oss-cn-beijing.aliyuncs.com/noteImg/redux/image-20220408194425171.png" alt="image-20220408194425171" style="zoom:50%;" />

<h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><p>我的sandbox：<a href="https://codesandbox.io/s/redux-calculator-mqt8g8">https://codesandbox.io/s/redux-calculator-mqt8g8</a></p>
<h5 id="商品增删改"><a href="#商品增删改" class="headerlink" title="商品增删改"></a>商品增删改</h5><p>state.items相关的action creator</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ITEM_ADDED = <span class="string">&#x27;ITEM_ADDED&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ITEM_DELETED = <span class="string">&#x27;ITEM_DELETED&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ITEM_PRICE_UPDATED = <span class="string">&#x27;ITEM_PRICE_UPDATED&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ITEM_QUANTITY_UPDATED = <span class="string">&#x27;ITEM_QUANTITY_UPDATED&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> addNewItem = <span class="function">(<span class="params">name, price</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">type</span>: ITEM_ADDED,</span><br><span class="line">    <span class="attr">payload</span>: &#123;</span><br><span class="line">      name,</span><br><span class="line">      price</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> deleteItem = <span class="function">(<span class="params">uuid</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">type</span>: ITEM_DELETED,</span><br><span class="line">    <span class="attr">payload</span>: &#123; uuid &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> updatePrice = <span class="function">(<span class="params">uuid, price</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">type</span>: ITEM_PRICE_UPDATED,</span><br><span class="line">    <span class="attr">payload</span>: &#123; uuid, price &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> updateQuantity = <span class="function">(<span class="params">uuid, quantity</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">type</span>: ITEM_QUANTITY_UPDATED,</span><br><span class="line">    <span class="attr">payload</span>: &#123; uuid, quantity &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>处理state.items部分更新的reducer</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  ITEM_ADDED,</span><br><span class="line">  ITEM_DELETED,</span><br><span class="line">  ITEM_PRICE_UPDATED,</span><br><span class="line">  ITEM_QUANTITY_UPDATED</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;./actions&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> id = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> initialItems = [</span><br><span class="line">  &#123; <span class="attr">uuid</span>: id++, name: <span class="string">&#x27;Tofu Roast&#x27;</span>, <span class="attr">price</span>: <span class="number">14</span>, <span class="attr">quantity</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">uuid</span>: id++, name: <span class="string">&#x27;Vegan Ham&#x27;</span>, <span class="attr">price</span>: <span class="number">12</span>, <span class="attr">quantity</span>: <span class="number">1</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> reducer = <span class="function">(<span class="params">state = initialItems, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> ITEM_ADDED:</span><br><span class="line">      <span class="keyword">const</span> item = &#123;</span><br><span class="line">        <span class="attr">uuid</span>: id++,</span><br><span class="line">        quantity: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">name</span>: action.payload.name,</span><br><span class="line">        <span class="attr">price</span>: <span class="built_in">parseInt</span>(action.payload.price, <span class="number">10</span>)</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">return</span> [...state, item];</span><br><span class="line">    <span class="keyword">case</span> ITEM_DELETED:</span><br><span class="line">      <span class="keyword">return</span> state.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> item.uuid !== action.payload.uuid);</span><br><span class="line">    <span class="keyword">case</span> ITEM_PRICE_UPDATED:</span><br><span class="line">      <span class="keyword">return</span> state.map(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> item.uuid === action.payload.uuid</span><br><span class="line">          ? &#123;</span><br><span class="line">              ...item,</span><br><span class="line">              <span class="attr">price</span>: <span class="built_in">parseInt</span>(action.payload.price, <span class="number">10</span>)</span><br><span class="line">            &#125;</span><br><span class="line">          : item;</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="keyword">case</span> ITEM_QUANTITY_UPDATED:</span><br><span class="line">      <span class="keyword">return</span> state.map(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> item.uuid === action.payload.uuid</span><br><span class="line">          ? &#123;</span><br><span class="line">              ...item,</span><br><span class="line">              <span class="attr">quantity</span>: <span class="built_in">parseInt</span>(action.payload.quantity, <span class="number">10</span>)</span><br><span class="line">            &#125;</span><br><span class="line">          : item;</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> reducer;</span><br></pre></td></tr></table></figure>

<p>删除、更新商品时如何派发action</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; MenuItem &#125; <span class="keyword">from</span> <span class="string">&#x27;../components/MenuItem&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  deleteItem,</span><br><span class="line">  updatePrice,</span><br><span class="line">  updateQuantity</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;../store/items/actions&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapDispatchToProps = <span class="function">(<span class="params">dispatch, ownProps</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">remove</span>: <span class="function">() =&gt;</span> dispatch(deleteItem(ownProps.uuid)),</span><br><span class="line">    <span class="attr">updatePrice</span>: <span class="function">(<span class="params">price</span>) =&gt;</span> dispatch(updatePrice(ownProps.uuid, price)),</span><br><span class="line">    <span class="attr">updateQuantity</span>: <span class="function">(<span class="params">quantity</span>) =&gt;</span></span><br><span class="line">      dispatch(updateQuantity(ownProps.uuid, quantity))</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> MenuItemContainer = connect(<span class="literal">null</span>, mapDispatchToProps)(MenuItem);</span><br></pre></td></tr></table></figure>

<p>MenuItem的API如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> MenuItem = <span class="function">(<span class="params">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">  uuid,</span></span></span><br><span class="line"><span class="params"><span class="function">  name,</span></span></span><br><span class="line"><span class="params"><span class="function">  price,</span></span></span><br><span class="line"><span class="params"><span class="function">  quantity,</span></span></span><br><span class="line"><span class="params"><span class="function">  total,</span></span></span><br><span class="line"><span class="params"><span class="function">  updatePrice = () =&gt; &#123;&#125;,</span></span></span><br><span class="line"><span class="params"><span class="function">  updateQuantity = () =&gt; &#123;&#125;,</span></span></span><br><span class="line"><span class="params"><span class="function">  remove = () =&gt; &#123;&#125;</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="商品价格计算"><a href="#商品价格计算" class="headerlink" title="商品价格计算"></a>商品价格计算</h5><p>商品价格的计算结果没必要放到redux store里，直接从state中取值，计算后放入组件就行了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Summary &#125; <span class="keyword">from</span> <span class="string">&#x27;../components/Summary&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> subtotal = state.items.reduce(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> acc + cur.price * cur.quantity;</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> tipAmount = (state.tipPercentage * subtotal) / <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">const</span> total = subtotal + tipAmount;</span><br><span class="line">  <span class="keyword">return</span> &#123; subtotal, tipAmount, total &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SummaryContainer = connect(mapStateToProps)(Summary);</span><br></pre></td></tr></table></figure>

<p>Summary组件的API如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Summary = <span class="function">(<span class="params">&#123; subtotal = <span class="number">0</span>, tipAmount = <span class="number">0</span>, total = <span class="number">0</span> &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>前端工程师进阶系列</category>
        <category>Redux学习笔记</category>
      </categories>
      <tags>
        <tag>Redux</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 1. 两数之和</title>
    <url>/2021/07/21/leetcode/leetcode1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://leetcode-cn.com/problems/two-sum/">https://leetcode-cn.com/problems/two-sum/</a></p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 <strong>和为目标值 target</strong> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。<br>你可以按任意顺序返回答案。</p>
<span id="more"></span>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [2,7,11,15], target = 9</span><br><span class="line">输出：[0,1]</span><br><span class="line">解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</span><br></pre></td></tr></table></figure>

<h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ul>
<li>2 &lt;&#x3D; nums.length &lt;&#x3D; 104</li>
<li>-109 &lt;&#x3D; nums[i] &lt;&#x3D; 109</li>
<li>-109 &lt;&#x3D; target &lt;&#x3D; 109</li>
<li>只会存在一个有效答案</li>
</ul>
<p>进阶：你可以想出一个时间复杂度小于 $O(n^2)$ 的算法吗？</p>
<h1 id="解一：哈希法"><a href="#解一：哈希法" class="headerlink" title="解一：哈希法"></a>解一：哈希法</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>遍历数组，扫描到数字a时，计算b&#x3D;target-a</p>
<ul>
<li>如果b在哈希表中，直接返回结果</li>
<li>否则，将a存入哈希表，继续遍历</li>
</ul>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><a href="https://blog.csdn.net/yiyueqinghui/article/details/112876881">ES6 new Map()</a><br>Map字典是以[键，值]的形式存储<br><code>set()</code><br>设置键名key对应的键值为value，然后返回整个 Map 结构</p>
<p><code>get()</code><br>get方法读取key对应的键值，如果找不到key，返回undefined</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">target</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> len=nums.length;</span><br><span class="line">    <span class="comment">//新建Map对象</span></span><br><span class="line">    <span class="keyword">let</span> sumMap=<span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="comment">//0号元素在它之前一定没有元素与之匹配，所以先存入哈希表</span></span><br><span class="line">    sumMap.set(nums[<span class="number">0</span>],<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//从1号元素开始遍历</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;len;i++)&#123;</span><br><span class="line">        match=target-nums[i];</span><br><span class="line">        <span class="comment">//如果match在Map中，即找到目标数对</span></span><br><span class="line">        <span class="comment">//返回Map中存储的数对应的索引和当前索引</span></span><br><span class="line">        <span class="keyword">if</span>(sumMap.get(match)!==<span class="literal">undefined</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> [sumMap.get(match),i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//否则，即match不在Map中</span></span><br><span class="line">        <span class="comment">//将它的值和索引存入Map，方便之和根据值查索引</span></span><br><span class="line">        sumMap.set(nums[i],i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>空间换时间<br>哈希时间复杂度$O(1)$，遍历n次<br>时间复杂度$O(N)$，空间复杂度$O(N)$</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>leetcode</category>
        <category>数组</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>数组</tag>
        <tag>哈希</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 165 比较版本号</title>
    <url>/2022/04/06/leetcode/lc_versionCp/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://leetcode-cn.com/problems/compare-version-numbers/">165. 比较版本号</a></p>
<p>给你两个版本号 <code>version1</code> 和 <code>version2</code> ，请你比较它们。</p>
<span id="more"></span>

<p>版本号由一个或多个修订号组成，各修订号由一个 <code>&#39;.&#39;</code> 连接。每个修订号由 <strong>多位数字</strong> 组成，可能包含 <strong>前导零</strong> 。每个版本号至少包含一个字符。修订号从左到右编号，下标从 0 开始，最左边的修订号下标为 0 ，下一个修订号下标为 1 ，以此类推。例如，<code>2.5.33</code> 和 <code>0.1</code> 都是有效的版本号。</p>
<p>比较版本号时，请按从左到右的顺序依次比较它们的修订号。比较修订号时，只需比较 <strong>忽略任何前导零后的整数值</strong> 。也就是说，修订号 <code>1</code> 和修订号 <code>001</code> <strong>相等</strong> 。如果版本号没有指定某个下标处的修订号，则该修订号视为 <code>0</code> 。例如，版本 <code>1.0</code> 小于版本 <code>1.1</code> ，因为它们下标为 <code>0</code> 的修订号相同，而下标为 <code>1</code> 的修订号分别为 <code>0</code> 和 <code>1</code> ，<code>0 &lt; 1</code> 。</p>
<p>返回规则如下：</p>
<ul>
<li>如果 <code>*version1* &gt; *version2*</code> 返回 <code>1</code>，</li>
<li>如果 <code>*version1* &lt; *version2*</code> 返回 <code>-1</code>，</li>
<li>除此之外返回 <code>0</code>。</li>
</ul>
<p>示例 1：</p>
<blockquote>
<p>输入：version1 &#x3D; “1.01”, version2 &#x3D; “1.001”<br>输出：0<br>解释：<strong>忽略前导零</strong>，”01” 和 “001” 都表示相同的整数 “1”</p>
</blockquote>
<p>示例 2：</p>
<blockquote>
<p>输入：version1 &#x3D; “1.0”, version2 &#x3D; “1.0.0”<br>输出：0<br>解释：<strong>忽略末尾零</strong>，version1 没有指定下标为 2 的修订号，即视为 “0”</p>
</blockquote>
<p>示例 3：</p>
<blockquote>
<p>输入：version1 &#x3D; “0.1”, version2 &#x3D; “1.1”<br>输出：-1<br>解释：version1 中下标为 0 的修订号是 “0”，version2 中下标为 0 的修订号是 “1” 。0 &lt; 1，所以 version1 &lt; version2</p>
</blockquote>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p><strong>需要解决的问题有</strong>：</p>
<ul>
<li>版本号长度不同：短则补0</li>
<li>每一位中的前导0（1.0001）：转换为Number自动消去</li>
<li>后置的0位（1.0.0.0）：逐个比较，另一边短则补0</li>
</ul>
<p><strong>算法</strong>：</p>
<p>按<code>.</code>分割，从左到右逐个对比版本号</p>
<ul>
<li>预处理：<ul>
<li>版本号长度可能不一，缺则补0</li>
<li>版本号从String格式转换为Number</li>
</ul>
</li>
<li>遍历数组，比较每一位版本号的大小<ul>
<li>大返回1</li>
<li>小返回-1</li>
<li>整个数组遍历完则表示相等，返回0</li>
</ul>
</li>
</ul>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">version1</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">version2</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> compareVersion = <span class="function"><span class="keyword">function</span>(<span class="params">version1, version2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> v1=version1.split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> v2=version2.split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> max=<span class="built_in">Math</span>.max(v1.length,v2.length)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;max;i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> x=v1[i]? <span class="built_in">parseInt</span>(v1[i]):<span class="number">0</span></span><br><span class="line">        <span class="keyword">let</span> y=v2[i]? <span class="built_in">parseInt</span>(v2[i]):<span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> (x&gt;y) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (x&lt;y) <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>细节：</p>
<ul>
<li><code>Math.max</code>单独计算，不要放在for循环里，不然每次循环都会执行</li>
<li><code>x=v1[i]? parseInt(v1[i]):0</code> 也可以写成 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator"><code>??</code>空值合并</a> 方式：<code>Number(v[i]??0)</code></li>
</ul>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 26. 删除有序数组中的重复项</title>
    <url>/2021/07/21/leetcode/leetcode2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/">https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/</a></p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。</p>
<p>不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。</p>
<span id="more"></span>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,1,2]</span><br><span class="line">输出：2, nums = [1,2]</span><br><span class="line">解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。</span><br><span class="line">不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure>

<h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ul>
<li>$0 &lt;&#x3D; nums.length &lt;&#x3D; 3 * 10^4$</li>
<li>$-10^4 &lt;&#x3D; nums[i] &lt;&#x3D; 10^4$</li>
<li>nums 已按升序排列</li>
<li>返回数组长度<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。</span><br><span class="line">for (int i = 0; i &lt; len; i++) &#123;</span><br><span class="line">    print(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="解一：双指针法"><a href="#解一：双指针法" class="headerlink" title="解一：双指针法"></a>解一：双指针法</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>双指针，指定两个指针slow和fast，同时扫描串<br>保持fast指向的值应该的slow指向的下一个值</p>
<ul>
<li>相等时，slow不动，fast前进1</li>
<li>不等时，slow前进1<ul>
<li>如果前进后的slow与fast值不等，则把它赋值为fast指向的值</li>
<li>fast前进1</li>
</ul>
</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> /**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeDuplicates = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> n=nums.length</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">1</span>) <span class="keyword">return</span> nums;</span><br><span class="line">    <span class="keyword">let</span> slow=<span class="number">0</span>,fast=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(fast&lt;n)&#123;</span><br><span class="line">        <span class="comment">//如果指针指向的数不相等</span></span><br><span class="line">        <span class="keyword">if</span>(nums[slow]!==nums[fast])&#123;</span><br><span class="line">            slow++;</span><br><span class="line">            <span class="keyword">if</span>(nums[slow]!==nums[fast]) nums[slow]=nums[fast];</span><br><span class="line">        &#125;</span><br><span class="line">        fast++;</span><br><span class="line">    &#125;</span><br><span class="line">    slow++;</span><br><span class="line">    <span class="comment">//题目要求返回数组长度</span></span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>时间复杂度$O(N)$，空间复杂度$O(1)$</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>leetcode</category>
        <category>数组</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>数组</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 35. 搜索插入位置</title>
    <url>/2021/07/22/leetcode/leetcode4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://leetcode-cn.com/problems/search-insert-position/">https://leetcode-cn.com/problems/search-insert-position/</a></p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p>
<p>请必须使用时间复杂度为 O(log n) 的算法。</p>
<span id="more"></span>

<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: nums = [1,3,5,6], target = 5</span><br><span class="line">输出: 2</span><br><span class="line">输入: nums = [1,3,5,6], target = 7</span><br><span class="line">输出: 4</span><br><span class="line">输入: nums = [1,3,5,6], target = 0</span><br><span class="line">输出: 0</span><br></pre></td></tr></table></figure>

<h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>nums 为无重复元素的升序排列数组</p>
<h1 id="解一：二分查找"><a href="#解一：二分查找" class="headerlink" title="解一：二分查找"></a>解一：二分查找</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>维护三个指针l,r,m<br>初始化l和r在数组首尾<br>循环：当l&lt;r时<br>m取(l+r)&#x2F;2向下取整</p>
<ul>
<li>如果target&lt;nums[m],r-m-1</li>
<li>如果nums[m]&lt;target,l&#x3D;m+1<br>循环结束时l&#x3D;r，比较target和nums[l]</li>
<li>等于，命中，返回l</li>
<li>小于，插入到l的位置，返回l</li>
<li>大于，插入到l右边，返回l+1</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">target</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> searchInsert = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> l=<span class="number">0</span>,r=nums.length-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> m=<span class="built_in">parseInt</span>((l+r)/<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(nums[l]&gt;target) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(nums[r]&lt;target) <span class="keyword">return</span> r+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">        m=<span class="built_in">parseInt</span>((l+r)/<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span>(target&lt;=nums[m]) r=m-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> l=m+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums[l]&gt;=target?l:l+<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>时间复杂度$O(\log n)$</p>
<h1 id="解二：直接遍历"><a href="#解二：直接遍历" class="headerlink" title="解二：直接遍历"></a>解二：直接遍历</h1><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>直接遍历数组，因为是升序排序的</p>
<ul>
<li>直接命中，返回索引</li>
<li>找到第一个比target大的元素，返回索引</li>
<li>没找到，加在后面，返回数组长度</li>
</ul>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> searchInsert = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] &gt;= target) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums.length;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h2><p>$O(n)$</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>leetcode</category>
        <category>数组</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>数组</tag>
        <tag>BST</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 27. 移除元素</title>
    <url>/2021/07/21/leetcode/leetcode3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://leetcode-cn.com/problems/remove-element/">https://leetcode-cn.com/problems/remove-element/</a></p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</p>
<p>不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。</p>
<p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p>
<span id="more"></span>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [3,2,2,3], val = 3</span><br><span class="line">输出：2, nums = [2,2]</span><br><span class="line">解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。</span><br></pre></td></tr></table></figure>

<h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ul>
<li>$0 &lt;&#x3D; nums.length &lt;&#x3D; 100</li>
<li>$0 &lt;&#x3D; nums[i] &lt;&#x3D; 50$</li>
<li>$0 &lt;&#x3D; val &lt;&#x3D; 100$</li>
<li>返回数组长度<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。</span><br><span class="line">for (int i = 0; i &lt; len; i++) &#123;</span><br><span class="line">    print(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="解一：双指针法"><a href="#解一：双指针法" class="headerlink" title="解一：双指针法"></a>解一：双指针法</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>把前面扫描到的需要删除的元素用最后的元素替换<br>双指针，指定两个指针head和tail，分别在串的首尾<br>head从头到尾扫描，找到与val相等的元素后</p>
<ul>
<li>tail从尾到头扫描</li>
<li>用第一个与val不等的元素替换head指向的元素<br>当head&#x3D;tail时结束，返回head</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">val</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeElement = <span class="function"><span class="keyword">function</span>(<span class="params">nums, val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> n=nums.length</span><br><span class="line">    <span class="keyword">if</span>(n===<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//分配首尾指针</span></span><br><span class="line">    <span class="keyword">let</span> head=<span class="number">0</span>,tail=n-<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//当head位于tail前面时</span></span><br><span class="line">    <span class="keyword">while</span>(head&lt;=tail)&#123;</span><br><span class="line">        <span class="comment">//如果head指针指向的值等于val</span></span><br><span class="line">        <span class="keyword">if</span>(nums[head]===val)&#123;</span><br><span class="line">            <span class="comment">//找到最后一个不等于val的元素</span></span><br><span class="line">            <span class="keyword">while</span>(tail&gt;<span class="number">0</span> &amp;&amp; nums[tail]===val) tail--;</span><br><span class="line">            <span class="comment">//如果tail在head左边了，说明没有可以替换的元素</span></span><br><span class="line">            <span class="comment">//即结束，返回处理好的数组长度head-1+1=head</span></span><br><span class="line">            <span class="keyword">if</span>(head&gt;=tail) <span class="keyword">return</span> head;</span><br><span class="line">            <span class="comment">//否则，将用tail元素替换head元素，tail左移</span></span><br><span class="line">            nums[head]=nums[tail--];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//head指向的元素处理完成，右移一位</span></span><br><span class="line">        head++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//head左边的元素都处理完成，返回长度head-1+1=head</span></span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>时间复杂度$O(N)$，空间复杂度$O(1)$</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>leetcode</category>
        <category>数组</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>数组</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 53. 最大子序和</title>
    <url>/2021/07/22/leetcode/leetcode5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://leetcode-cn.com/problems/maximum-subarray/">https://leetcode-cn.com/problems/maximum-subarray/</a></p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>
<span id="more"></span>

<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [-2,1,-3,4,-1,2,1,-5,4]</span><br><span class="line">输出：6</span><br><span class="line">解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。</span><br></pre></td></tr></table></figure>

<h1 id="解一：动态规划"><a href="#解一：动态规划" class="headerlink" title="解一：动态规划"></a>解一：动态规划</h1><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>用 $f(i)$ 代表以第 i 个数结尾的「连续子数组的最大和」，问题可以转换为：<br>$$\max_{0 \leq i \leq n-1} { f(i) }$$<br>我们只需要求出每个位置的 $f(i)$，然后返回最大值即可。</p>
<p>如何求 $f(i)$ ：<br>考虑 $nums[i]$ 单独成为一段还是加入 $f(i-1)$ 对应的那一段，这取决于 $nums[i]$ 和 $f(i−1)+nums[i]$ 的大小，取较大者，列出动态规划转移方程：<br>$$f(i) &#x3D; \max { f(i-1) + nums[i], nums[i] }$$</p>
<p>数据结构：  </p>
<ul>
<li>变量maxf维护当前最大的$f(i)$</li>
<li>变量pre维护当前$f(i),f(i-1)</li>
</ul>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><code>forEach()</code><br><a href="https://developer.mozilla.org/zh-CN/docs/orphaned/Web/JavaScript/Reference/Global_Objects/Array/forEach">文档</a></p>
<p>对数组的每个元素执行一次给定的函数。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> maxSubArray = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> pre = <span class="number">0</span>, maxf = nums[<span class="number">0</span>];</span><br><span class="line">    nums.forEach(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//选择f(i-1)+nums[i]还是nums[i]</span></span><br><span class="line">        pre = <span class="built_in">Math</span>.max(pre + x, x);</span><br><span class="line">        <span class="comment">//维护最大的f</span></span><br><span class="line">        maxf = <span class="built_in">Math</span>.max(maxf, pre);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> maxf;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="复杂度分析："><a href="#复杂度分析：" class="headerlink" title="复杂度分析："></a>复杂度分析：</h2><p>时间复杂度O(n)、空间复杂度O(n)</p>
<h1 id="解二：分治"><a href="#解二：分治" class="headerlink" title="解二：分治"></a>解二：分治</h1><h2 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h2><p>自上而下：分解成子问题，求解子问题<br>自下而上：合并子问题</p>
<p>求a序列在区间[l,r]内的最大子段和<br>以m分开每一次取一半来解决，最大子段和可能出现在3个位置</p>
<ul>
<li>左边内部</li>
<li>右边内部</li>
<li>包含了左边和右边的一部分</li>
</ul>
<h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">getSubSum=<span class="function"><span class="keyword">function</span>(<span class="params">nums,l,r</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l===r) <span class="keyword">return</span> nums[l];</span><br><span class="line">    <span class="keyword">let</span> m=<span class="built_in">parseInt</span>((l+r)/<span class="number">2</span>);</span><br><span class="line">    <span class="comment">//求左边内部</span></span><br><span class="line">    <span class="keyword">let</span> lsum=getSubSum(nums,l,m);</span><br><span class="line">    <span class="comment">//求右边内部</span></span><br><span class="line">    <span class="keyword">let</span> rsum=getSubSum(nums,m+<span class="number">1</span>,r); </span><br><span class="line">    <span class="comment">//求横跨左边和右边</span></span><br><span class="line">    <span class="keyword">let</span> ltemp=<span class="number">0</span>,lmax=nums[m];</span><br><span class="line">    <span class="comment">//从右往左遍历左边的元素，维护累加器和最大值</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=m;i&gt;=l;i--) &#123;</span><br><span class="line">        ltemp+=nums[i];</span><br><span class="line">        <span class="keyword">if</span>(ltemp&gt;lmax) lmax=ltemp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//从左往右遍历右边的元素，维护累加器和最大值</span></span><br><span class="line">    <span class="keyword">let</span> rtemp=<span class="number">0</span>,rmax=nums[m+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=m+<span class="number">1</span>;i&lt;=r;i++) &#123;</span><br><span class="line">        rtemp+=nums[i];</span><br><span class="line">        <span class="keyword">if</span>(rtemp&gt;rmax) rmax=rtemp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max(lsum,rsum,lmax+rmax);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> maxSubArray = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getSubSum(nums,<span class="number">0</span>,nums.length-<span class="number">1</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>一共logn层，每一层全部扫描n<br>时间复杂度$O(n\log n)$</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>leetcode</category>
        <category>数组</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>数组</tag>
        <tag>动态规划</tag>
        <tag>分治</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 88. 合并两个有序数组</title>
    <url>/2021/07/23/leetcode/leetcode6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://leetcode-cn.com/problems/merge-sorted-array/">https://leetcode-cn.com/problems/merge-sorted-array/</a></p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给你两个有序整数数组 nums1 和 nums2，请你将 nums2 合并到 nums1 中，使 nums1 成为一个有序数组。</p>
<p>初始化 nums1 和 nums2 的元素数量分别为 m 和 n 。你可以假设 nums1 的空间大小等于 m + n，这样它就有足够的空间保存来自 nums2 的元素。</p>
<p>注意！修改的数组是nums1;</p>
<span id="more"></span>

<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3</span><br><span class="line">输出：[1,2,2,3,5,6]</span><br></pre></td></tr></table></figure>
<h1 id="解一：直接合并排序"><a href="#解一：直接合并排序" class="headerlink" title="解一：直接合并排序"></a>解一：直接合并排序</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arrayObject.splice(index,howmany,item1,.....,itemX)</span><br></pre></td></tr></table></figure>
<p><a href="https://www.w3school.com.cn/jsref/jsref_splice.asp"><code>splice()</code></a> 方法删除位于从index开始，长度为howmany的元素，并添加新项目item</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arrayObject.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br></pre></td></tr></table></figure>
<p>箭头函数排序，升序，降序可以改成<code>b-a</code></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> merge = <span class="function"><span class="keyword">function</span>(<span class="params">nums1, m, nums2, n</span>) </span>&#123;</span><br><span class="line">    nums1.splice(m, nums1.length - m, ...nums2);</span><br><span class="line">    nums1.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b); </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>套用快速排序的时间空间复杂度</p>
<table>
<thead>
<tr>
<th>时间复杂度</th>
<th>空间复杂度</th>
</tr>
</thead>
<tbody><tr>
<td>$O((m+n)\log (m+n))$</td>
<td>$O(\log (m+n))$</td>
</tr>
</tbody></table>
<h1 id="解二：双指针，创建第三个数组"><a href="#解二：双指针，创建第三个数组" class="headerlink" title="解二：双指针，创建第三个数组"></a>解二：双指针，创建第三个数组</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>维护两个指针分别从头到尾扫描两个数组<br>把较小值放到第三个数组中</p>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> merge = <span class="function"><span class="keyword">function</span>(<span class="params">nums1, m, nums2, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> p1 = <span class="number">0</span>, p2 = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//新建数组</span></span><br><span class="line">    <span class="keyword">const</span> sorted = <span class="keyword">new</span> <span class="built_in">Array</span>(m + n).fill(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">var</span> cur;</span><br><span class="line">    <span class="keyword">while</span> (p1 &lt; m || p2 &lt; n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p1 === m) &#123;</span><br><span class="line">            <span class="comment">//num1结束，nums2补位</span></span><br><span class="line">            cur = nums2[p2++];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p2 === n) &#123;</span><br><span class="line">            <span class="comment">//num2结束，nums1补位</span></span><br><span class="line">            cur = nums1[p1++];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums1[p1] &lt; nums2[p2]) &#123;</span><br><span class="line">            <span class="comment">//取nums1</span></span><br><span class="line">            cur = nums1[p1++];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//取nums2</span></span><br><span class="line">            cur = nums2[p2++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//因为上面做了++操作，所以这里要-1</span></span><br><span class="line">        sorted[p1 + p2 - <span class="number">1</span>] = cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//结果返回nums1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i != m + n; ++i) &#123;</span><br><span class="line">        nums1[i] = sorted[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><table>
<thead>
<tr>
<th>时间复杂度</th>
<th>空间复杂度</th>
</tr>
</thead>
<tbody><tr>
<td>$O(m+n)$</td>
<td>$O(m+n)$</td>
</tr>
</tbody></table>
<h1 id="解三：逆向双指针，直接修改nums1"><a href="#解三：逆向双指针，直接修改nums1" class="headerlink" title="解三：逆向双指针，直接修改nums1"></a>解三：逆向双指针，直接修改nums1</h1><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>维护两个指针从后向前扫描两个数组<br>将较大者放到nums1末尾</p>
<h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> merge = <span class="function"><span class="keyword">function</span>(<span class="params">nums1, m, nums2, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> p1 = m-<span class="number">1</span>, p2 = n-<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//新建数组</span></span><br><span class="line">    <span class="keyword">for</span>(i=m+n-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span> (p1&lt;<span class="number">0</span>) nums1[i]=nums2[p2--];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p2&lt;<span class="number">0</span>) nums1[i]=nums1[p1--];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums1[p1]&gt;nums2[p2]) nums1[i]=nums1[p1--];</span><br><span class="line">        <span class="keyword">else</span> nums1[i]=nums2[p2--];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="复杂度分析-2"><a href="#复杂度分析-2" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><table>
<thead>
<tr>
<th>时间复杂度</th>
<th>空间复杂度</th>
</tr>
</thead>
<tbody><tr>
<td>$O(m+n)$</td>
<td>$O(1)$</td>
</tr>
</tbody></table>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>leetcode</category>
        <category>数组</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>数组</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>Grayskull为何物？</title>
    <url>/2021/07/07/shera/shera1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本文旨在梳理动画She-Ra and the Princess of Power中一些隐藏的背景设定，以帮助同好们更好地理解She-Ra的故事。文中大部分的信息整理自该作品的Fandom和Wikipedia页面。<br>为了更好的传达作品的本意，本文中出现的人物和势力的名称均采用英文原文。  </p>
<hr>
<p>下面我们正式开始探寻为什么女主人公Adora的变身台词是“<strong>For the honor of Grayskull</strong>”。<br>众所周知，新She-Ra作为一部重启类型的作品，它的很多设定确实是从前作中移植过来的，所以在解释这部作品的设定问题之前，我们先铺垫一下整个系列的背景：  </p>
<span id="more"></span>

<h1 id="He-Man-and-the-Masters-of-the-Universe"><a href="#He-Man-and-the-Masters-of-the-Universe" class="headerlink" title="He-Man and the Masters of the Universe"></a>He-Man and the Masters of the Universe</h1><p>作为系列动画的开端，这是一部1983年播出的的电视动画。</p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera1/heman.jpg"></p>
<p>He-man讲述了一位叫Adam的王子为了保护他的星球Eternia和一座名为Grayskull的城堡，变身成为宇宙巨人He-Man，与邪恶骷髅势力战斗的故事。和所有超级英雄一样，He-Man的力量是一个秘密，所以平时Adam是一般通过王子，遇敌时就会偷偷变身，而且没有人能认出他的真实身份。而作为系列的第一个主人公，Adam的招牌动作就是在变身时，高举魔法剑并大喊“For the honor of Grayskull”。<br>回到我们的问题，什么是Grayskull呢？设定上，Grayskull是一座位于Eternia星球的神秘古堡，蕴藏着巨大的魔法力量，这种力量可以征服整个星球，所以它成为了邪恶的势力争夺的焦点。事实上He-Man的第一个画面就是定格在Grayskull上，邪恶反派干部正要打开这座城堡的大门，这时英雄He-Man从里面走出来，守卫城堡并把坏人都打跑了。而主人公的变身能力也是由守护Grayskull的女巫授予的，是以变身He-Man时需要咏唱Grayskull堡。还有个有趣的细节，动画制作之前，概念设计师认为Grayskull堡属于邪恶骷髅势力，所以做成了骷髅外型，这也是它名称的由来，但是最后这个地标被设定成主角方要守护的地点。<br>而这座城堡之所以这么重要，其核心原因是卖！玩！具！Masters of the Universe这个IP其实是由玩具制造公司Mattel打造的，之后他们联合动画公司Filmation推出了这一系列动画，而Grayskull城堡套装玩具正式当时公司玩具生产线的主打产品，动画大火，玩具也颇受欢迎，被称为是20世纪80年代男孩们最想要的圣诞礼物。  </p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera1/grayskull.jpg" alt="grayskull" title="Castle Grayskull玩具套装"></p>
<h1 id="She-Ra-Princess-of-Power"><a href="#She-Ra-Princess-of-Power" class="headerlink" title="She-Ra: Princess of Power"></a>She-Ra: Princess of Power</h1><p>He-Man大卖之后制作方想要拓宽女性市场<br>于是就有了1985年播出的，以女性为主角的续作She-Ra。</p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera1/shera.jpg" alt="shera" title="She-Ra: Princess of Power"></p>
<p>该作的女主人公Adora是前作男主Adam的孪生姐妹。Adora的故事发生在一个新的星球Etheria上。作为Eternia的公主，她儿时被反派Hordak（千面魔）绑架到了Etheria，Adora就此被洗脑培养为反派阵营Horde军团的小干部。<br>前作的大人气主角Adam受到Grayskull女巫的指示，带着守护之剑来找到Adora并与她相认，Adora就此解除了洗脑，并举起神剑，继承了Adam的变身台词“For the honor of Grayskull”，变身成She-Ra，成为了反抗军Great Rebellion的领袖，同Horde势力战斗。之后就是Adora和Etheria的本土英雄一起对抗邪恶的故事。顺便一提，Horde军团代表的是新兴的科技力量对传统农耕社会的侵略，所以动画中Horde使用高科技武器，而反抗军则用传统冷兵器和魔法与其搏斗（也就是魔法封建贵族带领农民打钢枪大炮的故事）。<br>She-Ra的很多设定其实都是跟He-Man的呼应，所以两个人名字相似，两颗星球的名字类似，而且两个人都有魔法剑和魔法坐骑，都会变身，都是变了身就没人能认得出的秘密英雄。为了和Adam的Grayskull堡对照（顺便推出新玩具），Adora也有她自己的专属城堡Crystal Castle，这个城堡住着Light Hope，主要负责在She-Ra遇到困难时提供帮助。至于为什么Adora变身时咏唱的是Grayskull，我想是因为希瑞的神剑来自前作的Grayskull堡女巫，并且Grayskull玩具真的很好卖……  </p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera1/crystal.jpg" alt="crystal" title="Crystal Castle玩具套装"></p>
<h1 id="She-Ra-and-the-Princess-of-Power"><a href="#She-Ra-and-the-Princess-of-Power" class="headerlink" title="She-Ra and the Princess of Power"></a>She-Ra and the Princess of Power</h1><p>结束了关于老作品的啰嗦，让我们来到2018年推出的新She-Ra。</p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera1/shera_new.jpg" alt="shera_new" title="She-Ra and the Princess of Power"></p>
<p>新的故事是在1985 She-Ra的基础上继承发扬的，做了很多剧情和设定上的改动，在这里我简单列举几个：  </p>
<ul>
<li>作品彻底摆脱了Adam的存在</li>
<li>Adora不是被Hordak绑架的，而是被捡到的</li>
<li>Adora的母星Eternia代表的不再是魔法势力，而是比Horde更先进更古老的科技势力</li>
<li>角色设计更加多元化，彩虹，彩虹，更多的彩虹</li>
<li>以及，<strong>CATRADORAAAAAAA</strong></li>
</ul>
<p>关于Etheria的地理环境和主线剧情的问题我将在之后的文章叙述，本文我们继续关注Grayskull。在1-4季中，我们的Adora依然继承了前作中的变身台词“For the honor of Grayskull”，并且剧集没有对这句口令作出任何解释，直到第五季才终于打上了补丁。</p>
<h2 id="She-Ra的第一次变身"><a href="#She-Ra的第一次变身" class="headerlink" title="She-Ra的第一次变身"></a>She-Ra的第一次变身</h2><p>首先我们来回顾一下S01E01中Adora第一次见到Light Hope的场景：</p>
<blockquote>
<p><em>Adora无意中激活了神剑，她的面前出现了Light Hope的投影</em></p>
<p><strong>Light Hope:</strong> 你好，Adora。我的名字是Light Hope，我等了你很久了，但是在你与这柄剑建立纽带之前，我无法与你沟通。<br><strong>Adora:</strong> 你是送来这柄剑的人？<br><strong>Light Hope:</strong> 这柄剑注定是属于你的。Etheria需要你，Adora。你愿意回应它的召唤吗？你愿意为 Grayskull的荣誉而战吗？（Will you fight for the honor of Grayskull?）<br><strong>Adora:</strong> 你在说什么？什么是Grayskull？你说的没头没尾的，我听不懂。<br><strong>Light Hope:</strong> 你会懂的。</p>
</blockquote>
<p>而下面是Adora第一次变身的场景：</p>
<blockquote>
<p><em>Adora以神剑御敌，神剑被激活。</em><br><em>闪现一些画面：Etheria星球的全景，一颗火球坠落在地表，闪耀的Crystal Castle，草原上一个被激活的传送门中传出婴儿的声音，高举神剑的女战士的背影。</em></p>
<p>Light Hope的声音响起，她问“<strong>Adora, Will you fight for the honor of Grayskull?<strong>”<br>于是Adora顺势喊出了“</strong>For the honor of Grayskull</strong>”，并变身为She-Ra。</p>
</blockquote>
<p>可以看到，一开始我们的主角Adora完全不理解这个变身台词的含义，而之后不管是她还是观众们都自然而然地接受了这只是一个设定好的用于激活神剑的口令这一事实，只能说这种设计是出于情怀考虑。但是好在第五季编剧终于对这个问题作出了解释。</p>
<h2 id="上一代She-Ra的起义"><a href="#上一代She-Ra的起义" class="headerlink" title="上一代She-Ra的起义"></a>上一代She-Ra的起义</h2><p>She-Ra之所以能变身是因为她们是守护之剑的制造者，The First Ones，任命的管理员。The First Ones是一个拥有先进科技的古老文明，随着1-4季的故事展开，我们知道这个文明在跨星系殖民扩张，他们最初生活在母星Eternia，之后殖民了我们的星球Etheria，他们利用科技吸取整个星球的魔法能量，将能量贮存在星球的核心，把星球改造成了毁灭性的武器，上述计划被称为Etheria之心计划（The Heart of Etheria Project）。而上一代She-Ra，Mara试图阻止这个把星球变成武器的可怕计划，但是她的斗争失败了，于是她只能开启传送门，将星球传送到了Despondos，一个荒凉而封闭的维度空间，这样The First Ones就无法接触到Etheria，是以能够保护整个星球。<br>在S05E10中，Bow和Glimmar找到了Bow的父亲，两位致力于研究theFirst Ones文明的学者。学者们发现Mara其实并不是孤军奋战，她与一群起义军并肩作战。Light Hope播放了数据库中的一段录音：</p>
<blockquote>
<p>这是我们最后一次传递信息，如果有人听到，请你认真听。<br>Etheria之心有自动防故障装置，你们可以通过它彻底摧毁Etheria之心，它就位于Arxia前哨。<br>一周前我们与Arxia失去了联络，如果那边还有幸存者，你一定要找到它，Mara给我们争取了时间，但我们已经来不及。<br><strong>我们是Grayskull起义军中队，这是我们的最后一次联络。</strong></p>
</blockquote>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera1/grayskull_new.jpg" alt="grayskull_new" title="Grayskull的最后留言"></p>
<p>可以看到在本作中的Grayskull是一个起义军中队的名称，这个中队找到了阻止Etheria之心计划的方法，但也就此牺牲了。虽然剧集中没有明确指出，但是我个人的推测是，Mara可能是为了纪念这一支牺牲的起义军而将守护之剑的口令设置成了 “For the honor of Grayskull”。所以Grayskull从一个虚幻的力量象征，变成了一个实实在在的革命群体的代号，体现了革命精神的传承性，这还是有很大的进步意义的。</p>
<hr>
<p>下一篇文章我打算探讨星球Etheria的地理特征，主要是关于各个势力的地理位置分布，以及它们与1985 She-Ra的区别，感谢你阅读到这里！</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>shera系列考据</category>
      </categories>
      <tags>
        <tag>shera</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 108. 将有序数组转换为二叉搜索树</title>
    <url>/2021/07/23/leetcode/leetcode7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/">https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/</a></p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给你一个整数数组 nums ，其中元素已经按 升序 排列，请你将其转换为一棵 高度平衡 二叉搜索树。</p>
<p>高度平衡 二叉树是一棵满足「每个节点的左右两个子树的高度差的绝对值不超过 1 」的二叉树。</p>
<span id="more"></span>

<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>递归构建二叉搜索树BST</p>
<ul>
<li>以数组中间元素为root结点的值</li>
<li>定义最左子树</li>
<li>定义右子树</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;TreeNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">addTreeNode</span>(<span class="params">l,r,nums</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l&gt;r) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> m=<span class="built_in">parseInt</span>((l+r)/<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">const</span> root=<span class="keyword">new</span> TreeNode(nums[m]);</span><br><span class="line">    root.left=addTreeNode(l,m-<span class="number">1</span>,nums);</span><br><span class="line">    root.right=addTreeNode(m+<span class="number">1</span>,r,nums);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sortedArrayToBST = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> addTreeNode(<span class="number">0</span>,nums.length-<span class="number">1</span>,nums)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>leetcode</category>
        <category>数组</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>数组</tag>
        <tag>BST</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 219. 存在重复元素 II</title>
    <url>/2021/07/29/leetcode/leetcode8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://leetcode-cn.com/problems/contains-duplicate-ii/">https://leetcode-cn.com/problems/contains-duplicate-ii/</a></p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个整数数组和一个整数 k，判断数组中是否存在两个不同的索引 i 和 j，使得 nums [i] &#x3D; nums [j]，并且 i 和 j 的差的 绝对值 至多为 k。</p>
<span id="more"></span>

<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: nums = [1,2,3,1], k = 3</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure>

<h1 id="解一：Map哈希表"><a href="#解一：Map哈希表" class="headerlink" title="解一：Map哈希表"></a>解一：Map哈希表</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>维护一个哈希表存储 【值：索引】对<br>初始化将nums[0]加入<br>扫描数组</p>
<ul>
<li>如果扫描到在哈希表中的数据，判断是否距离超过k</li>
<li>没超过，返回true</li>
<li>超过，更新键值对的索引值</li>
<li>如果扫描到不在哈希表中的数据，将它加入<br>返回false</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @param &#123;number[]&#125; nums</span><br><span class="line"> * @param &#123;number&#125; k</span><br><span class="line"> * @<span class="keyword">return</span> &#123;boolean&#125;</span><br><span class="line"> */</span><br><span class="line">var containsNearbyDuplicate = function(nums, k) &#123;</span><br><span class="line">    //哈希法</span><br><span class="line">    let <span class="built_in">map</span>=new Map();</span><br><span class="line">    <span class="built_in">map</span>.<span class="built_in">set</span>(nums[<span class="number">0</span>],<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> (let i=<span class="number">1</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">        //如果不在<span class="built_in">map</span>中,加入</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">map</span>.get(nums[i])!==undefined)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i-<span class="built_in">map</span>.get(nums[i])&lt;=k) <span class="keyword">return</span> true;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">map</span>.<span class="built_in">set</span>(nums[i],i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> false</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="解二：Set类滑动窗口，算哈希吧"><a href="#解二：Set类滑动窗口，算哈希吧" class="headerlink" title="解二：Set类滑动窗口，算哈希吧"></a>解二：Set类滑动窗口，算哈希吧</h1><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>维护一个哈希表，里面至多包含k个元素<br>出现重复值时返回true<br>如果哈希表中存在大于k个元素，移除最前面的数</p>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">var containsNearbyDuplicate = function(nums, k) &#123;</span><br><span class="line">    //哈希法</span><br><span class="line">    let <span class="built_in">set</span>=new <span class="type">Set</span>();</span><br><span class="line">    <span class="keyword">for</span> (let i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">        //如果不在<span class="built_in">set</span>中,加入</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">set</span>.has(nums[i])) <span class="keyword">return</span> true;</span><br><span class="line">        <span class="built_in">set</span>.add(nums[i])</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">set</span>.size&gt;k) <span class="built_in">set</span>.delete(nums[i-k])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> false</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>leetcode</category>
        <category>数组</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>数组</tag>
        <tag>哈希</tag>
      </tags>
  </entry>
  <entry>
    <title>Ethria地理志</title>
    <url>/2021/07/07/shera/shera2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本文旨在梳理动画She-Ra and the Princess of Power中一些隐藏的背景设定，以帮助同好们更好地理解She-Ra的故事。文中大部分的信息整理自该作品相关的Fandom、Wikipedia和Reddit页面。<br>为了更好的传达作品的本意，本文中出现的人物、地名和势力的名称均采用英文原文。</p>
<hr>
<p>在上一篇介绍Grayskull的文章中，我们厘清了在2018 She-Ra中，故事的主要舞台是我们魔法与科技并存的星球Etheria，但是纵观新全5季，我们似乎从没有见过整个Etheria的世界地图，仅有的是远远的从太空俯瞰的星球七彩的轮廓，和一些局部的抽象化的战略地图。通过各种网上冲浪，我发现，动画制作组可能真的没怎么考虑过Etheria的全景地图到底是什么样的这件事，不过这不妨碍爱好者们寻找各种关于Etheria地理环境的蛛丝马迹。  </p>
<span id="more"></span>

<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera2/p1.png" alt="p1" title="S01中最初的Etheria，只有两个卫星，因为旧She-Ra中是这样设定的"></p>
<p>上图展示了S01中最初的Etheria，只有两个卫星，因为旧She-Ra中是这样设定的。</p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera2/p2.png" alt="p2" title="S05的Etheria，有12个卫星，这也是目前的官方设定"></p>
<p>而S05的Etheria有12个卫星，这也是目前的官方设定。</p>
<h1 id="势力划分"><a href="#势力划分" class="headerlink" title="势力划分"></a>势力划分</h1><p>在着手处理地图的问题之前，我们先来搞清楚Etheria上到底有哪几个主要势力。</p>
<h2 id="国家"><a href="#国家" class="headerlink" title="国家"></a>国家</h2><p>首先，根据Fandom上的星球介绍，Etheria上有着7个正式的国家。它们是Bright Moon，Plumeria，Salineas，Kingdom of Snows，Dryl，Mystacor，以及Fright Zone。<br>为了方便把这些地名对应到我们脑海里的那些角色上，我们先简单地遍历一下这几个国家和它们的统治者。  </p>
<h3 id="Bright-Moon"><a href="#Bright-Moon" class="headerlink" title="Bright Moon"></a>Bright Moon</h3><p>明月王国，Etheria最大的国家，它是反抗军和公主联盟的总部。<br>统治者：Queen Angella &amp; Glimmer  </p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera2/k1.png" alt="k1"></p>
<h3 id="Plumeria"><a href="#Plumeria" class="headerlink" title="Plumeria"></a>Plumeria</h3><p>森林植被覆盖的农业国家，居民大部分都热爱和平，远离争端，军事力量非常薄弱。<br>统治者：Perfuma  </p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera2/k2.png" alt="k2"></p>
<h3 id="Salineas"><a href="#Salineas" class="headerlink" title="Salineas"></a>Salineas</h3><p>海洋之国，一道Sea Gate将它与外界隔绝起来以保护它的国民。<br>统治者：Mermista  </p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera2/k3.png" alt="k3"></p>
<h3 id="Kingdom-of-Snows"><a href="#Kingdom-of-Snows" class="headerlink" title="Kingdom of Snows"></a>Kingdom of Snows</h3><p>Etheria的第二大国，位于极地，常年被冰雪覆盖。因为遥远和寒冷，它很少受到Horde的骚扰，所以最开始选择保持中立。<br>统治者：Frosta  </p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera2/k4.png" alt="k4"></p>
<h3 id="Dryl"><a href="#Dryl" class="headerlink" title="Dryl"></a>Dryl</h3><p>主要发展矿业和科技的王国，是唯一一个没有魔法元素的国度，似乎没有什么居民。<br>统治者：Entrapta  </p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera2/k5.png" alt="k5"></p>
<h3 id="Mystacor"><a href="#Mystacor" class="headerlink" title="Mystacor"></a>Mystacor</h3><p>巫师的国度，位于一座浮岛之上，比起国家，它更像是一个学院。<br>统治者：Castaspella  </p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera2/k6.png" alt="k6"></p>
<h3 id="Fright-Zone"><a href="#Fright-Zone" class="headerlink" title="Fright Zone"></a>Fright Zone</h3><p>Horde的老巢。曾经是Scorpia的国家，但是后来Hordak登录在星球上并占领了这片区域，让它充满了科技和污染的气息。<br>统治者：Hordak  </p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera2/k7.png" alt="k7"></p>
<hr>
<p>看到这里差不多大家能建立一个初步的印象：我们有5个由公主代表的国家，其中有3个在内陆，1个在海洋，1个在极地；还有一个特殊的由巫师统治的国家，它位于一座浮空岛上；最后还有一个我们都很熟悉的反派国家，它也在大陆上，并一直试图侵占他国的领土。</p>
<h2 id="区域和城镇"><a href="#区域和城镇" class="headerlink" title="区域和城镇"></a>区域和城镇</h2><p>除了上述的国家，还有一些值得注意的地区。</p>
<h3 id="Whispering-Woods"><a href="#Whispering-Woods" class="headerlink" title="Whispering Woods"></a>Whispering Woods</h3><p>充满魔法力量的森林，它位于Fright Zone和Bright Moon之间，形成了一道天然屏障。森林里还有我们的Crystal Castle和Madame Razz的家。Bow的家人和他们的图书馆也位于森林中。</p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera2/a1.png" alt="a1"></p>
<h3 id="Crystal-Castle"><a href="#Crystal-Castle" class="headerlink" title="Crystal Castle"></a>Crystal Castle</h3><p>The First Ones的遗迹，城堡里是我们的超级AI，Light Hope。Adora在这里获取了很多关于She-Ra的知识，不过部分都是经由Light Hope粉饰过的错误的历史。</p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera2/a2.png" alt="a2"></p>
<h3 id="Thaymor"><a href="#Thaymor" class="headerlink" title="Thaymor"></a>Thaymor</h3><p>整个动画第一场战役发生的城镇，也是catradora正式分手的地点。本来Adora应该和Catra一起占领这个城镇，但是在这里Adora发现了Horde的暴行，并决心投身于反叛军。</p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera2/a3.png" alt="a3"></p>
<h3 id="Crimson-Waste"><a href="#Crimson-Waste" class="headerlink" title="Crimson Waste"></a>Crimson Waste</h3><p>一片沙漠之地，也是法外之地，没有国籍的恶棍们聚集在这里。第三季中，Adora等人为了追寻有关Mara的真相来这里进行调查。这里有一座名为Valley of the Lost的城镇。</p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera2/a4.png" alt="a4"></p>
<h3 id="Beast-Island"><a href="#Beast-Island" class="headerlink" title="Beast Island"></a>Beast Island</h3><p>Horde的监狱，充满野兽和未知恐怖的岛屿，岛上的精神污染信号会使人迷失，Entrapta和Glimmer的父亲Micah都曾被流放到这座岛上。这座岛的一切异常都是源于The First Ones失控的科技。</p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera2/a5.png" alt="a5"></p>
<hr>
<p><strong>那么回到我们的问题，这些地点是如何分布的呢？</strong></p>
<p>在动画里，我们完全没有看到过完整的地图，目前唯一官方给出的地图，是在官方漫画Legendof the Fire Princess里的一张简略的大陆轮廓图。不过幸好，我们还有1985 She-Ra，为了卖玩具，他们确实有好好地画出一张完整的地图。</p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera2/m1.png" alt="m1" title="Legend of the Fire Princess中的地图"></p>
<h1 id="1985-She-Ra的世界地图"><a href="#1985-She-Ra的世界地图" class="headerlink" title="1985 She-Ra的世界地图"></a>1985 She-Ra的世界地图</h1><p>以下是作为玩具配件的Ehteria地图。</p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera2/m2.png" alt="m2" title="1985 She-Ra的大地图"></p>
<p>事实上这个地图还有一个更小巧的版本，它被印刷在Crystal Castle玩具套装的一个小圆桌上，想了解玩具的可以看看<a href="https://www.youtube.com/watch?v=6qpUXIG6fe0">这个视频</a>。</p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera2/m3.png" alt="m3" title="1985 She-Ra的小地图"></p>
<p>因为地图的字体比较小，所以我把一部分比较重要的地点名称放大。本文主要关注比较详细的大地图的内容。</p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera2/m4.png" alt="m4" title="较大的字体表示国家区域，较小的表示城镇"></p>
<p>下面我们来正式地分析一下地图。<br>在这个版本中，大陆的轮廓和新She-Ra漫画中的基本一致，所以新动画应该是参考了这张老地图的，它作为我们现在能找到的唯一官方地图，非常具有参考价值。<br>大陆的中央就是故事开始的地方——<strong>Fright Zone</strong>，Horde的老巢，它将整个大陆纵切为两块。西边的区域属于法外之地，而东边的区域则都是反抗军的领土。  </p>
<h2 id="中部和西部"><a href="#中部和西部" class="headerlink" title="中部和西部"></a>中部和西部</h2><p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera2/m5.png" alt="m5" title="中西部大陆"></p>
<p><strong>Fright Zone</strong>的西南角落是Beast Island，它是一个被水环绕的监狱岛屿。而东北方向是Crimson Waste，在1985版本里，这里是由Scorpia统治的，而那时她也是Hordak的忠实追随者，所以这部分也算是Horde领地。</p>
<p>西边的大陆大部分是Valley of the Lost，在老版本里，这是一个神秘黑暗的山谷，传说去的人没有一个能回来，而且山谷里还有一座神秘的图书馆。在新版本中，咱们的动画组把老设定重组了一下，Valley of the Lost和Crimson Waste变成了同一个地方，而图书馆被挪到了Whispering Woods。</p>
<h2 id="东部、极地和海洋"><a href="#东部、极地和海洋" class="headerlink" title="东部、极地和海洋"></a>东部、极地和海洋</h2><p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera2/m6.png" alt="m6" title="东部大陆"></p>
<p>东边的大陆主要的公主们的地盘。可以看到<strong>Kingdom of Snows</strong>远远的在北极，所以Horde够不到它。而这张图上并没有画出海洋王国<strong>Salineas</strong>在哪，鉴于这里只标出了一个海洋Growling Sea，我们就假设它就在那里吧。</p>
<p><strong>Bright Moon</strong>在大陆最东边，一条名为SingingRiver的河流把整个国家和大陆其他部分隔离开了，它的北方是Whispering Woods，勉强算是这个森林阻挡了Horde进犯的步伐吧。中间的位置还有我们的明星城市Thaymor，看这个位置确实是当之无愧是战略要塞。<strong>Mystactor</strong>在稍微西边一点的位置，鉴于它是一个飘在空中的浮岛，即使它比较靠近Horde，基本上也不会受到威胁。</p>
<p>新She-Ra的7个国家中还剩下2个，Dryl和Plumeria。不过在1985版本中，它们并不是国家。<strong>Dryl</strong>只是一个经营矿业的城镇；而Entrapta也不是公主，她是土生土长的Horde小干部。Perfuma也不是公主，没有领地，只是会使用植物魔法；而<strong>Plumeria</strong>，那时候还不存在。</p>
<p>以上是1985版本的世界地图，它只能解决我们的一部分问题，譬如说，Fright Zone在中间，Kingdom of Snows在北极，Salineas在海里，Bright Moon在最东边，Mystactor、Dryl和Plumeria在内陆的某个地方……剩下的地图，只能由粉丝自己在脑子里补完了。</p>
<h1 id="粉丝制作的Etheria地图"><a href="#粉丝制作的Etheria地图" class="headerlink" title="粉丝制作的Etheria地图"></a>粉丝制作的Etheria地图</h1><p>国外的She-Ra爱好者跟我们一样好奇世界地图的问题，而且已经有不少人做了深度研究了，这里我放一张完成度最高的粉丝作品。</p>
<p>这是由JavaRogers根据漫画地图制作的，考据真的很详细。这里放上发布这张地图的<a href="https://www.reddit.com/r/PrincessesOfPower/comments/js3z7v/doing_work_on_a_map_of_etheria/">Reddit页面</a>，这位朋友还整理了新She-Ra中出现过的<a href="https://www.reddit.com/r/PrincessesOfPower/comments/jr8d5e/list_of_location_details_from_shera_and_the/">所有地点</a>，感兴趣的可以去支持。</p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/shera2/m7.png" alt="m7" title="JavaRogers绘制的新She-Ra地图"></p>
<p>在这张地图上，FrightZone、Bright Moon、Kingdom of Snows、Mystacor的位置都没怎么变。Crimson Waste和Valley of the lost合并了，被安排在大陆西边。Salineas被安排在Growling Sea，而且更靠近Bright Moon的海岸线。Dryl在原本Scorpian Hill的位置，Plumeria在靠近Fright Zone的内陆。Whispering Woods往南边移了一点，好让它更符合“保护Bright Moon”的设定。都蛮符合动画的内容的，很合理，<strong>谢谢你，JavaRogers！</strong></p>
<hr>
<p>感谢你看到这里，这篇文章地名比较多，希望没有写得太让人头晕。下一篇文章应该是关于She-Ra主线剧情的梳理，又或者是新老She-Ra的人设对比，下次见啦~</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>shera系列考据</category>
      </categories>
      <tags>
        <tag>shera</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 39. 组合总和</title>
    <url>/2021/07/29/leetcode/leetcode9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://leetcode-cn.com/problems/combination-sum/">https://leetcode-cn.com/problems/combination-sum/</a></p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个无重复元素的正整数数组 candidates 和一个正整数 target ，找出 candidates 中所有可以使数字和为目标数 target 的唯一组合。</p>
<span id="more"></span>

<p>candidates 中的数字可以无限制重复被选取。如果至少一个所选数字数量不同，则两种组合是唯一的。</p>
<p>对于给定的输入，保证和为 target 的唯一组合数少于 150 个。</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: candidates = [2,3,6,7], target = 7</span><br><span class="line">输出: [[7],[2,2,3]]</span><br></pre></td></tr></table></figure>

<h1 id="解：回溯搜索"><a href="#解：回溯搜索" class="headerlink" title="解：回溯搜索"></a>解：回溯搜索</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><a href="https://leetcode-cn.com/problems/combination-sum/solution/shou-hua-tu-jie-zu-he-zong-he-combination-sum-by-x/">参考</a><br>将搜索的过程用树表达<br>以输入：candidates &#x3D; [2, 3, 6], target &#x3D; 8 为例：<br><img src="https://pic.leetcode-cn.com/1599606793-laurLe-image.png"></p>
<p>以target为根节点，candidates里的数为叶子</p>
<ul>
<li>▲：如果当前叶子到根节点求和&gt;target，停止</li>
<li>o：如果当前叶子到根节点求和&#x3D;target，加入解集</li>
<li>x：如果产生重复 剪枝</li>
</ul>
<p>用递归实现以上逻辑</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> combinationSum = (candidates, target)&#123;</span><br><span class="line">    <span class="keyword">const</span> group = [];</span><br><span class="line">    <span class="keyword">const</span> dfs = <span class="function">(<span class="params">start, temp, sum</span>) =&gt;</span> &#123; </span><br><span class="line">        <span class="comment">// start是当前选择的起点索引 </span></span><br><span class="line">        <span class="comment">// temp是当前的集合 </span></span><br><span class="line">        <span class="comment">// sum是当前求和</span></span><br><span class="line">        <span class="keyword">if</span> (sum &gt;= target) &#123;</span><br><span class="line">            <span class="comment">//如果大于，直接结束递归</span></span><br><span class="line">            <span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">                <span class="comment">//如果相等，将temp的拷贝加入解集</span></span><br><span class="line">                group.push(temp.slice());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;   <span class="comment">// 结束当前递归</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt; candidates.length; i++) &#123; </span><br><span class="line">            <span class="comment">// 枚举当前可选的数，从start开始</span></span><br><span class="line">            temp.push(candidates[i]);</span><br><span class="line">            <span class="comment">// 选这个数</span></span><br><span class="line">            dfs(i, temp, sum + candidates[i]); </span><br><span class="line">            <span class="comment">// 基于此继续选择，传i，下一次就不会选到i左边的数，达到剪枝的作用</span></span><br><span class="line">            temp.pop();   </span><br><span class="line">            <span class="comment">// 撤销选择，回到选择candidates[i]之前的状态，继续尝试选同层右边的数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    dfs(<span class="number">0</span>, [], <span class="number">0</span>); </span><br><span class="line">    <span class="comment">// 最开始可选的数是从第0项开始的，传入一个空集合，sum也为0</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>leetcode</category>
        <category>数组</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>数组</tag>
        <tag>回溯</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode 数组总结</title>
    <url>/2021/07/23/leetcode/leetcodeSum1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span>
<h1 id="数组常用方法"><a href="#数组常用方法" class="headerlink" title="数组常用方法"></a>数组常用方法</h1><h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建空数组</span></span><br><span class="line"><span class="keyword">const</span> arr=[];</span><br><span class="line"><span class="keyword">const</span> arr=<span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建长度为l的全0数组</span></span><br><span class="line"><span class="keyword">const</span> arr=<span class="keyword">new</span> <span class="built_in">Array</span>(l).fill(<span class="number">0</span>); </span><br></pre></td></tr></table></figure>

<h2 id="增删查改"><a href="#增删查改" class="headerlink" title="增删查改"></a>增删查改</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.push(item,item,...)     <span class="comment">//在数组末尾加</span></span><br><span class="line">arr.unshift(item,item,...) <span class="comment">//在数组开头加</span></span><br><span class="line"></span><br><span class="line">arr.pop()   <span class="comment">//删除最后一个元素</span></span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>leetcode</category>
        <category>数组</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>数组</tag>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS笔记1：两栏布局和三栏布局</title>
    <url>/2022/04/19/CSS/css1_columns/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>面经手写常考经典布局</p>
<ul>
<li>两栏布局：左定宽，右自适应</li>
<li>三栏布局：左右定宽，中间自适应<ul>
<li>双飞翼布局：float + margin-left + margin</li>
<li>圣杯布局：float + margin-left + padding + position</li>
</ul>
</li>
</ul>
<span id="more"></span>

<p>一般来说flex是最优解决方案</p>
<h1 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h1><h2 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h2><p>Block Formatting Context,块级格式化上下文</p>
<p><strong>是什么</strong></p>
<ul>
<li>文档流分为普通流，定位流（position），浮动流（float）相互间会有影响。</li>
<li>BFC就是一个被隔离的区间（内部<strong>子元素</strong>不会对外面的元素产生影响）</li>
</ul>
<p><strong>触发条件</strong></p>
<ul>
<li>body(BFC元素)</li>
<li>float: left|right (<strong>非none</strong>)</li>
<li>overflow: hidden | scroll | auto (<strong>非visible</strong>)</li>
<li>display: inline-block | table-cell |table-caption | flex | grid (<strong>非block非none</strong>)</li>
<li>position: absolute | fiexed (<strong>非relative</strong>)</li>
</ul>
<h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><p>float属性用于创建浮动框，将其移动到一边，直到左边缘或右边缘触及包含块或另一个浮动框的边缘。</p>
<p><strong>浮动特性</strong></p>
<ul>
<li>脱离标准流的控制（脱标），移动到指定位置。</li>
<li>浮动的盒子不再保留原先的位置。</li>
<li>如果多个盒子都设置了浮动，则他们会按照属性值一行内显示并且顶端对齐排列。浮动的元素是互相贴靠在一起 的（没有缝隙），如果父级宽度装不下这些浮动的盒子，多出的盒子会另起一行对齐。</li>
<li>任何元素都能添加浮动特性，浮动元素会具有行内块元素特性。行内元素给了float属性后可以直接指定宽高。</li>
<li>一个元素是浮动的通常兄弟元素也应该浮动：浮动的盒子只会<strong>影响浮动盒子后面的标准流</strong>，<strong>不会影响前面的标准流。</strong></li>
</ul>
<p><strong>清除浮动的方式</strong></p>
<ul>
<li><p>额外标签法（隔墙法）：在浮动元素后添加一个空标签</p>
<ul>
<li>新增元素必须是块级元素，如：<code>&lt;/br&gt;</code>，<code>&lt;div style=&quot;clear:both&quot;&gt;&lt;/div&gt;</code></li>
</ul>
</li>
<li><p>将父级元素声明为BFC，例如：</p>
<ul>
<li><code>overflow: hidden|auto|scroll</code></li>
</ul>
</li>
<li><p>父级添加<code>:after</code>伪元素</p>
<ul>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/clear"><code>clear</code></a>指定一个元素是否必须移动(清除浮动后)到在它之前的浮动元素<strong>下面</strong></p>
<ul>
<li><code>clear: left</code>表示移到前面<code>float: left</code>的元素的下面，<code>right</code>同理，<code>both</code>表示移到所有左浮动和右浮动元素的下面</li>
</ul>
</li>
<li><p><code>:after</code>伪元素，作为已选中元素的最后一个子元素必，</p>
<ul>
<li>必须要有content，不然伪元素效果不存在</li>
<li>CSS3新标准中伪元素用双冒号<code>::after</code>，但仍然支持CSS2的单冒号写法，IE8只支持单冒号</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span>:after&#123;</span><br><span class="line">    content:<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>:block;</span><br><span class="line">    <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>父级添加双伪元素</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span>:before, .clearfix:after&#123;</span><br><span class="line">   content:<span class="string">&quot;&quot;</span>,</span><br><span class="line">   display:table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span>:after&#123;</span><br><span class="line">   clear:both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span>&#123;</span><br><span class="line">  *zoom:<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="两栏布局"><a href="#两栏布局" class="headerlink" title="两栏布局"></a>两栏布局</h1><h2 id="左边定宽，右边自适应"><a href="#左边定宽，右边自适应" class="headerlink" title="左边定宽，右边自适应"></a>左边定宽，右边自适应</h2><p><strong>html</strong></p>
<p>父元素包裹两个子元素，下面添加一个元素检验影响</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>其他，检测影响<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>css</strong></p>
<p>设置父元素宽度撑满，子元素背景色和高度</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: aqua;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: bisque;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="float"><a href="#float" class="headerlink" title="float"></a>float</h3><p>左定宽浮动，右、父清除浮动</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="comment">/* margin-left: 200px */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>理解：</strong></p>
<p>左元素浮动，定宽（width: 200px）</p>
<p>右元素需要隔离浮动元素</p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/noteImg/css/layout/image-20220419164416349.png" alt="image-20220419164416349"></p>
<ul>
<li>可以设置bfc（overflow: hidden）</li>
<li>也可以设置margin-left为左边元素的宽度（margin-left: 200px）</li>
</ul>
<p>父元素清除浮动</p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/noteImg/css/layout/image-20220419165029813.png" alt="image-20220419165029813"></p>
<ul>
<li>BFC（overflow: hidden）</li>
<li>clearfix（::after伪元素）</li>
</ul>
<h3 id="position"><a href="#position" class="headerlink" title="position"></a>position</h3><p>父相对，左定宽，右绝对</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>理解</strong>：</p>
<p>父元素：position: relative</p>
<ul>
<li>因为absolute定位的基准是祖先元素中第一个非static元素，这里需要为右元素提供基准</li>
</ul>
<p>右元素：position: absolute</p>
<ul>
<li>left: 200px，左偏移为左元素的宽度</li>
<li>top: 0，上偏移0，和左元素对齐</li>
<li>right: 0，右偏移0，自适应撑满</li>
</ul>
<p><strong>问题</strong>：</p>
<p>子元素绝对定位，父元素相对定位时，也会产生高度塌陷，这个没办法解决，<a href="https://blog.csdn.net/qq_29923881/article/details/93377122">详见</a></p>
<h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: row;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="三栏布局"><a href="#三栏布局" class="headerlink" title="三栏布局"></a>三栏布局</h1><h2 id="顺序不定"><a href="#顺序不定" class="headerlink" title="顺序不定"></a>顺序不定</h2><p>左右定宽，中间自适应</p>
<p><strong>html</strong></p>
<p>左中右的定义顺序和布局方式有关</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;middle&quot;</span>&gt;</span>middle<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>check<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>css</strong></p>
<p>定义高度和颜色</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: bisque;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.middle</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: darkseagreen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="float-1"><a href="#float-1" class="headerlink" title="float"></a>float</h3><p>html的顺序：中在最后，因为元素只会收到之前的浮动元素影响</p>
<p>左右浮动定宽，中间设置margin为左右宽度，父清除浮动</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.middle</span>&#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="position-1"><a href="#position-1" class="headerlink" title="position"></a>position</h3><p>html的顺序：随意</p>
<p>父相对，左右绝对定宽，中间设置左右margin为左右宽度</p>
<p>依然存在高度塌陷问题，没办法，非要做只能在js中获取DOM元素高度赋给父元素</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.middle</span>&#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="flex-1"><a href="#flex-1" class="headerlink" title="flex"></a>flex</h3><p>html需要改下顺序：左中右</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;middle&quot;</span>&gt;</span>middle<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>check<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.middle</span>&#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="中间元素最先渲染"><a href="#中间元素最先渲染" class="headerlink" title="中间元素最先渲染"></a>中间元素最先渲染</h2><p>两侧内容宽度固定，中间内容宽度自适应，<strong>中间一栏最先加载</strong>，也就是html结构锁定如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;middle&quot;</span>&gt;</span>middle<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>check<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="float-2"><a href="#float-2" class="headerlink" title="float"></a>float</h3><p>参考：</p>
<ul>
<li><p>原理版<a href="https://blog.csdn.net/qq_38128179/article/details/86533976">https://blog.csdn.net/qq_38128179/article/details/86533976</a></p>
</li>
<li><p>图解版<a href="https://juejin.cn/post/6999803276971474980">https://juejin.cn/post/6999803276971474980</a></p>
</li>
</ul>
<p>圣杯和双飞翼布局都是通过 float + margin-left 实现，区别在于中间区域两边留白的处理</p>
<p><strong>首先看共通的部分</strong>：</p>
<ul>
<li>中间元素宽度100%，达到自适应撑满一行的效果</li>
<li>左右元素定宽，这里假设都是100px</li>
<li>三个元素都浮动 float: left<ul>
<li>因为是float，所以所有元素都在同一行，而中间元素撑满，所以效果上就是中间占一行，左右在下一行</li>
<li><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/noteImg/css/layout/image-20220419205116379.png" alt="image-20220419205116379"></li>
<li>将margin-left设为负值可以让元素左移，因为所有元素在同一行，所以左移后会移到到上一行<ul>
<li>左元素：margin-left: -100**%**，就是移动一个父容器宽度</li>
<li><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/noteImg/css/layout/image-20220419205607814.png" alt="image-20220419205607814"></li>
<li>右元素：margin-left: -100<strong>px</strong>，就是移动一个它自己的宽度</li>
<li><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/noteImg/css/layout/image-20220419205641904.png" alt="image-20220419205641904"></li>
</ul>
</li>
</ul>
</li>
</ul>
<p>以上实现可以得到一个撑满整个页面的中间元素，和两个吸附在左右的元素</p>
<p>但是还没有达到需求，我们需要设置中间元素左右两边留白，不然会被左右元素遮挡</p>
<p><strong>不同点，留白</strong>：</p>
<ul>
<li>双飞翼：中间元素额外添加子节点<ul>
<li>在中间元素的新增节点设置左右margin为两边留白</li>
</ul>
</li>
<li>圣杯：为左右元素额外设置relative相对定位<ul>
<li>在父元素中设置padding为两边留白</li>
<li>左右元素需要额外设置relative偏移到正确位置</li>
</ul>
</li>
</ul>
<h4 id="双飞翼"><a href="#双飞翼" class="headerlink" title="双飞翼"></a>双飞翼</h4><p>中间元素添加一个子节点，在新增节点设置左右margin为两边留白，要加载的内容也放在这个子节点里</p>
<p>html修改为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;middle&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span>middle<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span>      </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="comment">/* 清除浮动 */</span></span><br><span class="line">    <span class="attribute">overflow</span>: hidden; </span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &gt; <span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="comment">/* 全部设置float, relative */</span></span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.middle</span>&#123;</span><br><span class="line">    <span class="comment">/* 宽度自适应撑满 */</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.inner</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">    <span class="comment">/* 设置margin */</span></span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: bisque;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="comment">/* 上移一行 */</span></span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: darkcyan;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="comment">/* 上移一行 */</span></span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="圣杯"><a href="#圣杯" class="headerlink" title="圣杯"></a>圣杯</h4><p>不像双飞翼额外在中间元素里加了子元素，圣杯保持原来的三个节点</p>
<p>思路是在父元素设置padding留白，子元素额外设置position进行偏移</p>
<blockquote>
<p><strong>position和float的兼容性</strong>：</p>
<p>元素同时应用了position: relative、float、（top &#x2F; left &#x2F; bottom &#x2F; right）属性后</p>
<p>则元素先浮动到相应的位置，然后再根据（top &#x2F; left &#x2F; bottom &#x2F; right）所设置的距离来发生偏移</p>
</blockquote>
<p>添加padding后，不加margin-left的效果</p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/noteImg/css/layout/image-20220419210317552.png" alt="image-20220419210317552"></p>
<p>加上margin-left的效果</p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/noteImg/css/layout/image-20220419210548963.png" alt="image-20220419210548963"></p>
<p>由于padding，left需要左移，right需要右移，那么加上position: relative就可以，加上的效果</p>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/noteImg/css/layout/image-20220419211056835.png" alt="image-20220419211056835"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="comment">/* 清除浮动 */</span></span><br><span class="line">    <span class="attribute">overflow</span>: hidden; </span><br><span class="line">    <span class="comment">/* 两边留白 */</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &gt; <span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="comment">/* 全部设置float, relative */</span></span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.middle</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">    <span class="comment">/* 宽度自适应撑满 */</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: bisque;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="comment">/* 上移一行 */</span></span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">    <span class="comment">/* 左移 */</span></span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: darkcyan;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="comment">/* 上移一行 */</span></span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">100px</span>;</span><br><span class="line">    <span class="comment">/* 右移 */</span></span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">right</span>: -<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="flex-2"><a href="#flex-2" class="headerlink" title="flex"></a>flex</h3><p>flex也可以，但是要优先加载中间节点需要改一下顺序</p>
<ul>
<li><p>html中的顺序：中左右</p>
</li>
<li><p>页面中期望的顺序：左中右</p>
</li>
<li><p>那么把左提前即可</p>
<ul>
<li>flex子元素的属性：order，可以设为任意数值，越小排越左</li>
</ul>
</li>
<li><ul>
<li></li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &gt; <span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.middle</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: aquamarine;  </span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: bisque;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;  </span><br><span class="line">    <span class="attribute">order</span>: -<span class="number">1</span>;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: darkcyan;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>CSS笔记</category>
        <category>布局</category>
      </categories>
      <tags>
        <tag>面经</tag>
        <tag>CSS</tag>
        <tag>float</tag>
        <tag>position</tag>
      </tags>
  </entry>
  <entry>
    <title>React实战：返回顶部</title>
    <url>/2022/04/23/exercise/BackTpTop/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>实现返回顶部效果</strong>：</p>
<ul>
<li>滚动一定高度后从下到上平移出现</li>
<li>点击后自动滚动到顶部</li>
<li>滚动到顶部以后从上到下平移消失</li>
</ul>
<p><img src="https://luryblog.oss-cn-beijing.aliyuncs.com/noteImg/exercise/image-20220423183411202.png" alt="image-20220423183411202"></p>
<span id="more"></span>

<h1 id="实现逻辑"><a href="#实现逻辑" class="headerlink" title="实现逻辑"></a>实现逻辑</h1><ul>
<li>监听滚动，发现滚动距离大于阈值（目前设为视窗高度），则显示按钮，否则隐藏<ul>
<li>判断条件：<code>document.documentElement.scrollTop&gt;document.documentElement.clientHeight</code></li>
<li>useState：用一个布尔值isVisible来表示当前元素显示或隐藏</li>
</ul>
</li>
<li>控制按钮显示，监听isVisible，有两种方法<ul>
<li>没有动画效果：返回的虚拟DOM里内联地写 <code>style=&#123;&#123;display: isVisible? "block":"none"&#125;&#125;</code></li>
<li>有平移效果：<code>ref.current.style.bottom=`$&#123;bottomBias+20&#125;px` </code> 搭配 <code>transition: bottom 1s;</code></li>
</ul>
</li>
<li>点击按钮，回到顶部<ul>
<li><code>document.body.scrollTop = document.documentElement.scrollTop = 0;</code></li>
</ul>
</li>
</ul>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="api"><a href="#api" class="headerlink" title="api"></a>api</h2><ul>
<li>bottomBias：距离底部的额外距离，适用于底部有导航栏的页面（导航栏高度是50），没有导航栏可以不传</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;BackToTop bottomBias=&#123;<span class="number">50</span>&#125;&gt;&lt;/BackToTop&gt;</span><br></pre></td></tr></table></figure>

<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><h4 id="index-jsx"><a href="#index-jsx" class="headerlink" title="index.jsx"></a>index.jsx</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useEffect, useRef, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;jsThrottle&#125; <span class="keyword">from</span> <span class="string">&quot;../../utils/throttle&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.less&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> BackToTop=<span class="function">(<span class="params">&#123;bottomBias=<span class="number">0</span>&#125;</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> [isVisible, setIsVisible]=useState(<span class="literal">false</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> ref=useRef()</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">onClickHandle</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.body.scrollTop = <span class="built_in">document</span>.documentElement.scrollTop = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 挂载：绑定滚动</span></span><br><span class="line">    useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> timer=<span class="literal">null</span></span><br><span class="line">        <span class="keyword">const</span> scrollHandle=<span class="function">()=&gt;</span>&#123;       </span><br><span class="line">            <span class="comment">// console.log(document.documentElement.scrollTop)</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">document</span>.documentElement.scrollTop&gt;<span class="built_in">document</span>.documentElement.clientHeight)&#123;</span><br><span class="line">                <span class="comment">// show</span></span><br><span class="line">                setIsVisible(<span class="literal">true</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// hide</span></span><br><span class="line">                setIsVisible(<span class="literal">false</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">		<span class="comment">// 节流</span></span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">&quot;scroll&quot;</span>, jsThrottle(scrollHandle, <span class="number">1000</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;clear&quot;</span>);</span><br><span class="line">            <span class="built_in">window</span>.removeEventListener(<span class="string">&quot;scroll&quot;</span>, scrollHandle)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,[])</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听isVisible，改变按钮的bottom</span></span><br><span class="line">    useEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isVisible)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;show&quot;</span>)</span><br><span class="line">            ref.current.style.bottom=<span class="string">`<span class="subst">$&#123;bottomBias+<span class="number">20</span>&#125;</span>px`</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;hide&quot;</span>)</span><br><span class="line">            ref.current.style.bottom=<span class="string">`-40px`</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,[isVisible])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="comment">// &lt;div</span></span><br><span class="line">        <span class="comment">//     onClick=&#123;onClickHandle&#125;</span></span><br><span class="line">        <span class="comment">//     className=&quot;back2top-container&quot; style=&#123;&#123;bottom: `$&#123;20+bottomBias&#125;px`, display: isVisible? &quot;block&quot;:&quot;none&quot;&#125;&#125;&gt;</span></span><br><span class="line">        <span class="comment">//     &lt;i className=&quot;iconfont icon-arrowup&quot;&gt;&lt;/i&gt;</span></span><br><span class="line">        <span class="comment">// &lt;/div&gt;</span></span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">onClick</span>=<span class="string">&#123;onClickHandle&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            <span class="attr">className</span>=<span class="string">&quot;back2top-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">className</span>=<span class="string">&quot;iconfont icon-arrowup&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> BackToTop</span><br></pre></td></tr></table></figure>

<h4 id="throttle"><a href="#throttle" class="headerlink" title="throttle"></a>throttle</h4><p>带强制执行的节流</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">jsThrottle</span>(<span class="params">fn, delay=<span class="number">300</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer=<span class="literal">null</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fnThrottle</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// console.log(timer)</span></span><br><span class="line">        <span class="keyword">if</span> (!timer)&#123;</span><br><span class="line">            timer=<span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                <span class="comment">// console.log(&quot;throttle fn&quot;)</span></span><br><span class="line">                fn(...args)</span><br><span class="line">                timer=<span class="literal">null</span></span><br><span class="line">            &#125;,delay)</span><br><span class="line">            </span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fnThrottle</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><h4 id="style-less"><a href="#style-less" class="headerlink" title="style.less"></a>style.less</h4><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.back2top-container</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: -<span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: rgba(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.9</span>);</span><br><span class="line">    <span class="comment">// 实现平移效果</span></span><br><span class="line">    <span class="attribute">transition</span>: bottom <span class="number">1s</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">i</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>: blueviolet;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="iconfont"><a href="#iconfont" class="headerlink" title="iconfont"></a>iconfont</h4><p>需要额外下载一个上箭头的icon，不用icon直接用文字也行<br>这里使用 <a href="https://www.iconfont.cn/?spm=a313x.7781069.1998910419.d4d0a486a">iconfont图标库</a></p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>React实战</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>实战</tag>
      </tags>
  </entry>
  <entry>
    <title>面经整理2：大厂智力题</title>
    <url>/2022/04/23/interview/interview2_IQ/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>重点掌握：</p>
<ul>
<li>必看：水杯分水、割金条、烧绳子</li>
<li>理解思路：概率、组合、锦标赛、毒药消耗</li>
<li>其他困难：海盗分钱、秘书问题、二人博弈等</li>
</ul>
<span id="more"></span>

<p>参考：</p>
<p><a href="https://www.nowcoder.com/discuss/428774">字节跳动算法题+智力题+场景题100题</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/395132338">字节最爱问的智力题，你会几道？</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/397235208">字节最爱问的智力题，你会几道？（二）</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/425152611">字节最爱问的智力题，你会几道？（三）</a></p>
<h1 id="简单"><a href="#简单" class="headerlink" title="简单"></a>简单</h1><h2 id="3-个饼，一个灶能同时放-2-张饼，煎熟半面需要-10-分钟，如何使得最快速度将-3-个饼都煎熟"><a href="#3-个饼，一个灶能同时放-2-张饼，煎熟半面需要-10-分钟，如何使得最快速度将-3-个饼都煎熟" class="headerlink" title="3 个饼，一个灶能同时放 2 张饼，煎熟半面需要 10 分钟，如何使得最快速度将 3 个饼都煎熟"></a>3 个饼，一个灶能同时放 2 张饼，煎熟半面需要 10 分钟，如何使得最快速度将 3 个饼都煎熟</h2><p>30分钟</p>
<p>三个饼，每10分钟煎两个半面的，12，13，23</p>
<h2 id="一个人8块钱买了一只鸡，9块钱卖了，10块钱又买回来了，11块钱又卖了，请问他挣了多少钱？"><a href="#一个人8块钱买了一只鸡，9块钱卖了，10块钱又买回来了，11块钱又卖了，请问他挣了多少钱？" class="headerlink" title="一个人8块钱买了一只鸡，9块钱卖了，10块钱又买回来了，11块钱又卖了，请问他挣了多少钱？"></a>一个人8块钱买了一只鸡，9块钱卖了，10块钱又买回来了，11块钱又卖了，请问他挣了多少钱？</h2><p>2块钱</p>
<h1 id="水杯分水"><a href="#水杯分水" class="headerlink" title="水杯分水"></a>水杯分水</h1><h2 id="只有两个无刻度的水桶，一个可以装6L水，一个可以装5L水，如何在桶里装入3L的水"><a href="#只有两个无刻度的水桶，一个可以装6L水，一个可以装5L水，如何在桶里装入3L的水" class="headerlink" title="只有两个无刻度的水桶，一个可以装6L水，一个可以装5L水，如何在桶里装入3L的水"></a>只有两个无刻度的水桶，一个可以装6L水，一个可以装5L水，如何在桶里装入3L的水</h2><blockquote>
<p>提示：这个问题的本质就是利用两个水桶的已知容量倒来倒去，问题的解法并不唯一。</p>
</blockquote>
<ol>
<li>先将5L的桶装满，将5L的桶的水倒入6L的桶中。这时5L的桶是空的，6L的桶中有5L的水</li>
<li>再将5L的桶装满，倒入6L的桶中。这时5L的桶有4L的水，6L的桶是满的</li>
<li>将6L的桶中的水倒掉，5L的桶的水倒入6L的桶中。这时5L的桶是空的，6L的桶中有4L的水</li>
<li>将5L的桶装满，倒入6L的桶中。这时<strong>5L的桶还有3L的水</strong>，6L的桶是满的。</li>
</ol>
<h2 id="有三个酒杯，其中两个大酒杯每个可以装8两酒，一个可以装3两酒。现在两个大酒杯都装满了酒，只用这三个杯子怎么把酒平均的分给4个人喝？"><a href="#有三个酒杯，其中两个大酒杯每个可以装8两酒，一个可以装3两酒。现在两个大酒杯都装满了酒，只用这三个杯子怎么把酒平均的分给4个人喝？" class="headerlink" title="有三个酒杯，其中两个大酒杯每个可以装8两酒，一个可以装3两酒。现在两个大酒杯都装满了酒，只用这三个杯子怎么把酒平均的分给4个人喝？"></a>有三个酒杯，其中两个大酒杯每个可以装8两酒，一个可以装3两酒。现在两个大酒杯都装满了酒，只用这三个杯子怎么把酒平均的分给4个人喝？</h2><blockquote>
<p>这个问题就是用杯子倒来倒去，一共16两酒分给四个人，最后每个人都喝四两酒即可</p>
</blockquote>
<p>用三个数字表示三个杯子，最开始为880，即两个8两的杯子是满的，一个3两的杯子是空的。</p>
<ol>
<li>880—&gt;853，这时A喝掉第三个杯子的三两酒变成850</li>
<li>850—&gt;823，这时B喝掉第二个杯子的二两变酒成803</li>
<li>803—&gt;830—&gt;533—&gt;560—&gt;263—&gt;281，A喝掉第三个杯子的一两酒变成280（A喝完了4两）</li>
<li>280—&gt;253—&gt;550—&gt;523—&gt;820—&gt;703—&gt;730—&gt;433—&gt;460—&gt;163—&gt;181，这时C和D各喝一两酒变成080</li>
<li>080—&gt;053—&gt;350—&gt;323，这时B喝点第二个杯子的二两酒，C和D各喝三两酒，到此所有人都喝了四两酒</li>
</ol>
<h1 id="割金条"><a href="#割金条" class="headerlink" title="割金条"></a>割金条</h1><h2 id="你现在有一根金条，有一个工人为你工作了七天，他们的工资是金条的七分之一，并且需要当天结清，你只能对金条切割两次，请问需要怎么做。"><a href="#你现在有一根金条，有一个工人为你工作了七天，他们的工资是金条的七分之一，并且需要当天结清，你只能对金条切割两次，请问需要怎么做。" class="headerlink" title="你现在有一根金条，有一个工人为你工作了七天，他们的工资是金条的七分之一，并且需要当天结清，你只能对金条切割两次，请问需要怎么做。"></a>你现在有一根金条，有一个工人为你工作了七天，他们的工资是金条的七分之一，并且需要当天结清，你只能对金条切割两次，请问需要怎么做。</h2><blockquote>
<p>这个问题和平时用的纸币金额是一个道理，将一根金条切割两次可以得到三根金条，这三根金条必须可以组合出1-7之间的任意金额。</p>
</blockquote>
<p>将金条分两次切成长度为1、2、4的金条即可。</p>
<ol>
<li>第一天，将长度为1的金条支付给工人。</li>
<li>第二天，将长度为2的金条支付给工人，工人将长度为1的金条还给你。</li>
<li>第三天，将长度为1的金条支付给工人</li>
<li>第四天，将长度为4的金条支付给工人，工人将长度为1，2的金条还给你</li>
<li>第五条，将长度为1的金条支付给工人</li>
<li>第六条，将长度为2的金条支付给工人，工人将长度为1的金条还给你</li>
<li>第七天，将长度为1的金条支付给工人</li>
</ol>
<h1 id="烧绳子-x2F-蜡烛"><a href="#烧绳子-x2F-蜡烛" class="headerlink" title="烧绳子&#x2F;蜡烛"></a>烧绳子&#x2F;蜡烛</h1><h2 id="烧一根不均匀的绳，从头烧到尾总共需要1个小时。现在有若干条材质相同的绳子，问如何用烧绳的方法来计时一个小时十五分钟呢"><a href="#烧一根不均匀的绳，从头烧到尾总共需要1个小时。现在有若干条材质相同的绳子，问如何用烧绳的方法来计时一个小时十五分钟呢" class="headerlink" title="烧一根不均匀的绳，从头烧到尾总共需要1个小时。现在有若干条材质相同的绳子，问如何用烧绳的方法来计时一个小时十五分钟呢?"></a>烧一根不均匀的绳，从头烧到尾总共需要1个小时。现在有若干条材质相同的绳子，问如何用烧绳的方法来计时一个小时十五分钟呢?</h2><blockquote>
<p>这个问题的关键就是要知道绳子可以从两头烧</p>
</blockquote>
<ol>
<li>将绳子１从一段开始烧，同时将绳子２从两端烧，绳子２在半小时后烧完。（30分钟）</li>
<li>将绳子１的另一端点燃，从计时开始绳子１烧完后是15分钟（15分钟）</li>
<li>然后点燃绳子3的两头，绳子3烧完需要半小时。（30分钟）</li>
</ol>
<h2 id="计时15分钟"><a href="#计时15分钟" class="headerlink" title="计时15分钟"></a>计时15分钟</h2><ol>
<li>将绳子１从一段开始烧，同时将绳子２从两端烧，绳子２在半小时后烧完。</li>
<li>这时开始计时，将绳子１的另一端点燃，从计时开始绳子１烧完后是15分钟，然后点燃绳子3的一端，绳子3烧完需要一个小时。加上刚才的15分钟正好是1小时15分钟</li>
</ol>
<h1 id="找不一样的-x2F-变质的"><a href="#找不一样的-x2F-变质的" class="headerlink" title="找不一样的&#x2F;变质的"></a>找不一样的&#x2F;变质的</h1><h2 id="一共12个一样的小球，-其中只有一个重量与其它不一样-未知轻重-，给你一个天平，找出那个不同重量的球？"><a href="#一共12个一样的小球，-其中只有一个重量与其它不一样-未知轻重-，给你一个天平，找出那个不同重量的球？" class="headerlink" title="一共12个一样的小球， 其中只有一个重量与其它不一样(未知轻重)，给你一个天平，找出那个不同重量的球？"></a>一共12个一样的小球， 其中只有一个重量与其它不一样(未知轻重)，给你一个天平，找出那个不同重量的球？</h2><blockquote>
<p>这个问题的思想是采用分治的思想。</p>
</blockquote>
<ol>
<li>将12个小球分为三组（因为分成两组不能找到重量不一样的球在哪组），为A组、B组、C组</li>
<li>将三组球分别两两称重，找到重量和另外两组不同的那一组（只要有两组可以使天平平衡，重量不一致的球必然在第三组）。假设坏的球在C组</li>
<li>将C组的球分成两组C1和C2，每组两个球，这时从A组和B组里找到两个正常的球，分别和C1和C2去称，天平不能平衡说明重量不一致的球就在哪组。假设在C1</li>
<li>将C1组的球分别和正常的球去称，天平不平衡时就能找到重量与其他不一致的球。</li>
</ol>
<h2 id="有10瓶药，每瓶有10粒药，其中有一瓶是变质的。好药每颗重1克，变质的药每颗比好药重0-1克。问怎样用天秤称一次找出变质的那瓶药？"><a href="#有10瓶药，每瓶有10粒药，其中有一瓶是变质的。好药每颗重1克，变质的药每颗比好药重0-1克。问怎样用天秤称一次找出变质的那瓶药？" class="headerlink" title="有10瓶药，每瓶有10粒药，其中有一瓶是变质的。好药每颗重1克，变质的药每颗比好药重0.1克。问怎样用天秤称一次找出变质的那瓶药？"></a>有10瓶药，每瓶有10粒药，其中有一瓶是变质的。好药每颗重1克，变质的药每颗比好药重0.1克。问怎样用天秤称一次找出变质的那瓶药？</h2><ol>
<li>将这10瓶药标好号1-10。</li>
<li>然后按照瓶子的标号取药，1号药瓶取1粒药，2号药瓶取2粒药，3号药瓶取3例药，以此类推，取完10瓶药一起放到天平上去称。如果没有变质的药，重量应该是55克，这时多出几克，几号药瓶就是变质的。例如55.3克，那么变质的药就是3号药瓶的。</li>
</ol>
<h1 id="赛马"><a href="#赛马" class="headerlink" title="赛马"></a>赛马</h1><h2 id="25匹马，5个赛道，每次只能同时有5匹马跑，最少比赛几次选出前三的马？"><a href="#25匹马，5个赛道，每次只能同时有5匹马跑，最少比赛几次选出前三的马？" class="headerlink" title="25匹马，5个赛道，每次只能同时有5匹马跑，最少比赛几次选出前三的马？"></a>25匹马，5个赛道，每次只能同时有5匹马跑，最少比赛几次选出前三的马？</h2><blockquote>
<p>这个题目字节经常问，大概思想就是先分5组跑，跑出每组第一名，将每组第一名放到一起跑，找出25马的第一名，然后找出2、3名，一共需要7次</p>
</blockquote>
<p>前五次：将25匹马放到5个赛道比赛，找出每个赛道的第一名。假设A1、B1、C1、D1、E1分别为每组的第一名，如下图。</p>
<p><img src="https://pic2.zhimg.com/80/v2-0c8c580817a9552d44b979d3a7004391_720w.jpg" alt="img"></p>
<p>第六次：将A1、B1、C1、D1、E1放到一个赛道上找出第一名，假设为A1，其他四名分别为B1、C1、D1、E1。这时第一名已经找到了，还需找到二、三名：候选人有</p>
<ul>
<li>B1、C1肯定有，D1、E1淘汰</li>
<li>A2、A3，因为不知道B1是不是比他们快</li>
<li>B2，同理，因为不知道C1是不是比他快</li>
</ul>
<p>有机会成为二、三名的马为A2、A3、B1、B2、C1这五匹马，即前五名在这个区域，并且第一名为A1。如下图</p>
<p><img src="https://pic4.zhimg.com/80/v2-ae30efa94d1f3e654a97735ee6701c97_720w.jpg" alt="img"></p>
<p>第七次：将A2、A3、B1、B2、C1放到一个赛道找出前两名，再加上A1，这就找到前三名了。</p>
<blockquote>
<p>延申：如果要找到前五名呢？</p>
</blockquote>
<h2 id="64匹马，8个跑道，选跑最快的4匹马需要比赛多少次。"><a href="#64匹马，8个跑道，选跑最快的4匹马需要比赛多少次。" class="headerlink" title="64匹马，8个跑道，选跑最快的4匹马需要比赛多少次。"></a>64匹马，8个跑道，选跑最快的4匹马需要比赛多少次。</h2><p>​      (     锦标赛<a href="">排序</a><a href="">算法</a>     )      sum &#x3D; 11     </p>
<p>​      第一步：首先每8匹马跑一次，总共需要8次，假设结果中A1&gt;A2&gt;A3&gt;……,B1&gt;B2&gt;B3&gt;….等。 sum&#x3D;8；     </p>
<p>​      第二步：这8组中的第一名拉出来跑一次，那么这次最快的是总的第一名，假设是A1，同时假设B1&gt;C1&gt;D1。这时还要角逐2,3,4名，     那这一轮中的第五到第八组都可以直接舍弃     ，因为他们所有的马一定进不了前4名。sum&#x3D;9。     </p>
<p>​      第三步：从A组中选A2，A3，A4，B组中B1，B2，B3，C组中C1，C2，D组中D1，这些才有资格角逐2,3,4名。这时需要再比赛两次。 sum&#x3D;11。（但是如果第10轮选择A4不上场，如果A3获得了第4名，那么A4就不需要比赛了，这样     sum&#x3D;10     ）。     </p>
<h1 id="二进制-log-2n"><a href="#二进制-log-2n" class="headerlink" title="二进制 $\log_2n$"></a>二进制 $\log_2n$</h1><h2 id="1000瓶药水里面只有1瓶是有毒的，毒发时间为24个小时，问需要多少只老鼠才能在24小时后试出那瓶有毒。"><a href="#1000瓶药水里面只有1瓶是有毒的，毒发时间为24个小时，问需要多少只老鼠才能在24小时后试出那瓶有毒。" class="headerlink" title="1000瓶药水里面只有1瓶是有毒的，毒发时间为24个小时，问需要多少只老鼠才能在24小时后试出那瓶有毒。"></a>1000瓶药水里面只有1瓶是有毒的，毒发时间为24个小时，问需要多少只老鼠才能在24小时后试出那瓶有毒。</h2><blockquote>
<p>这个问题不太容易想到可以先记住答案，需要老鼠的数量为&#x3D;&#x3D;$\log_2 1000$&#x3D;&#x3D; (转化为二进制)</p>
</blockquote>
<p>为了简化问题，可以先假设有只有8瓶药水，其中有一瓶有毒，根据公式需要 个老鼠</p>
<p>先将瓶子进行编号为0-7号，用位数表示老鼠，如下图，</p>
<p><img src="https://pic4.zhimg.com/80/v2-2404e89627a6c2a5f41b3108ade90ac7_720w.jpg" alt="img"></p>
<p>将4、5、6、7号药水混合到一起喂给老鼠1，将2，3，6，7号药水混合喂给老鼠2，将1、3、5、7药水混合喂给老鼠3，观察老鼠是否中毒。</p>
<p>中毒的老鼠标号为1，未中毒的老鼠标号为0，将三只老鼠标号组合到一起即为有毒药水的标号。</p>
<p>例如，第老鼠1中毒，老鼠2未中毒，老鼠3中毒。<strong>那么三只老鼠的二进制表示为101，即5号药水有毒。</strong>因为老鼠1中毒，说明4、5、6、7号药水中含有毒的药水。老鼠2未中毒，说明2、3、6、7无毒。老鼠3中毒，说明1、3、5、7中有一瓶有毒。所以有毒的为5号药水，其实和直接将二进制转化为十进制的结果是一样的。</p>
<p>回到正题，如果有1000瓶药水，则需要10只老鼠，因为10位二进制足以表示0-999。</p>
<h2 id="50名运动员按顺序排成一排，教练下令：“单数运动员出列！”剩下的运动员重新排列编号，教练又下令：“单数运动员出列！”如此下去，最后只剩下一个人，他是最开始的几号运动员？"><a href="#50名运动员按顺序排成一排，教练下令：“单数运动员出列！”剩下的运动员重新排列编号，教练又下令：“单数运动员出列！”如此下去，最后只剩下一个人，他是最开始的几号运动员？" class="headerlink" title="50名运动员按顺序排成一排，教练下令：“单数运动员出列！”剩下的运动员重新排列编号，教练又下令：“单数运动员出列！”如此下去，最后只剩下一个人，他是最开始的几号运动员？"></a>50名运动员按顺序排成一排，教练下令：“单数运动员出列！”剩下的运动员重新排列编号，教练又下令：“单数运动员出列！”如此下去，最后只剩下一个人，他是最开始的几号运动员？</h2><blockquote>
<p>这个问题不难，很容易就可以想到，先正着推，在逆着推就可以了</p>
</blockquote>
<p>正向思维：</p>
<ol>
<li>运动员编号为1-50，单号出列后为2，4，6，……，50</li>
<li>运动员重新编号为1-25，单号出列后为2，4，6，……,24</li>
<li>运动员重新编号为1-12，单号出列后为2，4，6，……，12</li>
<li>运动员重新编号为1-6，单号出列后为2，4，6</li>
<li>运动员重新编号为1-3，单号出列后为2</li>
</ol>
<p>反向思维：</p>
<ol>
<li>第五轮运动员的编号为2</li>
<li>第五轮编号为2的运动员在第四轮编号为4</li>
<li>第四轮编号为4的运动员在第三轮中编号为8</li>
<li>第三轮编号为8的运动员在第二轮中编号为16</li>
<li>第二轮编号为16的运动员在第一轮中编号为32</li>
</ol>
<p>所以，剩下的最后一名运动员在开始的编号为32</p>
<h1 id="概率"><a href="#概率" class="headerlink" title="概率"></a>概率</h1><h2 id="条件概率"><a href="#条件概率" class="headerlink" title="条件概率"></a>条件概率</h2><h3 id="家里有两个孩子，一个是女孩，另一个也是女孩的概率是多少？"><a href="#家里有两个孩子，一个是女孩，另一个也是女孩的概率是多少？" class="headerlink" title="家里有两个孩子，一个是女孩，另一个也是女孩的概率是多少？"></a>家里有两个孩子，一个是女孩，另一个也是女孩的概率是多少？</h3><blockquote>
<p>这是一个概率问题，答案是二分之一，看到这里脑瓜子嗡嗡的吧</p>
</blockquote>
<p>这个问题我也是看了B站的视频分析才搞明白咋回事，题目多少有些歧义，面试时说清楚就行了。</p>
<p>已知家里有两个孩子Ａ和Ｂ，<strong>其中一个是女孩</strong>，关键问题就在其中一个是女陔这句话上。</p>
<p>如果你理解为这个是指定了一个孩子为女孩，例如Ａ为女孩，那么Ｂ也是女孩的概率显然为二分之一。</p>
<p>如果你理解为Ａ或Ｂ有一个孩子是女孩，问另一个孩子也是女陔的概率，这就是三分之一了。因为两个孩子的性别只有男男、男女、女男、女女四种组合，男男被排除了，剩下三种组合均符合题意，所以是三分之一。</p>
<p>其实，题目本身应该是第二种理解的意思，告诉你了有一个是女孩并未明确说哪个是。但很多人看到题目就会先入为主，先指定了一个孩子为女孩，那另一个孩子为女孩的概率肯定是二分之一了，这是不正确的。</p>
<h3 id="54张扑克牌，平均分成3份，大小王在一份的概率"><a href="#54张扑克牌，平均分成3份，大小王在一份的概率" class="headerlink" title="54张扑克牌，平均分成3份，大小王在一份的概率"></a>54张扑克牌，平均分成3份，大小王在一份的概率</h3><p>​      首先大王一定会在某一份中，然后要计算这一份中还要包含小王的概率。去掉大王还剩53张牌，这一份还可以分17张牌，那么每次分到小王的概率是1&#x2F;53,所以总概率是17&#x2F;53。     </p>
<p>​      规范<a href="">算法</a>：     </p>
<p><img src="https://uploadfiles.nowcoder.com/images/20200518/66153173_1589803055420_16F6C01C102793BA75D2E74EDCF64397" alt="img"></p>
<h3 id="你有两个罐子，50个红色弹球，50个蓝色弹球，如何将这100个球放入到两个罐子，随机选出一个罐子取出的球为红球的概率最大？"><a href="#你有两个罐子，50个红色弹球，50个蓝色弹球，如何将这100个球放入到两个罐子，随机选出一个罐子取出的球为红球的概率最大？" class="headerlink" title="你有两个罐子，50个红色弹球，50个蓝色弹球，如何将这100个球放入到两个罐子，随机选出一个罐子取出的球为红球的概率最大？"></a>你有两个罐子，50个红色弹球，50个蓝色弹球，如何将这100个球放入到两个罐子，随机选出一个罐子取出的球为红球的概率最大？</h3><p>这个问题应该是这几道题中最简单的了，将一个红球放到一个罐子中，另一个罐子放49个红球和50个蓝球，这样随便选出一个罐子取出红球的概率是1&#x2F;2 * 1 + 1&#x2F;2 * 49 &#x2F;（49+50），接近0.75。</p>
<h2 id="抛硬币"><a href="#抛硬币" class="headerlink" title="抛硬币"></a>抛硬币</h2><h3 id="一硬币，一面向上概率0-7，一面0-3，如何公平？"><a href="#一硬币，一面向上概率0-7，一面0-3，如何公平？" class="headerlink" title="一硬币，一面向上概率0.7，一面0.3，如何公平？"></a>一硬币，一面向上概率0.7，一面0.3，如何公平？</h3><p>抛两次，     <strong>正反</strong>     A胜，     <strong>反正</strong>     B胜。      </p>
<h3 id="一枚正反概率不一样的硬币，如何当一枚正常的硬币来用（正反概率相同）？"><a href="#一枚正反概率不一样的硬币，如何当一枚正常的硬币来用（正反概率相同）？" class="headerlink" title="一枚正反概率不一样的硬币，如何当一枚正常的硬币来用（正反概率相同）？"></a>一枚正反概率不一样的硬币，如何当一枚正常的硬币来用（正反概率相同）？</h3><p>答案是连续抛两次即可，第一次为正面、第二次为反面和第一次为反面、第二次为正面得概率相同。</p>
<h3 id="两个人轮流抛硬币，先抛到正面的赢，问先抛的人赢的概率"><a href="#两个人轮流抛硬币，先抛到正面的赢，问先抛的人赢的概率" class="headerlink" title="两个人轮流抛硬币，先抛到正面的赢，问先抛的人赢的概率"></a>两个人轮流抛硬币，先抛到正面的赢，问先抛的人赢的概率</h3><p>2&#x2F;3     </p>
<p>每一轮     抛硬币，A先抛赢得概率是1&#x2F;2，B后抛赢得概率是（1&#x2F;2）*（1&#x2F;2）&#x3D; 1&#x2F;4。那么     每一轮A赢得概率都是B赢得概率的2倍     ，总概率为1,所以A赢的概率是2&#x2F;3。     </p>
<h1 id="坐标系类"><a href="#坐标系类" class="headerlink" title="坐标系类"></a>坐标系类</h1><h2 id="在地球什么地方能够，往南走1公里，然后往东走1公里，再往北走1公里能回到原点？"><a href="#在地球什么地方能够，往南走1公里，然后往东走1公里，再往北走1公里能回到原点？" class="headerlink" title="在地球什么地方能够，往南走1公里，然后往东走1公里，再往北走1公里能回到原点？"></a>在地球什么地方能够，往南走1公里，然后往东走1公里，再往北走1公里能回到原点？</h2><blockquote>
<p>这个问题的本质就是往北走一公里和往南走一公里正好抵消，往东走一公里要回到原点。一共是两个答案。</p>
</blockquote>
<p>我们只需要找到在哪里往东走一公里会回到原点呢？这样的点在地球上有无数个，主要集中在两个地方，即北极点附近和南极点附近。有一个周长为一公里的圆，圆心在北极点和南极点的连线上，只要站在这个圆上的任意一个点，向东或向西走一公里都会回到原点。如下图绿色的圆。</p>
<p><img src="https://pic4.zhimg.com/80/v2-db56a0f1b5c270b1cecc30cbb95beaa7_720w.jpg" alt="img"></p>
<p>所以这个点是距离南极1+1&#x2F;(2<em>pi)的点，假设这个点为A点，先向南走一公里到达B点，向东走一公里还是B点（相当于绕了一圈），再向北走一公里回到A点。这时是假设这个圆的圆心就是南极点，圆的半径就是1&#x2F;(2</em>pi)，因为地球非常大，这个圆的周长又只有一公里，这么假设是可以的。</p>
<p><img src="https://pic3.zhimg.com/80/v2-4ccec3df34565cced8432bca9aed0f5a_720w.jpg" alt="img"></p>
<p>这时又有人说了，这个B点所在的圆还可以小一点，即一公里是这个圆的周长的整数倍，这样也是可以的，向东走一公里相当于绕了很多圈还是回到了原点。</p>
<p>所以答案是<strong>距离南极点1+1&#x2F;(2*pi*k)的点</strong>，都是可以的，k为正整数。</p>
<p>还有一个答案就是<strong>北极点</strong>，很好理解，在北极点先向南走一公里，在向东走一公里，这时距离北极点还是一公里，在向被走一公里就回到北极点了。</p>
<h2 id="坐标系中有一个球桌，四个角坐标：-0-0-0-4-2-4-2-0-，一颗球在-1-1-，请问从哪些角度可以射入洞内（可无限次碰撞）？"><a href="#坐标系中有一个球桌，四个角坐标：-0-0-0-4-2-4-2-0-，一颗球在-1-1-，请问从哪些角度可以射入洞内（可无限次碰撞）？" class="headerlink" title="坐标系中有一个球桌，四个角坐标： (0,0), (0,4), (2,4), (2,0)，一颗球在(1,1)，请问从哪些角度可以射入洞内（可无限次碰撞）？"></a>坐标系中有一个球桌，四个角坐标： (0,0), (0,4), (2,4), (2,0)，一颗球在(1,1)，请问从哪些角度可以射入洞内（可无限次碰撞）？</h2><p>​      一般想法是将球镜像对称，但这道题是把洞镜像对称     </p>
<p>​      将这个桌面在这个平面无限延展，可类比成无限张球桌紧密放置     </p>
<p>​      那么<strong>每一个和球洞的连线都是合法路径</strong>     </p>
<h1 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h1><h2 id="连续正整数之和为1000-的共有几组"><a href="#连续正整数之和为1000-的共有几组" class="headerlink" title="连续正整数之和为1000 的共有几组?"></a>连续正整数之和为1000 的共有几组?</h2><blockquote>
<p>这是一道比较偏数学的题目</p>
</blockquote>
<p>假设开始的数为m，从m加到n等于1000，根据等差求和公式得，$\frac{(n+m)*(n-m+1)}{2}&#x3D;1000$</p>
<p>即2000为一个奇数和一个偶数（n+m和n-m+1必定一个是奇数一个是偶数）的乘积：</p>
<ul>
<li>那么可以对2000进行因式分解，分解成一个奇数和一个偶数</li>
<li>获得一组奇数和偶数后，解二元一次方程的解是唯一的</li>
</ul>
<p>$2000&#x3D;1 \times 2000&#x3D;5 \times 400&#x3D;25 \times 80&#x3D;125 \times 16$</p>
<p>综上，有四组。</p>
<h2 id="49个人中至少几个人生日是同一月？"><a href="#49个人中至少几个人生日是同一月？" class="headerlink" title="49个人中至少几个人生日是同一月？"></a>49个人中至少几个人生日是同一月？</h2><p>一年有12个月，那么49个人最后至少有49&#x2F;12+1&#x3D;5个人出生月份相同</p>
<h1 id="分牌"><a href="#分牌" class="headerlink" title="分牌"></a>分牌</h1><h2 id="一副牌除去大小王还有52张，其中10张牌是正面朝上的，要求一个盲人将牌分成两堆，并且每堆牌正面朝上的数量相同，可以任意翻动每张牌，应该怎么分"><a href="#一副牌除去大小王还有52张，其中10张牌是正面朝上的，要求一个盲人将牌分成两堆，并且每堆牌正面朝上的数量相同，可以任意翻动每张牌，应该怎么分" class="headerlink" title="一副牌除去大小王还有52张，其中10张牌是正面朝上的，要求一个盲人将牌分成两堆，并且每堆牌正面朝上的数量相同，可以任意翻动每张牌，应该怎么分"></a>一副牌除去大小王还有52张，其中10张牌是正面朝上的，要求一个盲人将牌分成两堆，并且每堆牌正面朝上的数量相同，可以任意翻动每张牌，应该怎么分</h2><p>这个问题不算复杂，看过一遍就能记住答案。分成两堆，一堆10张，一堆42张，并且将第一堆的10张牌全部反转，这时两堆牌中正面朝上的数量是相同的。</p>
<p>证明：</p>
<p>第一堆10张中x张朝上，第二堆10-x张朝上</p>
<p>第一堆反转，就有10-x张朝上</p>
<h1 id="秘书问题"><a href="#秘书问题" class="headerlink" title="秘书问题"></a>秘书问题</h1><h2 id="1楼到n楼的每层电梯门口都放着一颗钻石，钻石大小不一。你乘坐电梯从1楼到n楼，每层楼电梯门都会打开一次，只能拿一次钻石，问怎样才能拿到「最大」的一颗？"><a href="#1楼到n楼的每层电梯门口都放着一颗钻石，钻石大小不一。你乘坐电梯从1楼到n楼，每层楼电梯门都会打开一次，只能拿一次钻石，问怎样才能拿到「最大」的一颗？" class="headerlink" title="1楼到n楼的每层电梯门口都放着一颗钻石，钻石大小不一。你乘坐电梯从1楼到n楼，每层楼电梯门都会打开一次，只能拿一次钻石，问怎样才能拿到「最大」的一颗？"></a>1楼到n楼的每层电梯门口都放着一颗钻石，钻石大小不一。你乘坐电梯从1楼到n楼，每层楼电梯门都会打开一次，只能拿一次钻石，问怎样才能拿到「最大」的一颗？</h2><blockquote>
<p>这是一个非常有意思且非常高频的面试题，大概意思就是先观察几层电梯的钻石大小，记住最大的钻石大小，后面几层一旦出现比前几层钻石都大的钻石就直接拿了，这样其实也不能保证可以拿到最大的一颗，但却是一个最优解了。</p>
</blockquote>
<p>这个问题的原型叫秘书问题，可以在维基百科上查到，内容是这样的：要聘请一名秘书，有 <em>n</em> 个应聘者。每次面试一人，面试后就要及时决定是否聘他，如果当时决定不聘他，他便不会回来。面试后总能清楚了解应聘者的合适程度，并能和之前的每个人做比较。问什么样的策略，才使最佳人选被选中的概率最大。</p>
<p><img src="https://pic3.zhimg.com/80/v2-e6eb68ec90e18c90246d3664ad393a92_720w.jpg" alt="img"></p>
<p>说下结论，大概观察前百分之（约等于37%）的楼层的钻石，记住最大的，后面遇到比这个大的就直接拿了。</p>
<h1 id="高层扔鸡蛋问题"><a href="#高层扔鸡蛋问题" class="headerlink" title="高层扔鸡蛋问题"></a>高层扔鸡蛋问题</h1><h2 id="有一个100层的高楼，给你两个鸡蛋，需要测试出在哪层楼扔鸡蛋，鸡蛋不会碎。鸡蛋如果没有碎可以扔无数次。最少需要扔多少次？"><a href="#有一个100层的高楼，给你两个鸡蛋，需要测试出在哪层楼扔鸡蛋，鸡蛋不会碎。鸡蛋如果没有碎可以扔无数次。最少需要扔多少次？" class="headerlink" title="有一个100层的高楼，给你两个鸡蛋，需要测试出在哪层楼扔鸡蛋，鸡蛋不会碎。鸡蛋如果没有碎可以扔无数次。最少需要扔多少次？"></a>有一个100层的高楼，给你两个鸡蛋，需要测试出在哪层楼扔鸡蛋，鸡蛋不会碎。鸡蛋如果没有碎可以扔无数次。最少需要扔多少次？</h2><blockquote>
<p>这是一个非常经典的动态规划问题，手撕代码时也很常见</p>
</blockquote>
<p>如果是只有1个鸡蛋，这个问题就很简单了，为保证一定找到这个楼层，只能从第一层开始试。</p>
<p>题目中是两个鸡蛋，正常就是会想到二分法之类，先在50层扔一个，没碎，捡回来在75层扔，碎了，第二个鸡蛋只能从第1层开始试了。第一个鸡蛋用来缩短范围，第二个鸡蛋用来遍历范围。</p>
<p>假设需要x次才能找到临界的楼层，也就是说第一个鸡蛋从第x层扔出（因为需要考虑最差情况，万一第一个鸡蛋碎了，为保证x次能找到，第一个鸡蛋需要从x层扔出。因为如果鸡蛋恰好在第x层碎了，在第x-1层没碎，第一个鸡蛋在x层以上的楼层扔的话，第二个鸡蛋需要遍历x次，一共需要x+1次）</p>
<p>如果第一个鸡蛋碎了，第二个鸡蛋遍历1至x-1层，则需要x次找到。</p>
<p>如果第一个鸡蛋没碎，则第一个鸡蛋的任务是需要继续缩小范围，还是为了保持这个x次能找到临界楼层的条件，现在只剩x-1次了，下一次只能在x+x-1层扔第一个鸡蛋，以此类推，x+(x-1)+(x-2)+……+1&gt;&#x3D;100，x&#x3D;14</p>
<p>也就是说最少需要扔14次。</p>
<p>这个问题还有一些变种问题，比如2个鸡蛋，n层楼；k个鸡蛋，n层楼（<a href="https://leetcode-cn.com/problems/super-egg-drop/">力扣887题</a>，大家感兴趣可以看看）     </p>
<h1 id="海盗分金币"><a href="#海盗分金币" class="headerlink" title="海盗分金币"></a>海盗分金币</h1><p>题目：5个海盗抢到了100枚金币，他们的分配方案，先抽签决定自己的发言顺序。1号提出的方案，由5个人进行投票表决，如果半数人以上同意（不包括半数），就按他的方案分配，否则扔进海里喂鱼。</p>
<p>如果1号被喂鱼，由2号发言，提出的方案由4个人进行投票表决，规则同上。如果2号被喂鱼，以此类推。1号海盗提出什么样的方法才能使得自己分到最多的金币</p>
<h2 id="半数或超过半数"><a href="#半数或超过半数" class="headerlink" title="半数或超过半数"></a>半数或超过半数</h2><p>半数或超过半数：     <a href="https://blog.csdn.net/u013487601/article/details/102614263">https://blog.csdn.net/u013487601/article/details/102614263</a>     </p>
<blockquote>
<p>这个题的思路主要是逆推法</p>
</blockquote>
<p>从最后面开始，如果前三个人都被喂鱼了，只剩4号和5号，那么无论4号说什么，5号都会反对，4号一定会被喂鱼，5号独吞100枚金币。所以3号无论说什么，4号只能同意。</p>
<p>3号知道这些，会提出“100，0，0”这种分配方案，4号海盗为了活命只能赞同，加上自己一票即可使得投票通过半数。</p>
<p>2号知道这些，会提出“98，0，1，1”的分配方案，以此拉拢4号和5号。</p>
<p>1号知道这些，他还需要两个人支持他，2号是不可能的，3号只需1枚金币，4号或者5号其中一人即可，所以1号的分配方案是“97，0，1，2，0”或者“97，0，1，0，2”</p>
<h2 id="超过半数"><a href="#超过半数" class="headerlink" title="超过半数"></a>超过半数</h2><p>拓展：如果题目改成投票半数人同意即可，又会怎样分配呢？</p>
<p>超过半数：     <a href="https://www.jianshu.com/p/ab2f71802733">https://www.jianshu.com/p/ab2f71802733</a> </p>
<h1 id="两人博弈"><a href="#两人博弈" class="headerlink" title="两人博弈"></a>两人博弈</h1><h2 id="两人玩游戏，在脑门上贴数字（正整数-gt-x3D-1），只看见对方的，看不见自己的，而且两人的数字相差1，以下是两人的对话：A：我不知道，B：我也不知道，A：我知道了，B：我也知道了，问A头上的字是多少，B头上的字是多少？"><a href="#两人玩游戏，在脑门上贴数字（正整数-gt-x3D-1），只看见对方的，看不见自己的，而且两人的数字相差1，以下是两人的对话：A：我不知道，B：我也不知道，A：我知道了，B：我也知道了，问A头上的字是多少，B头上的字是多少？" class="headerlink" title="两人玩游戏，在脑门上贴数字（正整数&gt;&#x3D;1），只看见对方的，看不见自己的，而且两人的数字相差1，以下是两人的对话：A：我不知道，B：我也不知道，A：我知道了，B：我也知道了，问A头上的字是多少，B头上的字是多少？"></a>两人玩游戏，在脑门上贴数字（正整数&gt;&#x3D;1），只看见对方的，看不见自己的，而且两人的数字相差1，以下是两人的对话：A：我不知道，B：我也不知道，A：我知道了，B：我也知道了，问A头上的字是多少，B头上的字是多少？</h2><blockquote>
<p>这个问题关键是数字是大于等于1的数字，只有对方脑门上贴的是1，才能一次猜出自己的数字，所以1这个数字很关键，不是在对方脑门上，就是自己脑门上的两个可能数字之一，这个条件是必须要用上的。</p>
</blockquote>
<p>第一轮：A说不知道，B也说不知道，说明两个人脑门上都没有数字1。每个人脑门上的数字都有两种可能。</p>
<ul>
<li>A说不知道：B不是1</li>
<li>B也说不知道：A不是1</li>
</ul>
<p>第二轮：A说知道了，B也说知道了</p>
<ul>
<li>A说知道了：每个人头上的数字都有两种可能，A知道自己不是1后就能排除一种可能，那么A肯定是2，2的两边是1和3</li>
<li>B也说知道了：A是2，B不是1，B只能是3</li>
</ul>
<p><strong>A是2，B是3</strong></p>
<h2 id="一共有N颗石子，每次最多取M颗最少取1颗，A，B轮流取（A先），谁最后拿完石子谁就获胜，请问最后谁会获胜？"><a href="#一共有N颗石子，每次最多取M颗最少取1颗，A，B轮流取（A先），谁最后拿完石子谁就获胜，请问最后谁会获胜？" class="headerlink" title="一共有N颗石子，每次最多取M颗最少取1颗，A，B轮流取（A先），谁最后拿完石子谁就获胜，请问最后谁会获胜？"></a>一共有N颗石子，每次最多取M颗最少取1颗，A，B轮流取（A先），谁最后拿完石子谁就获胜，请问最后谁会获胜？</h2><blockquote>
<p>这种没有具体的数字就要分类讨论下了</p>
</blockquote>
<p>假设M&gt;&#x3D;N，那么A一次就把石子拿完了，<strong>A胜</strong></p>
<p>假设M&lt;N，如果N可以被（M+1）整除时，<strong>A失败</strong>，如果N不可以被（M+1）整除时，<strong>A胜</strong></p>
<p>具体分析：</p>
<ul>
<li>如果N可以被（M+1）整除时：<ul>
<li>无论A怎么拿，B都会保持拿完后石子的数量为（M+1）的倍数，到最后只能M+1个，A无论怎么拿，B都会在下一次把石子拿完。</li>
</ul>
</li>
<li>如果N不可以被（M+1）整除时：<ul>
<li>A可以保证自己拿完剩下的石子数量一定是（M+1）的倍数，同理，A胜。</li>
</ul>
</li>
</ul>
<h1 id="飞机加油"><a href="#飞机加油" class="headerlink" title="飞机加油"></a>飞机加油</h1><h2 id="在一个飞机场有N架飞机，每架飞机只有一个油箱，每箱油可以使飞机绕地球飞半圈。如果使一架飞机绕地球一圈，至少需要出动多少飞机？（要求所有飞机均能安全返回到机场，只能通过飞机给飞机这样加油方式，不能降落到机场加油）"><a href="#在一个飞机场有N架飞机，每架飞机只有一个油箱，每箱油可以使飞机绕地球飞半圈。如果使一架飞机绕地球一圈，至少需要出动多少飞机？（要求所有飞机均能安全返回到机场，只能通过飞机给飞机这样加油方式，不能降落到机场加油）" class="headerlink" title="在一个飞机场有N架飞机，每架飞机只有一个油箱，每箱油可以使飞机绕地球飞半圈。如果使一架飞机绕地球一圈，至少需要出动多少飞机？（要求所有飞机均能安全返回到机场，只能通过飞机给飞机这样加油方式，不能降落到机场加油）"></a>在一个飞机场有N架飞机，每架飞机只有一个油箱，每箱油可以使飞机绕地球飞半圈。如果使一架飞机绕地球一圈，至少需要出动多少飞机？（要求所有飞机均能安全返回到机场，只能通过飞机给飞机这样加油方式，不能降落到机场加油）</h2><blockquote>
<p>这个问题的思路是先将路程分为前半程和后半程，这样需要出动飞机会少些</p>
</blockquote>
<p>具体细节可以看这个图</p>
<p><img src="https://pic3.zhimg.com/80/v2-9c8b874adc54277efae777e5a8085f6a_720w.jpg" alt="img"></p>
<p>前半程：假设整个路程为1，A、B、C三架飞机同时起飞，在1&#x2F;8处，三架飞机的油量都剩了3&#x2F;4，其中飞机C给另外飞机A、B加满油，自己还剩1&#x2F;4，刚好够返航到机场。到2&#x2F;8处，A、B两架飞机的油量都剩了3&#x2F;4，其飞机B给飞机A加满油后，自己还剩2&#x2F;4，刚好能够返航。此时飞机A飞到6&#x2F;8处时，油量为0。</p>
<p>后半程：D、E、F三架飞机同时反方向起飞，在7&#x2F;8处，三架飞机的油量还剩了3&#x2F;4，飞机F给飞机D、E加满后返航，D、E两架飞机在6&#x2F;8处碰到飞机A，此时飞机A油量为0，D、E两架飞机的油量为3&#x2F;4，分别给飞机A加1&#x2F;4的油量。这时A、D、E飞机油量都是2&#x2F;4，刚好够返航。</p>
<p>总结一下，几个加油的节点，分别在1&#x2F;8，2&#x2F;8，7&#x2F;8，6&#x2F;8处。</p>
<h1 id="过桥"><a href="#过桥" class="headerlink" title="过桥"></a>过桥</h1><h2 id="晚上有四个人需要过桥，但是只有一个手电筒，并且桥一次最多两个人，每个人通过桥所需的时间也不同，A、B、C、D过桥所需的时间分别为1、2、5、10分钟。请问如何过桥所需时间最短？"><a href="#晚上有四个人需要过桥，但是只有一个手电筒，并且桥一次最多两个人，每个人通过桥所需的时间也不同，A、B、C、D过桥所需的时间分别为1、2、5、10分钟。请问如何过桥所需时间最短？" class="headerlink" title="晚上有四个人需要过桥，但是只有一个手电筒，并且桥一次最多两个人，每个人通过桥所需的时间也不同，A、B、C、D过桥所需的时间分别为1、2、5、10分钟。请问如何过桥所需时间最短？"></a>晚上有四个人需要过桥，但是只有一个手电筒，并且桥一次最多两个人，每个人通过桥所需的时间也不同，A、B、C、D过桥所需的时间分别为1、2、5、10分钟。请问如何过桥所需时间最短？</h2><blockquote>
<p>这个问题最开始想到的可能是让速度最快的人分别送其他三个人过去，因为他回来所需的时间最短。其实不是这样的，最佳的解决方案是将两个耗时最多的人一起过桥，而不是分开过桥，并且不需要返回。</p>
</blockquote>
<p>第一次过桥：A和B一起过，需要2分钟，A再回来，所需1分钟，一共所需3分钟</p>
<p>第二次过桥： C和D一起过桥，需要10分钟，B再回来，所需2分钟，一共需12分钟</p>
<p>第三次过桥：A和B一起过桥，所需2分钟</p>
<p>一共所需17分钟。</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>前端面经</category>
      </categories>
      <tags>
        <tag>面经</tag>
      </tags>
  </entry>
  <entry>
    <title>Black Rock Shooter</title>
    <url>/2021/07/12/karaoke/karaoke19/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=825469&auto=1&height=66"></iframe>

<span id="more"></span>

<p>ブラックロックシューター || 何処へ行ったの？<br>Black Rock Shooter || doko e itta no<br>Black Rock Shooter || 你到哪里去了？</p>
<p>闻こえますか？<br>ki ko e ma su ka<br>你能听得到吗？</p>
<hr>
<p>あとどれだけ叫べばいいのだろう<br>ato dore dake sabe ba iino darou<br>要呐喊多久才行呢</p>
<p>あとどれだけ泣けばいいのだろう<br>ato dore dake nake ba iino darou<br>要哭泣多久才行呢</p>
<p>もうやめて わたしはもう走れない<br>mou yamete watashi wa-mou hashire nai<br>停止吧 我已经无法奔跑了</p>
<p>いつか梦见た世界が闭じる<br>itsuka yume mita sekai ga tojiru<br>总有一天梦想中的世界会终结</p>
<p>真っ暗で明かりもない || 崩れかけたこの道で<br>ma kkura de akari mo nai || kuzure kaketa kono michi de<br>这条崩毁的道路上 ||  漆黑一片连光也没有</p>
<p>あるはずもないあの时の希望が  || 见えた気がした<br>aru hazu mo nai ano toki no kibou ga || mieta kiga shi ta<br>不可能存在的那时的希望 || 感觉能看见</p>
<p>どうして<br>do u shi te<br>为什麼</p>
<p>ブラックロックシューター   || 懐かしい记忆<br>Black Rock Shooter   || natsu ka shii kioku<br>Black Rock Shooter   || 怀念的记忆</p>
<p>ただ楽しかったあの顷を<br>tada tano shi ka tta ano koro wo<br>单纯感到快乐的那时候</p>
<p>ブラックロックシューター   || でも动けないよ<br>Black Rock Shooter   || demo ugoke nai yo<br>Black Rock Shooter   || 但是无法动弹了</p>
<p>暗を駆ける星に愿いを<br>yami wo kakeru hoshi ni negai wo<br>愿有能够奔驰过黑暗的星星 </p>
<p>もう一度だけ走るから<br>mou ichido dake hashiru ka ra<br>因为再一次就好 我要向前跑</p>
<hr>
<p>怖くて震える声でつぶやく<br>kowaku te furueru koede tsubu yaku<br>用害怕而发抖的声音嘟哝著 </p>
<p>わたしの名前を呼んで<br>watashi no namae wo~ yon de<br>呼唤我的名字吧</p>
<p>夜明けを抱く空 境界线までの距离<br>yoake wo idaku sora kyou~ kai sen made no kyori<br>怀抱黎明的天空 到达界线的距离 </p>
<p>あともう一歩届かない<br>ato mou ippo todoka nai<br>只差一步而无法触及</p>
<p>こらえた涙があふれそうなの<br>kora e ta namida ga afure sou nano<br>强忍住的泪水好像要溢出了吗 </p>
<p>今下を向かないで<br>ima shita wo muka nai de<br>现在不要低头</p>
<p>止まってしまう<br>toma tte shimau<br>把它停下来</p>
<p>未来を生きていたいんだ  || wわかったの<br>mirai wo ikite itain da  || wakatta no<br>想在未来活下去  || 我明白的 </p>
<p>思い出して || 强く 强く 信じるの<br>omoi dashi te || tsuyoku tsuyoku shin ji ru no<br>回想起来吧 || 坚定地 坚定地 相信的事物</p>
<p>そうよ<br>so u yo<br>对啊</p>
<p>ブラックロックシューター ||  优しい匂い<br>Black Rock Shooter ||  yasashi i nioi<br>Black Rock Shooter ||  温柔的香气</p>
<p>痛いよ 辛いよ 饮み込む言叶<br>itai yo tsurai o nomi komu kotoba<br>好疼痛 好难过 被咽下的言语</p>
<p>ブラックロックシューター  || 动いてこの足！<br>Black Rock Shooter  || ugo i te kono ashi<br>Black Rock Shooter 快动啊我的双腿！</p>
<p>世界を超えて<br>sekai wo koete<br>超越世界吧</p>
<hr>
<p>最初からわかっていた  || ここにいることを<br>saisho ka ra wakatte i ta  || koko ni iru koto wo<br>一开始就明白  || 我存在於此</p>
<p>わたしのなかの 全ての勇気が<br>watashi no naka no subete no yuuki ga<br>我心中 全部的勇气</p>
<p>火をともして<br>hi wo tomo shite<br>点燃了火焰</p>
<p>もう逃げないよ<br>mou nige nai yo<br>再也不会逃了</p>
<p>ブラックロックシューター  || ひとりじゃないよ<br>Black Rock Shooter  || hitori ja nai yo<br>Black Rock Shooter 并不是独自一人</p>
<p>声をあげて泣い || たって构わない<br>koe wo a gete nai  || ta tte kama wa nai<br>就算放声哭泣 || 也没关系</p>
<p>ブラックロックシューター ||  见ていてくれる<br>Black Rock Shooter ||  mite ite kure ru<br>Black Rock Shooter 看著我吧</p>
<p>今からはじまるの  || わたしの物语<br>ima kara hajimaru no ||  watashi no mono gatari<br>现在即将要开始的 我的故事</p>
<p>忘れそうになったら  || この歌を<br>wasure sou ni nattara  || kono uta wo<br>像是快要忘记的时候 就将这首歌</p>
<p>歌うの<br>u ta u no<br>唱出来吧</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>KTV小助手</category>
      </categories>
  </entry>
  <entry>
    <title>绝対运命黙示录</title>
    <url>/2021/07/13/karaoke/karaoke20/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=573111886&auto=1&height=66"></iframe>

<span id="more"></span>

<p>绝対运命黙示录<br>zettai unmei mokushiroku<br>绝対运命黙示录<br>zettai unmei mokushiroku<br>出生登录·洗礼名簿·死亡登录<br>shussei touroku, senrei meibo, shibou touroku</p>
<p>绝対运命黙示录<br>zettai unmei mokushiroku<br>绝対运命黙示录<br>zettai unmei mokushiroku<br>わたしの诞生·绝対诞生·黙示录<br>watashi no tanjou, zettai tanjou, mokushiroku</p>
<p>暗の砂漠に烁场·宇叶<br>yami no sabaku ni sanba, uba<br>金のメッキの桃源郷<br>kin no mekki no tougenkyou<br>昼と夜とが逆回り<br>hiru to yoru to ga gyaku mawari<br>时のメッキの失楽园<br>toki no mekki no shitsurakuen    </p>
<p>ソドムの暗 光の暗<br>SODOMU no yami        hikari no yami<br>彼方の暗 果てなき暗<br>kanata no yami        hatenaki yami<br>绝対运黙示录<br>zettai unmei mokushiroku<br>绝対运黙示录·黙示录<br>zettai unmei mokushiyami, mokushiroku        </p>
<p>mokushi kushimo<br>shimoku kumoshi<br>moshiku shikumo    </p>
<p>mokushi kushimo<br>shimoku kumoshi<br>moshiku shikumo    </p>
<p>mokushi kushimo<br>shimoku kumoshi<br>moshiku shikumo        </p>
<p>mokushi kushimo<br>shimoku kumoshi<br>moshiku shikumo        </p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>KTV小助手</category>
      </categories>
  </entry>
  <entry>
    <title>轮舞 Revolution</title>
    <url>/2021/07/13/karaoke/karaoke21/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=22647311&auto=1&height=66"></iframe>

<span id="more"></span>

<p>潔く カッコ良く 生きて行こう…<br>isaki yoku kakko yoku iki te iko u …<br>(Just a long long time…)<br>たとえ2人离ればなれになっても…Take my revolution<br>tatoe futari hanare banare ni na ttemo …<br>(Let’s go away)<br>Take my revolution</p>
<p>光差す校庭（gardan） 手を取り合い誓い合ったなぐさめ合った<br>hikari sasu gardan<br>te wo tori ai<br>chikaii atta nagu same atta<br>もう 恋は二度としないよって<br>mou koiwa nido to shinai yotte</p>
<p>そんなに强い结束は カタチを変え<br>son nani tsuyoi kessoku wa<br>katachi wo kae<br>今じゃこんなにたくましい私达のLife style, everyday…everytime<br>ima ja konnani takuma shi i watashi tachi no<br>Life style, everyday … everytime</p>
<p>頬を寄せあって うつる写真の笑颜に 少しの淋しさつめ込んで<br>hoo wo<br>yose atte<br>utsuru shashin no<br>egao ni sukoshi no<br>sabishi sa tsume kon de</p>
<p>洁く カッコ良く 明日からは 谁もが振り向く女になる<br>isaki yoku kakko yoku ashita kara wa<br>daremo ga furimuku onna ninaru<br>たとえ2人离ればなれになっても 心はずっと一绪に<br>tatoe futari hanare banare ni na ttemo<br>kokoroha zutto isshoni</p>
<hr>
<p>爱は お金では买えないって知っているけど<br>ai wa okane de wa kae naitte shitte irukedo<br>“I”でお金は买えるの·T.Vで言ってた<br>“ I “ deo kane wa kae runo ·T.V de itsutte ta<br>无感动…无関心きりがないね<br>mukan dou … mukanshin kiriganaine<br>若い子みんなそうだと思われるのはfeel so bad!どうしょうもないじゃない<br>wakai ko minnasoudato omowa rerunoha feel so bad! doushoumonaijanai<br>でもね私达 トモダチの事何より大切にしてる きっと大人よりも<br>demone watashitachi tomodachi no koto nani yori taisetsu nishiteru kitto otona yorimo<br>梦を见て 涙して 伤ついても 现実はがむしゃらに来るし<br>yume wo mite namida shite kizutsu itemo genjitsu hagamusharani kuru shi<br>自分の居场所 存在価値は失くせない 自分を守るために<br>jibun no ibasho sonzaikachi ha naku senai jibun wo mamoru tameni<br>I’’ll go my way 戻れない それぞれの 道を选ぶ时が来る前に<br>Ill go my way modore nai sorezoreno michi wo erabu toki ga kuru mae ni<br>こんなにも こんなにも 大切な想い出…とき放つよ<br>konnanimo konnanimo taisetsu na omoide … toki houttsu yo<br>Take my revolution 生き 行こう 现実はがむしゃらに来るし<br>Take my revolution iki te iko u genjitsu hagamusharani kuru shi<br>自分の居场所 存在価値を见つけたい 今日までの自分を<br>jibun no ibasho sonzaikachi wo mitsu ketai kyou madeno jibun wo<br>洁く 脱ぎ舍てる 裸になる 自由を舞う蔷薇のように<br>kiyoshi ku nugi sute ru hadaka ninaru jiyuu wo mau bara noyouni<br>たとえ2人离ればなれになっても 私は世界を変える<br>tatoe 2 nin hanare banareninattemo watashi ha sekai wo kae ru</p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>KTV小助手</category>
      </categories>
  </entry>
  <entry>
    <title>CSS进阶实战1：项目资源与架构</title>
    <url>/2022/05/11/CSS/omnifood1_overview/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>参考课程：Build Responsive Real-World Websites with HTML and CSS<br><a href="https://www.bilibili.com/video/BV1A34y1e7wL?p=101&spm_id_from=pageDriver">视频</a> | <a href="https://github.com/jonasschmedtmann/html-css-course">源码</a></p>
</blockquote>
<p>基于React的响应式单页应用开发、优化和部署</p>
<ul>
<li>项目地址：<a href="https://github.com/luryZhu/omnifood">https://github.com/luryZhu/omnifood</a></li>
<li>在线demo：<a href="https://omnifood-lury.netlify.app/">https://omnifood-lury.netlify.app/</a></li>
</ul>
<span id="more"></span>

<hr>
<h1 id="工具-x2F-资源"><a href="#工具-x2F-资源" class="headerlink" title="工具&#x2F;资源"></a>工具&#x2F;资源</h1><p><strong>免费素材网站</strong></p>
<p>背景：<a href="https://unsplash.com/">unsplash</a></p>
<p>人像：<a href="https://www.uifaces.co/">UIfaces</a></p>
<p>字体：<a href="https://fonts.google.com/">Google fonts</a></p>
<p><strong>前端设计</strong></p>
<p>亮色阴影色：<a href="https://maketintsandshades.com/">Tints and Shades</a></p>
<p>响应式网站：<a href="https://mediaqueri.es/">Media Queries</a></p>
<p>浏览器支持：<a href="https://caniuse.com/">Can i use</a></p>
<p><strong>VScode插件</strong></p>
<p>高亮颜色：Color Highlight </p>
<p><img src="https://github.com/luryZhu/omnifood/blob/main/readme/image-20220428152742565.png?raw=true" alt="image-20220428152742565"></p>
<p><strong>第三方库</strong></p>
<p>style-resource：配置less全局变量</p>
<p>react-scroll：实现平滑滚动</p>
<p><strong>优化</strong></p>
<p>LightHouse</p>
<p>图像压缩：<a href="https://squoosh.app/">Squoosh</a></p>
<h1 id="项目架构"><a href="#项目架构" class="headerlink" title="项目架构"></a>项目架构</h1><p>技术栈：React + React Hooks + Less</p>
<p>响应式布局：rem + grid + media query </p>
<p>部署：netlify</p>
<p>实现组件</p>
<ul>
<li>Header 导航</li>
<li>Hero 介绍</li>
<li>How does it work 原理</li>
<li>Testimonials 案例</li>
<li>Meals 食谱</li>
<li>Pricing 定价</li>
<li>Call to action 登录</li>
<li>Footer 相关链接</li>
</ul>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>CSS笔记</category>
        <category>CSS进阶实战</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS进阶实战3：平滑滚动、禁止滚动、监听滚动</title>
    <url>/2022/05/12/CSS/omnifood3_scroll/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>平滑滚动：scrollIntoView、react-scroll</p>
<p>禁止滚动：桌面端禁止滚动，移动端禁止滚动</p>
<p>监听滚动：IntersectionObserver</p>
<span id="more"></span>

<hr>
<blockquote>
<p>参考课程：Build Responsive Real-World Websites with HTML and CSS<br><a href="https://www.bilibili.com/video/BV1A34y1e7wL?p=101&spm_id_from=pageDriver">视频</a> | <a href="https://github.com/jonasschmedtmann/html-css-course">源码</a></p>
</blockquote>
<p>基于React的响应式单页应用开发、优化和部署</p>
<ul>
<li>项目地址：<a href="https://github.com/luryZhu/omnifood">https://github.com/luryZhu/omnifood</a></li>
<li>在线demo：<a href="https://omnifood-lury.netlify.app/">https://omnifood-lury.netlify.app/</a></li>
</ul>
<hr>
<h1 id="平滑滚动"><a href="#平滑滚动" class="headerlink" title="平滑滚动"></a>平滑滚动</h1><p>实现平滑且可被浏览器兼容的滚动</p>
<p>使用场景：</p>
<p>点击导航栏连接，产生一个动画平滑地滚动到指定位置</p>
<img src="https://github.com/luryZhu/omnifood/blob/main/readme/image-20220511171619128.png?raw=true" alt="image-20220511171619128" style="zoom:50%;" />

<h2 id="一般方式"><a href="#一般方式" class="headerlink" title="一般方式"></a>一般方式</h2><p>导航栏中的按钮为a标签实现的超链接</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#cta&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn--full margin-right-sm&quot;</span>&gt;</span>Start eating well<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>js脚本中选中所有<code>a: link</code>标签，手动绑定点击事件</p>
<ul>
<li>阻止默认行为</li>
<li>获取每个a标签的href属性，得到转跳目标元素的id</li>
<li>获取目标元素，调用<code>scrollIntoView</code>方法，设置参数<code>behavior: &quot;smooth&quot;</code>，即可平滑滚动</li>
</ul>
<p>但是该方法不适用于React的设计逻辑</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> allLinks = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;a:link&quot;</span>);</span><br><span class="line"></span><br><span class="line">allLinks.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">link</span>) </span>&#123;</span><br><span class="line">  link.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    <span class="keyword">const</span> href = link.getAttribute(<span class="string">&quot;href&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Scroll back to top</span></span><br><span class="line">    <span class="keyword">if</span> (href === <span class="string">&quot;#&quot;</span>)</span><br><span class="line">      <span class="built_in">window</span>.scrollTo(&#123;</span><br><span class="line">        <span class="attr">top</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">behavior</span>: <span class="string">&quot;smooth&quot;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Scroll to other links</span></span><br><span class="line">    <span class="keyword">if</span> (href !== <span class="string">&quot;#&quot;</span> &amp;&amp; href.startsWith(<span class="string">&quot;#&quot;</span>)) &#123;</span><br><span class="line">      <span class="keyword">const</span> sectionEl = <span class="built_in">document</span>.querySelector(href);</span><br><span class="line">      sectionEl.scrollIntoView(&#123; <span class="attr">behavior</span>: <span class="string">&quot;smooth&quot;</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Close mobile naviagtion</span></span><br><span class="line">    <span class="keyword">if</span> (link.classList.contains(<span class="string">&quot;main-nav-link&quot;</span>))</span><br><span class="line">      headerEl.classList.toggle(<span class="string">&quot;nav-open&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>其他方式参考：<a href="https://juejin.cn/post/6898670533567578125">实现页面平滑滚动的N种姿势</a></p>
<h2 id="React-scroll"><a href="#React-scroll" class="headerlink" title="React-scroll"></a>React-scroll</h2><p>使用React插件<a href="https://www.npmjs.com/package/react-scroll">react-scroll</a></p>
<p>使用例：<a href="https://codesandbox.io/s/basic-6t84k">https://codesandbox.io/s/basic-6t84k</a></p>
<h3 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Link, animateScroll <span class="keyword">as</span> scroll&#125; <span class="keyword">from</span> <span class="string">&#x27;react-scroll&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h4><table>
<thead>
<tr>
<th>参数</th>
<th>用例</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>activeClass</td>
<td>‘active’</td>
<td>判断滚动到指定的元素后，会在Link元素上加上一个css class，一般设类名为active</td>
</tr>
<tr>
<td>to</td>
<td>‘cta’</td>
<td>目标元素id或name</td>
</tr>
<tr>
<td>spy</td>
<td>true</td>
<td>判断滚动到指定的元素后，使对应的Link元素变成选中状态（就是加上activeClass）</td>
</tr>
<tr>
<td>hashSpy</td>
<td>true</td>
<td>判断滚动到指定的元素后，在网页url后面显示哈希路径，例如 <code>localhost:3000/#meals</code></td>
</tr>
<tr>
<td>smooth</td>
<td>true</td>
<td>是否平滑</td>
</tr>
<tr>
<td>offset</td>
<td>-80</td>
<td>额外滚动距离，单位为px，传参时直接传数值</td>
</tr>
<tr>
<td>duration</td>
<td>500</td>
<td>持续时间，单位为ms</td>
</tr>
</tbody></table>
<h4 id="animateScroll-as-scroll"><a href="#animateScroll-as-scroll" class="headerlink" title="animateScroll as scroll"></a>animateScroll as scroll</h4><p><a href="https://github.com/fisshy/react-scroll/blob/master/modules/mixins/animate-scroll.js">源码</a></p>
<p>options</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">duration</span>: <span class="number">1500</span>,</span><br><span class="line">  <span class="attr">delay</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">smooth</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">containerId</span>: <span class="string">&#x27;ContainerElementID&#x27;</span>,</span><br><span class="line">  <span class="attr">offset</span>: <span class="number">50</span>, <span class="comment">// Scrolls to element + 50 pixels down the page</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Scroll To Top</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scroll.scrollToTop(options);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Scroll To Bottom</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scroll.scrollToBottom(options);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Scroll To (position)</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scroll.scrollTo(100, options);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Scroll To (Element)</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scroll.scrollTo(element, options);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Scroll More (px)</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scroll.scrollMore(10, options);</span><br></pre></td></tr></table></figure>

<h3 id="手写封装：NavLink"><a href="#手写封装：NavLink" class="headerlink" title="手写封装：NavLink"></a>手写封装：NavLink</h3><p>入参：</p>
<ul>
<li>className：给a标签加上class</li>
<li>to：目标元素id</li>
<li>onClick：除了转跳意外的点击事件处理函数</li>
<li>props.children</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Link, animateScroll <span class="keyword">as</span> scroll &#125; <span class="keyword">from</span> <span class="string">&#x27;react-scroll&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> NavLink = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="comment">// &lt;a className=&#x27;main-nav-link&#x27; href=&quot;#how&quot;&gt;How it works&lt;/a&gt;</span></span><br><span class="line">        props.to !== <span class="string">&quot;#&quot;</span></span><br><span class="line">            ?</span><br><span class="line">            (<span class="xml"><span class="tag">&lt;<span class="name">Link</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">activeClass</span>=<span class="string">&quot;active&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">className</span>=<span class="string">&#123;props.className&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">to</span>=<span class="string">&#123;props.to&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">smooth</span>=<span class="string">&#123;true&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">duration</span>=<span class="string">&#123;500&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">offset</span>=<span class="string">&#123;-40&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">onClick</span>=<span class="string">&#123;props.onClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                &#123;props.children&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span>)</span><br><span class="line">            :</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">className</span>=<span class="string">&#123;props.className&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">href</span>=<span class="string">&quot;/#&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> scroll.scrollToTop(&#123; duration: 500 &#125;)&#125;&gt;</span></span><br><span class="line"><span class="xml">                &#123;props.children&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> NavLink</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;NavLink className=<span class="string">&#x27;main-nav-link&#x27;</span> to=<span class="string">&quot;how&quot;</span> onClick=&#123;onCloseHandle&#125;&gt;How it works&lt;/NavLink&gt;</span><br></pre></td></tr></table></figure>

<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>spy和hashSpy会出现滚动到指定位置，但是判定激活的是上面的当前元素上面的那个元素，目前没有找到解决方案</p>
<p>参考：<a href="https://github.com/fisshy/react-scroll/issues/422">https://github.com/fisshy/react-scroll/issues/422</a></p>
<blockquote>
<p>I solved this by letting <a href="https://www.npmjs.com/package/react-waypoint">react-waypoint</a> do the “set active” handling instead. So I removed <code>spy</code> and <code>onSetActive</code> from my <code>&lt;Link&gt;</code> elements and wrapped each targeted element with <code>&lt;Waypoint&gt;</code>. That way you get more control of when the target element is activated, and you can offset the triggers freely with using waypoints, while still keeping any scroll offset set in the <code>&lt;Link&gt;</code> element.</p>
</blockquote>
<h1 id="阻止滚动"><a href="#阻止滚动" class="headerlink" title="阻止滚动"></a>阻止滚动</h1><p>场景：</p>
<p>产生弹窗或打开导航栏时，不希望下层的页面能够滚动，需要手动禁用</p>
<img src="https://github.com/luryZhu/omnifood/blob/main/readme/image-20220513195237097.png?raw=true" alt="image-20220513195237097" style="zoom:50%;" />

<h2 id="桌面端"><a href="#桌面端" class="headerlink" title="桌面端"></a>桌面端</h2><p><strong>粗暴的方法</strong>：</p>
<p>html或body元素的overflow设为hidden（测试后是加在html元素上有效）</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.documentElement.style.overflow = <span class="string">&#x27;hidden&#x27;</span></span><br></pre></td></tr></table></figure>

<p>问题：</p>
<p>这样设置会影响子元素的overflow属性，造成页面布局抖动，不好</p>
<p><strong>其他解决方案</strong>：</p>
<p>参考：<a href="https://juejin.cn/post/6869740995290857479#heading-3">阻止滚轮滚动事件</a></p>
<p>监听鼠标滚轮滚动mousewheel事件，阻止默认行为</p>
<p>问题：</p>
<p>用户仍然可以拖动滚动条进行操作</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> preventScroll = useCallback(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  e.preventDefault()</span><br><span class="line">&#125;, [])</span><br><span class="line">useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (isNavOpen) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">document</span>.documentElement.addEventListener(</span><br><span class="line">      <span class="string">&#x27;mousewheel&#x27;</span>,</span><br><span class="line">      preventScroll,</span><br><span class="line">      &#123; <span class="attr">passive</span>: <span class="literal">false</span> &#125;</span><br><span class="line">    );  <span class="comment">//passive 参数不能省略，用来兼容ios和android</span></span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">document</span>.documentElement.removeEventListener(</span><br><span class="line">      <span class="string">&#x27;mousewheel&#x27;</span>,</span><br><span class="line">      preventScroll</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;, [isNavOpen, preventScroll])</span><br></pre></td></tr></table></figure>

<h2 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h2><p>考虑兼容性的方法：touchmove事件，阻止默认行为</p>
<p>原理：参考 <a href="https://www.jianshu.com/p/bf4b3693a4f1">React禁止页面滚动踩坑实践与方案梳理</a></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> preventScroll = useCallback(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  e.preventDefault()</span><br><span class="line">&#125;, [])</span><br><span class="line">useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (isNavOpen) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">document</span>.documentElement.addEventListener(</span><br><span class="line">      <span class="string">&#x27;touchmove&#x27;</span>,</span><br><span class="line">      preventScroll,</span><br><span class="line">      &#123; <span class="attr">passive</span>: <span class="literal">false</span> &#125;</span><br><span class="line">    );  <span class="comment">//passive 参数不能省略，用来兼容ios和android</span></span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">document</span>.documentElement.removeEventListener(</span><br><span class="line">      <span class="string">&#x27;touchmove&#x27;</span>,</span><br><span class="line">      preventScroll</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;, [isNavOpen, preventScroll])</span><br></pre></td></tr></table></figure>

<h1 id="监听滚动"><a href="#监听滚动" class="headerlink" title="监听滚动"></a>监听滚动</h1><p>场景：监听页面滚动，如果滚动到指定位置触发事件</p>
<h2 id="IntersectionObserver"><a href="#IntersectionObserver" class="headerlink" title="IntersectionObserver"></a>IntersectionObserver</h2><p>文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/IntersectionObserver">https://developer.mozilla.org/zh-CN/docs/Web/API/IntersectionObserver</a></p>
<p><code>IntersectionObserver</code><strong>接口</strong> (从属于<a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API">Intersection Observer API</a>) 提供了一种异步观察目标元素与其祖先元素或顶级文档视窗(<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Viewport">viewport</a>)交叉状态的方法。祖先元素与视窗(<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Viewport">viewport</a>)被称为<strong>根(root)。</strong></p>
<p>可以用于检测某一元素是否滚动到窗口内，或者在窗口类滚动到的比例</p>
<h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><p>使用<code>new</code> 关键字调用 <code>IntersectionObserver</code> 接口，返回一个新的<code>IntersectionObserver</code>对象，当其监听到目标元素的可见部分穿过了一个或多个**阈(thresholds)**时，会执行指定的回调函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> observer = <span class="keyword">new</span> IntersectionObserver(callback[, options]);</span><br></pre></td></tr></table></figure>

<p>入参：</p>
<ul>
<li><p>回调函数，当元素可见比例超过指定阈值后，会调用该回调函数，此回调函数接受两个参数：</p>
<ul>
<li><p><code>entries</code></p>
<p>一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/IntersectionObserverEntry"><code>IntersectionObserverEntry</code></a>对象的数组，每个被触发的阈值，都或多或少与指定阈值有偏差。</p>
</li>
<li><p><code>observer</code></p>
<p>被调用的<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/IntersectionObserver"><code>IntersectionObserver</code></a>实例。一般只传entries</p>
</li>
</ul>
</li>
<li><p><code>options</code> 可选</p>
<p>一个可以用来<strong>配置observer实例</strong>的对象。如果<code>options</code>未指定，observer实例默认使用文档视口作为root，并且没有margin，阈值为0%（意味着即使一像素的改变都会触发回调函数）。可以指定以下配置：</p>
<ul>
<li><p><code>root</code></p>
<p>监听元素的祖先元素<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element"><code>Element</code></a>对象，其边界盒将被视作视口。目标在根的可见区域的的任何不可见部分都会被视为不可见。</p>
</li>
<li><p><code>rootMargin</code></p>
<p>一个在计算交叉值时添加至根的边界盒(<a href="https://developer.mozilla.org/en-US/docs/Glossary/bounding_box">bounding_box (en-US)</a>)中的一组偏移量，类型为字符串(string) ，可以有效的缩小或扩大根的判定范围从而满足计算需要。语法大致和CSS 中的<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin"><code>margin</code></a> 属性等同; 可以参考 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API#the_root_element_and_root_margin">The root element and root margin</a> in <a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API">Intersection Observer API</a>来深入了解margin的工作原理及其语法。默认值是”0px 0px 0px 0px”。</p>
</li>
<li><p><code>threshold</code></p>
<p>规定了一个监听目标与边界盒交叉区域的比例值，可以是一个具体的数值或是一组0.0到1.0之间的数组。若指定值为0.0，则意味着监听元素即使与根有1像素交叉，此元素也会被视为可见. 若指定值为1.0，则意味着整个元素都在可见范围内时才算可见。可以参考<a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API#thresholds">Thresholds</a> in <a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API">Intersection Observer API</a> 来深入了解阈值是如何使用的。阈值的默认值为0.0。</p>
</li>
</ul>
</li>
</ul>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>以下使用场景：</p>
<ul>
<li>检测某一元素（section-hero）是否滚动到视窗内，滚动则在body元素上绑定新css属性（’sticky’）</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Hero = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> heroRef = useRef(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> scrollObserver = useCallback(</span><br><span class="line">    <span class="function"><span class="params">node</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">new</span> IntersectionObserver(<span class="function"><span class="params">entries</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> en = entries[<span class="number">0</span>]</span><br><span class="line">        <span class="built_in">console</span>.log(en.isIntersecting)</span><br><span class="line">        <span class="keyword">if</span> (!en.isIntersecting) &#123;</span><br><span class="line">          <span class="comment">// 不相交，则sticky</span></span><br><span class="line">          <span class="built_in">document</span>.body.classList.add(<span class="string">&#x27;sticky&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="built_in">document</span>.body.classList.remove(<span class="string">&#x27;sticky&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        <span class="attr">root</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">threshold</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">rootMargin</span>: <span class="string">&#x27;-80px&#x27;</span>,</span><br><span class="line">      &#125;).observe(node);</span><br><span class="line">    &#125;,</span><br><span class="line">    []</span><br><span class="line">  );</span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (heroRef.current) &#123;</span><br><span class="line">      scrollObserver(heroRef.current);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [scrollObserver, heroRef]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">section</span> <span class="attr">ref</span>=<span class="string">&#123;heroRef&#125;</span> <span class="attr">className</span>=<span class="string">&quot;section-hero&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      ...</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>CSS笔记</category>
        <category>CSS进阶实战</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS进阶实战4：响应式实现思路</title>
    <url>/2022/05/13/CSS/omnifood4_responsive/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>响应式：响应不同屏幕设备合适地展现网页效果的方式或着手段</p>
<ul>
<li>桌面端优先vs移动端优先</li>
<li>rem弹性布局</li>
<li>媒体查询</li>
<li>响应式导航栏（折叠+粘性布局）实现方案</li>
</ul>
<span id="more"></span>

<hr>
<blockquote>
<p>参考课程：Build Responsive Real-World Websites with HTML and CSS<br><a href="https://www.bilibili.com/video/BV1A34y1e7wL?p=101&spm_id_from=pageDriver">视频</a> | <a href="https://github.com/jonasschmedtmann/html-css-course">源码</a></p>
</blockquote>
<p>基于React的响应式单页应用开发、优化和部署</p>
<ul>
<li>项目地址：<a href="https://github.com/luryZhu/omnifood">https://github.com/luryZhu/omnifood</a></li>
<li>在线demo：<a href="https://omnifood-lury.netlify.app/">https://omnifood-lury.netlify.app/</a></li>
</ul>
<hr>
<h1 id="桌面端优先vs移动端优先"><a href="#桌面端优先vs移动端优先" class="headerlink" title="桌面端优先vs移动端优先"></a>桌面端优先vs移动端优先</h1><p>目前更常用的是移动端优先，本项目采用桌面端优先</p>
<table>
<thead>
<tr>
<th></th>
<th>桌面端优先</th>
<th>移动端优先</th>
</tr>
</thead>
<tbody><tr>
<td>设计理念</td>
<td>先设计大屏幕的网页，然后逐步适配到小屏幕</td>
<td>先小再大</td>
</tr>
<tr>
<td>实现方式</td>
<td>基于max-width</td>
<td>基于min-width</td>
</tr>
<tr>
<td></td>
<td><code>@media screen (max-width: 1200px)</code></td>
<td><code>@media screen (min-width: 600px)</code></td>
</tr>
</tbody></table>
<p><img src="https://github.com/luryZhu/omnifood/blob/main/readme/image-20220428143726604.png?raw=true" alt="image-20220428143726604"></p>
<h1 id="rem弹性布局"><a href="#rem弹性布局" class="headerlink" title="rem弹性布局"></a>rem弹性布局</h1><p>DOM根元素html中的字体大小，如果没有定义，则是浏览器默认字体大小：16px</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>&#123;</span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    效果：1rem = 10px </span></span><br><span class="line"><span class="comment">    计算方法：默认为16px</span></span><br><span class="line"><span class="comment">    10/16 *100%=62.5%</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">62.5%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过上面的转换，将html元素的字体大小转换为10px，即<code>1rem=10px</code></p>
<p>可以把font-size, width, padding, margin之类的值都设置为以rem为单位，这样需要统一修改布局大小的时候（例如适配小屏幕）直接修改html元素的font-size就行</p>
<h1 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h1><h2 id="media"><a href="#media" class="headerlink" title="@media"></a>@media</h2><p>注意单位：rem &amp; em</p>
<ul>
<li>在media query中不是基于HTML元素的设置的</li>
<li>在这里固定 1rem&#x3D;1em&#x3D;16px</li>
<li>媒体查询中rem有问题，一般使用em</li>
</ul>
<p>桌面端优先和移动端优先的差异：</p>
<ul>
<li>桌面端优先，用max-width</li>
<li>移动端优先，用min-width</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 1344px 较小pc */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">84em</span>) &#123;</span><br><span class="line">    <span class="selector-class">.hero</span> &#123;</span><br><span class="line">        <span class="attribute">max-width</span>: <span class="number">120rem</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	// ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只要满足要求，所有媒体查询都会生效，后定义的会覆盖前定义的，所以顺序很重要！</p>
<h2 id="breakpoint"><a href="#breakpoint" class="headerlink" title="breakpoint"></a>breakpoint</h2><p>一般断点可以认为是1200 900 600 300之类的</p>
<p>开发时可以直接用chrome调试断点，推荐Responsive模式</p>
<ul>
<li>可以从大到小拉视窗，找到布局出现问题的大致宽度，然后在附近的位置加断点</li>
<li>一般一个媒体查询生效的范围差不多在200px左右，也就是两个端点之间差不多隔200px</li>
</ul>
<p><img src="https://github.com/luryZhu/omnifood/blob/main/readme/image-20220513190413121.png?raw=true" alt="image-20220513190413121"></p>
<p>参考：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 等于或大于 <span class="number">34</span>*<span class="number">16</span> = <span class="number">544px</span>（手机横屏）</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">34em</span>) &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">// 等于或大于 <span class="number">48</span>*<span class="number">16</span> = <span class="number">768px</span>(平板竖屏)</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">48em</span>) &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">// 等于或大于  <span class="number">62</span>*<span class="number">16</span> = <span class="number">992px</span>（pc窄屏）</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">62em</span>) &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">// 等于或大于 <span class="number">75</span>*<span class="number">16</span> = <span class="number">1200px</span>（ pc宽屏）</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">75em</span>) &#123; ... &#125;</span><br></pre></td></tr></table></figure>

<h1 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h1><p>以实现桌面端到移动端的导航栏为例，响应式是实现方案一般是</p>
<ul>
<li>满足触发条件后，给需要改变样式的元素重写样式，样式的交互动画可以新增css类实现</li>
<li>满足触发条件后，在body元素加上某一css类，然后用嵌套css类选择器定义新样式</li>
</ul>
<h2 id="折叠导航栏"><a href="#折叠导航栏" class="headerlink" title="折叠导航栏"></a>折叠导航栏</h2><p>场景：</p>
<p>视窗宽度较小时导航栏折叠起来，通过点击按钮展开</p>
<p><img src="https://github.com/luryZhu/omnifood/blob/main/readme/image-20220513191603694.png?raw=true" alt="image-20220513191603694"></p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul>
<li>导航栏中的连接都包在一个flex容器里（<code>main-nav</code>）</li>
<li>媒体查询重写flex容器的样式（<code>flex-direction</code>, <code>gap</code>, <code>font-size</code>, …）</li>
<li>给按钮绑定事件<ul>
<li>事件触发会给元素加上或删去css类（<code>nav-open</code>）</li>
<li>在css类里控制导航栏的偏移 （<code>position: fixed</code>，注意父元素要<code>position: relative</code>）<ul>
<li>打开导航，则移入视窗 （<code>transform: translateX(0)</code>）</li>
<li>关闭导航，则移出视窗 （<code>transform: translateX(100%)</code>）</li>
<li>设置渐入渐隐效果<ul>
<li>动画：<code>transition: all 0.5s ease-in</code></li>
<li>透明度：<code>opacity: 0/1</code></li>
<li>事件触发：<code>pointer-events: none/auto</code></li>
<li>不被屏幕阅读器识别：<code>visibility: hidden/visible</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Header = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [isNavOpen, setIsNavOpen] = useState(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onClickHandle</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    setIsNavOpen(!isNavOpen)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onCloseHandle</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    setIsNavOpen(<span class="literal">false</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">header</span> <span class="attr">className</span>=<span class="string">&#123;</span>&#x27;<span class="attr">header</span> &#x27; + (<span class="attr">isNavOpen</span> ? &#x27;<span class="attr">nav-open</span> &#x27; <span class="attr">:</span> &#x27;&#x27;)&#125;&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">className</span>=<span class="string">&#x27;logo&#x27;</span> <span class="attr">src</span>=<span class="string">&#123;Logo&#125;</span> <span class="attr">alt</span>=<span class="string">&quot;omnifood logo&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">nav</span> <span class="attr">className</span>=<span class="string">&#x27;main-nav&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&#x27;main-nav-list&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">className</span>=<span class="string">&#x27;main-nav-link&#x27;</span> <span class="attr">to</span>=<span class="string">&quot;how&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;onCloseHandle&#125;</span>&gt;</span>How it works<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">className</span>=<span class="string">&#x27;main-nav-link&#x27;</span> <span class="attr">to</span>=<span class="string">&quot;meals&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;onCloseHandle&#125;</span>&gt;</span>Meals<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">className</span>=<span class="string">&#x27;main-nav-link&#x27;</span> <span class="attr">to</span>=<span class="string">&quot;testimonials&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;onCloseHandle&#125;</span>&gt;</span>Testimonials<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">className</span>=<span class="string">&#x27;main-nav-link&#x27;</span> <span class="attr">to</span>=<span class="string">&quot;pricing&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;onCloseHandle&#125;</span>&gt;</span>Pricing<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">className</span>=<span class="string">&#x27;main-nav-link nav-cta&#x27;</span> <span class="attr">to</span>=<span class="string">&quot;cta&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;onCloseHandle&#125;</span>&gt;</span>Try for free<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&#x27;btn-mobile-nav&#x27;</span> <span class="attr">aria-label</span>=<span class="string">&#x27;open navigation&#x27;</span> <span class="attr">onClick</span>=<span class="string">&#123;onClickHandle&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">className</span>=<span class="string">&#x27;icon-mobile-nav iconfont icon-menu&#x27;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">name</span>=<span class="string">&quot;btn-menu&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">className</span>=<span class="string">&#x27;icon-mobile-nav iconfont icon-close&#x27;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">          <span class="attr">name</span>=<span class="string">&quot;btn-close&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CSS</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">59em</span>) &#123;</span><br><span class="line">    <span class="selector-class">.main-nav</span> &#123;</span><br><span class="line">        <span class="attribute">position</span>: fixed;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.9</span>);</span><br><span class="line">        -webkit-backdrop-<span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">10px</span>);</span><br><span class="line">        backdrop-<span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">10px</span>);</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">100%</span>);</span><br><span class="line">        <span class="attribute">z-index</span>: <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">display</span>: flex;</span><br><span class="line">        <span class="attribute">align-items</span>: center;</span><br><span class="line">        <span class="attribute">justify-content</span>: center;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">transition</span>: all <span class="number">0.5s</span> ease-in;</span><br><span class="line">        // <span class="number">1</span>. 透明度改为<span class="number">0</span></span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">        // <span class="number">2</span>. 取消事件触发</span><br><span class="line">        <span class="attribute">pointer-events</span>: none;</span><br><span class="line">        // <span class="number">3</span>. 对屏幕阅读器不可见</span><br><span class="line">        <span class="attribute">visibility</span>: hidden;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.nav-open</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.main-nav</span> &#123;</span><br><span class="line">            <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">            <span class="attribute">pointer-events</span>: auto;</span><br><span class="line">            <span class="attribute">visibility</span>: visible;</span><br><span class="line">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.icon-mobile-nav</span> &#123;</span><br><span class="line"></span><br><span class="line">            &amp;<span class="selector-attr">[name=<span class="string">&quot;btn-close&quot;</span>]</span> &#123;</span><br><span class="line">                <span class="attribute">display</span>: block;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            &amp;<span class="selector-attr">[name=<span class="string">&quot;btn-menu&quot;</span>]</span> &#123;</span><br><span class="line">                <span class="attribute">display</span>: none;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="粘性导航栏"><a href="#粘性导航栏" class="headerlink" title="粘性导航栏"></a>粘性导航栏</h2><p>场景：</p>
<p>滚动到顶部时，导航栏在标准流中，滚动到一定位置时，导航栏脱标固定在顶端</p>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ul>
<li>给<strong>body元素</strong>添加css类 <code>sticky</code></li>
<li>滚动到顶部时，移除 <code>sticky</code> 类，否则，加上 <code>sticky</code> 类<ul>
<li>事件应该写在导航栏元素之后的第一个元素（<code>section-hero</code>）</li>
</ul>
</li>
<li>修改元素的样式，使用嵌套选择器 <code>.sticky .xxx</code>，这样就能使sticky元素影响所有的元素<ul>
<li>导航栏的样式要修改<ul>
<li><code>position: fixed</code></li>
</ul>
</li>
<li>导航栏以后第一个元素要（<code>section-hero</code>）加上 <code>margin-top</code> <ul>
<li>值等于导航栏的高度（为了视觉上没有高度抖动）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p><strong>方案1</strong>：IntersectionObserver</p>
<p>见上一篇scroll方案，这个方案丑，放弃了</p>
<p><strong>方案2</strong>：scrollTop</p>
<p>判断scrollTop是不是等于0</p>
<p>JS</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Hero = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [isTop, setIsTop] = useState(<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">scrollHandle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> scrollTop = <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop;</span><br><span class="line">      <span class="comment">// console.log(scrollTop)</span></span><br><span class="line">      <span class="keyword">if</span> (scrollTop === <span class="number">0</span>) &#123;</span><br><span class="line">        setIsTop(<span class="literal">true</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        setIsTop(<span class="literal">false</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;scroll&#x27;</span>, scrollHandle)</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">window</span>.removeEventListener(<span class="string">&#x27;scroll&#x27;</span>, scrollHandle)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;, [])</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isTop) &#123;</span><br><span class="line">      <span class="built_in">document</span>.body.classList.remove(<span class="string">&#x27;sticky&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">document</span>.body.classList.add(<span class="string">&#x27;sticky&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [isTop])</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CSS</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.sticky</span> &#123;</span><br><span class="line">    <span class="selector-class">.header</span> &#123;</span><br><span class="line">        <span class="attribute">position</span>: fixed;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">8rem</span>;</span><br><span class="line">        <span class="attribute">padding-top</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">padding-bottom</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">z-index</span>: <span class="number">9</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: rgba(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.95</span>);</span><br><span class="line">        <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1.2rem</span> <span class="number">3.2rem</span> rgba(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.05</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.section-hero</span> &#123;</span><br><span class="line">        <span class="attribute">margin-top</span>: <span class="number">8rem</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>CSS笔记</category>
        <category>CSS进阶实战</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>响应式</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS进阶实战2：grid使用技巧</title>
    <url>/2022/05/12/CSS/omnifood2_grid/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li>容器属性<ul>
<li>列宽、行高：grid-template-columns | grid-template-rows</li>
<li>间距：row-gap | column-gap | gap</li>
<li>对齐：justify-items | align-items</li>
</ul>
</li>
<li>项目属性<ul>
<li>跨度：grid-row | grid-column</li>
<li>对齐：justify-self | align-self</li>
</ul>
</li>
<li>Flexbox中使用gap属性</li>
</ul>
<span id="more"></span>

<hr>
<blockquote>
<p>参考课程：Build Responsive Real-World Websites with HTML and CSS<br><a href="https://www.bilibili.com/video/BV1A34y1e7wL?p=101&spm_id_from=pageDriver">视频</a> | <a href="https://github.com/jonasschmedtmann/html-css-course">源码</a></p>
</blockquote>
<p>基于React的响应式单页应用开发、优化和部署</p>
<ul>
<li>项目地址：<a href="https://github.com/luryZhu/omnifood">https://github.com/luryZhu/omnifood</a></li>
<li>在线demo：<a href="https://omnifood-lury.netlify.app/">https://omnifood-lury.netlify.app/</a></li>
</ul>
<hr>
<p>参考：</p>
<p><a href="https://ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html">CSS Grid 网格布局教程 - 阮一峰的网络日志</a></p>
<p>grid+less方案</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>(<span class="variable">@col</span>, <span class="variable">@align</span>: unset) &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">column-gap</span>: <span class="number">6.4rem</span>;</span><br><span class="line">    row-gap: 9.6rem;</span><br><span class="line">    grid-template-<span class="attribute">columns</span>: repeat(<span class="variable">@col</span>, <span class="number">1</span>fr);</span><br><span class="line">    <span class="attribute">align-items</span>: <span class="variable">@align</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:not</span>(:last-child) &#123;</span><br><span class="line">        <span class="attribute">margin-bottom</span>: <span class="number">9.6rem</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.grid--col2</span> &#123;</span><br><span class="line">    <span class="selector-class">.grid</span>(<span class="number">2</span>, center);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h1><p>定义在容器上的属性</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">display</span>: grid</span><br></pre></td></tr></table></figure>

<h2 id="grid-template-columns"><a href="#grid-template-columns" class="headerlink" title="grid-template-columns"></a>grid-template-columns</h2><p>该属性定义每一列的列宽（定义行高为grid-template-rows）</p>
<p>列宽的单位可以是：</p>
<ul>
<li>像素：<code>grid-template-columns: 100px 100px 100px</code></li>
<li>百分比：<code>grid-template-columns: 33.3% 33.3% 33.3%</code></li>
<li>fr关键字（fraction），数值表示列之间的宽度比：<code>grid-template-columns: 1fr 1fr 1fr</code></li>
<li>也可以结合使用：<code>grid-template-columns: 150px 1fr 2fr;</code></li>
</ul>
<p>语法糖：</p>
<p><code>repeat()</code>接受两个参数，第一个参数是重复的次数（上例是3），第二个参数是所要重复的值。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">grid-template-<span class="attribute">columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">grid-template-<span class="attribute">columns</span>: <span class="number">33.3%</span> <span class="number">33.3%</span> <span class="number">33.3%</span>;</span><br><span class="line">grid-template-<span class="attribute">columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">grid-template-<span class="attribute">columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line"></span><br><span class="line">grid-template-<span class="attribute">columns</span>: <span class="number">70%</span> <span class="number">30%</span>;</span><br><span class="line">grid-template-<span class="attribute">columns</span>: <span class="number">7</span>fr <span class="number">3</span>fr;</span><br><span class="line"></span><br><span class="line">grid-template-<span class="attribute">columns</span>: <span class="number">150px</span> <span class="number">1</span>fr <span class="number">2</span>fr;  				// px和fr混用</span><br><span class="line">grid-template-<span class="attribute">columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="built_in">minmax</span>(<span class="number">100px</span>, <span class="number">1</span>fr); 	// minmax定义长度范围</span><br><span class="line">grid-template-<span class="attribute">columns</span>: <span class="number">100px</span> auto <span class="number">100px</span>; 			// <span class="attribute">auto</span>自适应</span><br><span class="line">grid-template-<span class="attribute">columns</span>: [c1] <span class="number">100px</span> [c2] <span class="number">100px</span> [c3] auto [c4];	// 可以给网格线命名</span><br></pre></td></tr></table></figure>

<h2 id="row-gap-column-gap-gap"><a href="#row-gap-column-gap-gap" class="headerlink" title="row-gap | column-gap | gap"></a>row-gap | column-gap | gap</h2><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/row-gap"><code>row-gap</code></a> 属性设置行间距</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/column-gap"><code>column-gap</code></a> 属性设置列间距</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/gap"><code>gap</code></a> 属性是用来设置网格行与列之间的间隙，是上面两个的简写<ul>
<li>第一个参数为row-gap，第二个为column-gap</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">row-gap: <span class="number">9.6rem</span>;</span><br><span class="line"><span class="attribute">column-gap</span>: <span class="number">6.4rem</span>;</span><br><span class="line"></span><br><span class="line">gap: <span class="number">9.6rem</span> <span class="number">6.4rem</span>;</span><br></pre></td></tr></table></figure>

<h2 id="justify-items-align-items"><a href="#justify-items-align-items" class="headerlink" title="justify-items | align-items"></a>justify-items | align-items</h2><ul>
<li><p><code>justify-items</code>属性设置单元格内容的水平位置（左中右）</p>
</li>
<li><p><code>align-items</code>属性设置单元格内容的垂直位置（上中下）</p>
</li>
<li><p><code>place-items</code>属性是<code>align-items</code>属性和<code>justify-items</code>属性的合并简写形式</p>
<ul>
<li>第一个参数为align-items，第二个为justify-items</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  justify-items: start | end | center | stretch;</span><br><span class="line">  <span class="attribute">align-items</span>: start | end | center | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关键字含义</p>
<ul>
<li>start：对齐单元格的起始边缘。</li>
<li>end：对齐单元格的结束边缘。</li>
<li>center：单元格内部居中。</li>
<li>stretch：拉伸，占满单元格的整个宽度（默认值）。</li>
</ul>
<h1 id="项目属性"><a href="#项目属性" class="headerlink" title="项目属性"></a>项目属性</h1><p>定义在项目上的属性</p>
<h2 id="grid-row-grid-column"><a href="#grid-row-grid-column" class="headerlink" title="grid-row | grid-column"></a>grid-row | grid-column</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  grid-column: &lt;start-line&gt; / &lt;end-line&gt;;</span><br><span class="line">  grid-row: &lt;start-line&gt; / &lt;end-line&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>两个参数，用斜杠<code>/</code>分隔，以grid-column为例</p>
<ul>
<li>第一个参数是起始列线（从1开始计数）</li>
<li>第二个参数是结束列线</li>
</ul>
<p>斜杠<code>/</code>和后面的第二个参数可省略，表示只跨越一格</p>
<h3 id="顺序"><a href="#顺序" class="headerlink" title="顺序"></a>顺序</h3><p>可以将元素强制显示在某一行</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">grid-row: <span class="number">1</span>;</span><br><span class="line">grid-row: <span class="number">5</span>;</span><br></pre></td></tr></table></figure>

<h3 id="跨度"><a href="#跨度" class="headerlink" title="跨度"></a>跨度</h3><p>span 后面写跨几格</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">grid-row: <span class="number">1</span> / span <span class="number">2</span>;</span><br><span class="line">grid-row: span <span class="number">2</span>;</span><br><span class="line">grid-row: <span class="number">1</span> / <span class="number">3</span>;	// 等效写法</span><br></pre></td></tr></table></figure>

<p>场景：表格第一行分三列，第二行分两列</p>
<ul>
<li>把grid声明为6列</li>
<li>第一行元素跨度2，第二行元素跨度3</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.nav-grid</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: grid; </span><br><span class="line">    grid-template-<span class="attribute">columns</span>: <span class="built_in">repeat</span>(<span class="number">6</span>, <span class="number">1</span>fr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav-col</span> &#123;</span><br><span class="line">    grid-column: span <span class="number">2</span>;</span><br><span class="line">    grid-row: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.addr-col</span> &#123;</span><br><span class="line">    grid-column: span <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;.addr-col&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;.addr-col&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;.nav-col&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;.nav-col&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;.nav-col&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="justify-self-align-self"><a href="#justify-self-align-self" class="headerlink" title="justify-self | align-self"></a>justify-self | align-self</h2><p>对齐，但只作用于单个项目</p>
<ul>
<li><p><code>justify-self</code>属性设置单元格内容的水平位置（左中右）</p>
</li>
<li><p><code>align-self</code>属性设置单元格内容的垂直位置（上中下）</p>
</li>
<li><p><code>place-self</code>属性是<code>align-self</code>属性和<code>justify-self</code>属性的合并简写形式</p>
<ul>
<li>第一个参数为align-self，第二个为justify-self</li>
</ul>
</li>
</ul>
<p>关键字含义</p>
<ul>
<li>start：对齐单元格的起始边缘。</li>
<li>end：对齐单元格的结束边缘。</li>
<li>center：单元格内部居中。</li>
<li>stretch：拉伸，占满单元格的整个宽度（默认值）。</li>
</ul>
<p>场景：grid里三个元素，列数为2，希望单独成行的那一个元素能居中</p>
<p>在单独成行的那个元素上设置css属性：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">    grid-column: <span class="number">1</span> / -<span class="number">1</span>; // 横跨一整行</span><br><span class="line">    justify-self: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="flex-gap"><a href="#flex-gap" class="headerlink" title="flex gap"></a>flex gap</h1><p>Felxbox也可以用gap，用法跟grid一样，但是有些浏览器不兼容</p>
<p><img src="https://github.com/luryZhu/omnifood/blob/main/readme/image-20220513205338975.png?raw=true" alt="image-20220513205338975"></p>
<p>其他写法</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.main-nav-list</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main-nav-list</span> <span class="selector-tag">li</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:last-child</span>) &#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">4.8rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="修复兼容性"><a href="#修复兼容性" class="headerlink" title="修复兼容性"></a>修复兼容性</h2><p>可以在项目中引入以下脚本</p>
<p>原理：</p>
<ul>
<li>检测浏览器是否支持flex gap</li>
<li>如果不支持，在body元素注入no-flexbox-gap类</li>
<li>在对应的css文件中手动写替换的flex样式</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">///////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// Fixing flexbox gap property missing in some Safari versions</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkFlexGap</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;run check felx gap&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> flex = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">    flex.style.display = <span class="string">&quot;flex&quot;</span>;</span><br><span class="line">    flex.style.flexDirection = <span class="string">&quot;column&quot;</span>;</span><br><span class="line">    flex.style.rowGap = <span class="string">&quot;1px&quot;</span>;</span><br><span class="line"></span><br><span class="line">    flex.appendChild(<span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>));</span><br><span class="line">    flex.appendChild(<span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(flex);</span><br><span class="line">    <span class="keyword">var</span> isSupported = flex.scrollHeight === <span class="number">1</span>;</span><br><span class="line">    flex.parentNode.removeChild(flex);</span><br><span class="line">    <span class="built_in">console</span>.log(isSupported);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!isSupported) <span class="built_in">document</span>.body.classList.add(<span class="string">&quot;no-flexbox-gap&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">checkFlexGap();</span><br></pre></td></tr></table></figure>

<p>在css中是以嵌套css类选择器的形式实现</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// CSS</span><br><span class="line"><span class="selector-class">.no-flexbox-gap</span> <span class="selector-class">.main-nav-list</span> <span class="selector-tag">li</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:last-child</span>) &#123;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">4.8rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.no-flexbox-gap</span> <span class="selector-class">.list-item</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:last-child</span>) &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">1.6rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>CSS笔记</category>
        <category>CSS进阶实战</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>grid</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS进阶实战5：兼容性&amp;优化</title>
    <url>/2022/05/14/CSS/omnifood5_optimization/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>考虑兼容性和优化的细节：</p>
<ul>
<li>favicon：适配桌面端、ios和安卓端</li>
<li>图片：选择合适尺寸、使用webp格式、使用srcset适配</li>
</ul>
<p>性能评估工具：LightHouse</p>
<span id="more"></span>

<hr>
<blockquote>
<p>参考课程：Build Responsive Real-World Websites with HTML and CSS<br><a href="https://www.bilibili.com/video/BV1A34y1e7wL?p=101&spm_id_from=pageDriver">视频</a> | <a href="https://github.com/jonasschmedtmann/html-css-course">源码</a></p>
</blockquote>
<p>基于React的响应式单页应用开发、优化和部署</p>
<ul>
<li>项目地址：<a href="https://github.com/luryZhu/omnifood">https://github.com/luryZhu/omnifood</a></li>
<li>在线demo：<a href="https://omnifood-lury.netlify.app/">https://omnifood-lury.netlify.app/</a></li>
</ul>
<hr>
<h1 id="兼容性-amp-优化"><a href="#兼容性-amp-优化" class="headerlink" title="兼容性&amp;优化"></a>兼容性&amp;优化</h1><h2 id="favicon"><a href="#favicon" class="headerlink" title="favicon"></a>favicon</h2><p>react项目中的public目录下</p>
<p><img src="https://github.com/luryZhu/omnifood/blob/main/readme/image-20220512171800884.png?raw=true" alt="image-20220512171800884"></p>
<p>在index.html中设置favicon，不同的端有不同的设置</p>
<p><strong>桌面端</strong></p>
<p>需要对应图片分辨率为64x64</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;%PUBLIC_URL%/favicon.png?raw=true&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>ios</strong></p>
<p>需要对应图片分辨率为180x180</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;apple-touch-icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;%PUBLIC_URL%/apple-touch-icon.png?raw=true&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>android</strong></p>
<p>需要两种图片尺寸192x192，512x512</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;manifest&quot;</span> <span class="attr">href</span>=<span class="string">&quot;%PUBLIC_URL%/manifest.json&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>需要在同目录下的manifest.json文件中配置图片路径</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;short_name&quot;</span>: <span class="string">&quot;Omnifood&quot;</span>,</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Omnifood | Never cook again!&quot;</span>,</span><br><span class="line">  <span class="string">&quot;icons&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;src&quot;</span>: <span class="string">&quot;favicon.png?raw=true&quot;</span>,</span><br><span class="line">      <span class="string">&quot;sizes&quot;</span>: <span class="string">&quot;64x64 32x32 24x24 16x16&quot;</span>,</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;image/x-icon&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;src&quot;</span>: <span class="string">&quot;favicon-192.png?raw=true&quot;</span>,</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;image/png?raw=true&quot;</span>,</span><br><span class="line">      <span class="string">&quot;sizes&quot;</span>: <span class="string">&quot;192x192&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;src&quot;</span>: <span class="string">&quot;favicon-512.png?raw=true&quot;</span>,</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="string">&quot;image/png?raw=true&quot;</span>,</span><br><span class="line">      <span class="string">&quot;sizes&quot;</span>: <span class="string">&quot;512x512&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;start_url&quot;</span>: <span class="string">&quot;.&quot;</span>,</span><br><span class="line">  <span class="string">&quot;display&quot;</span>: <span class="string">&quot;standalone&quot;</span>,</span><br><span class="line">  <span class="string">&quot;theme_color&quot;</span>: <span class="string">&quot;#e67e22&quot;</span>,</span><br><span class="line">  <span class="string">&quot;background_color&quot;</span>: <span class="string">&quot;#fdf2e9&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>查看Network，可以观察到传输了4.1MB的数据，其中大部分是图片，需要对图片进行压缩</p>
<img src="https://github.com/luryZhu/omnifood/blob/main/readme/image-20220512163159155.png?raw=true" alt="image-20220512163159155" style="zoom: 67%;" />

<h3 id="图片尺寸"><a href="#图片尺寸" class="headerlink" title="图片尺寸"></a>图片尺寸</h3><img src="https://github.com/luryZhu/omnifood/blob/main/readme/image-20220512163537771.png?raw=true" alt="image-20220512163537771" style="zoom:50%;" />

<p>通常来说是这样判断，以上图为例：</p>
<ul>
<li>一开始有一张很大的图片</li>
<li>在浏览器里检查图片能够显示的最大宽度（554）</li>
<li>对这个数值四舍五入后×2（600×2&#x3D;1200），以适应二倍屏的手机</li>
</ul>
<h3 id="webp"><a href="#webp" class="headerlink" title="webp"></a>webp</h3><p>使用Google的在线图像压缩工具：<a href="https://squoosh.app/">Squoosh</a></p>
<p>目前最优的图片格式为webp，可以不断调整找到最佳压缩比</p>
<img src="https://github.com/luryZhu/omnifood/blob/main/readme/image-20220512163837227.png?raw=true" alt="image-20220512163837227" style="zoom:50%;" />

<h3 id="srcset"><a href="#srcset" class="headerlink" title="srcset"></a>srcset</h3><p>webp不能在所有浏览器上支持 <a href="https://caniuse.com/?search=webp">https://caniuse.com/?search=webp</a></p>
<p><img src="https://github.com/luryZhu/omnifood/blob/main/readme/image-20220512163959369.png?raw=true" alt="image-20220512163959369"></p>
<p>所以可以使用<code>srcset</code>做兼容</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;picture&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">source</span> <span class="attr">srcSet</span>=<span class="string">&#123;HeroImgWebp&#125;</span> <span class="attr">type</span>=<span class="string">&quot;image/webp&quot;</span> /&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">source</span> <span class="attr">srcSet</span>=<span class="string">&#123;HeroImg&#125;</span> <span class="attr">type</span>=<span class="string">&quot;image/png?raw=true&quot;</span> /&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">className</span>=<span class="string">&quot;hero-img&quot;</span> <span class="attr">src</span>=<span class="string">&#123;HeroImgWebp&#125;</span> <span class="attr">alt</span>=<span class="string">&quot;woman enjoying food&quot;</span> /&gt;</span></span></span><br><span class="line">&lt;/picture&gt;</span><br></pre></td></tr></table></figure>

<p>解读：</p>
<ul>
<li>用picture标签包裹住img标签</li>
<li>source标签声明可以使用的源和类型</li>
<li>img标签中的src属性赋值为想要默认显示的图片，这里设置为webp格式的源</li>
<li>浏览器会根据自己支持的源请求图片</li>
</ul>
<h1 id="LightHouse"><a href="#LightHouse" class="headerlink" title="LightHouse"></a>LightHouse</h1><p>参考</p>
<ul>
<li><a href="https://www.cnblogs.com/wenxuehai/p/14236426.html">性能测评工具lighthouse的使用</a></li>
</ul>
<p>chrome自带的性能评估工具</p>
<ul>
<li>可以选择设备，评估类型，根据报告修改</li>
</ul>
<img src="https://github.com/luryZhu/omnifood/blob/main/readme/image-20220512172821610.png?raw=true" alt="image-20220512172821610" style="zoom: 67%;" />

<img src="https://github.com/luryZhu/omnifood/blob/main/readme/image-20220513165846760.png?raw=true" alt="image-20220513165846760" style="zoom: 67%;" />

<h2 id="性能-Performance"><a href="#性能-Performance" class="headerlink" title="性能 Performance"></a>性能 Performance</h2><h3 id="Properly-size-images"><a href="#Properly-size-images" class="headerlink" title="Properly size images"></a>Properly size images</h3><blockquote>
<p>Serve images that are appropriately-sized to save cellular data and improve load time. <a href="https://web.dev/uses-responsive-images/?utm_source=lighthouse&utm_medium=devtools">Learn more</a>.</p>
</blockquote>
<p>修改图片大小，小窗口不需要大图片</p>
<p><strong>解决方案：</strong>考虑用 <a href="#srcset">srcset</a></p>
<h3 id="Serve-images-in-next-gen-formats"><a href="#Serve-images-in-next-gen-formats" class="headerlink" title="Serve images in next-gen formats"></a>Serve images in next-gen formats</h3><blockquote>
<p>Image formats like WebP and AVIF often provide better compression than png?raw&#x3D;true or JPEG, which means faster downloads and less data consumption. <a href="https://web.dev/uses-webp-images/?utm_source=lighthouse&utm_medium=devtools">Learn more</a>.</p>
</blockquote>
<p><strong>解决方案：</strong>图片推荐使用<strong>webp格式</strong>，参考 <a href="#webp">webp</a></p>
<h3 id="Eliminate-render-blocking-resources"><a href="#Eliminate-render-blocking-resources" class="headerlink" title="Eliminate render-blocking resources"></a>Eliminate render-blocking resources</h3><blockquote>
<p>Resources are blocking the first paint of your page. Consider delivering critical JS&#x2F;CSS inline and deferring all non-critical JS&#x2F;styles. <a href="https://web.dev/render-blocking-resources/?utm_source=lighthouse&utm_medium=devtools">Learn more</a>.</p>
</blockquote>
<p>引入外部的字体和iconfont会这样</p>
<p><strong>解决方案：</strong>todo</p>
<h3 id="Ensure-text-remains-visible-during-webfont-load"><a href="#Ensure-text-remains-visible-during-webfont-load" class="headerlink" title="Ensure text remains visible during webfont load"></a>Ensure text remains visible during webfont load</h3><blockquote>
<p>Leverage the font-display CSS feature to ensure text is user-visible while webfonts are loading. <a href="https://web.dev/font-display/?utm_source=lighthouse&utm_medium=devtools">Learn more</a>.</p>
</blockquote>
<p>引入外部字体和iconfont时会产生这个问题，字体加载会导致文字闪烁</p>
<p><strong>解决方案：</strong>todo</p>
<h3 id="Image-elements-do-not-have-explicit-width-and-height"><a href="#Image-elements-do-not-have-explicit-width-and-height" class="headerlink" title="Image elements do not have explicit width and height"></a>Image elements do not have explicit <code>width</code> and <code>height</code></h3><blockquote>
<p>Set an explicit width and height on image elements to reduce layout shifts and improve CLS. <a href="https://web.dev/optimize-cls/?utm_source=lighthouse&utm_medium=devtools#images-without-dimensions">Learn more</a></p>
</blockquote>
<p>图片没有明确宽高，下载完图片之前浏览器没法知道图片的宽高，会导致布局闪烁</p>
<p><strong>解决方案：</strong></p>
<p>定义img标签时先自带宽高，尽量写得和真实图片一致</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;Meal1&#125;</span> <span class="attr">className</span>=<span class="string">&quot;meal-img&quot;</span> <span class="attr">width</span>=<span class="string">&#123;700&#125;</span> <span class="attr">height</span>=<span class="string">&#123;467&#125;</span> <span class="attr">alt</span>=<span class="string">&quot;Japanese Gyozas&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>在css中，通常是设置宽度100%，这里需要加上高度自动</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.meal-img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>- </p>
<link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>CSS笔记</category>
        <category>CSS进阶实战</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>响应式</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS进阶实战6：netlify部署项目</title>
    <url>/2022/05/14/CSS/omnifood6_deploy/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>使用 <a href="https://www.netlify.com/">netlify</a> 部署React项目，2种方式：</p>
<ul>
<li>直接部署静态资源</li>
<li>关联git仓库动态部署</li>
</ul>
<span id="more"></span>

<hr>
<blockquote>
<p>参考课程：Build Responsive Real-World Websites with HTML and CSS<br><a href="https://www.bilibili.com/video/BV1A34y1e7wL?p=101&spm_id_from=pageDriver">视频</a> | <a href="https://github.com/jonasschmedtmann/html-css-course">源码</a></p>
</blockquote>
<p>基于React的响应式单页应用开发、优化和部署</p>
<ul>
<li>项目地址：<a href="https://github.com/luryZhu/omnifood">https://github.com/luryZhu/omnifood</a></li>
<li>在线demo：<a href="https://omnifood-lury.netlify.app/">https://omnifood-lury.netlify.app/</a></li>
</ul>
<hr>
<h1 id="直接部署静态资源"><a href="#直接部署静态资源" class="headerlink" title="直接部署静态资源"></a>直接部署静态资源</h1><blockquote>
<p>参考：</p>
<ul>
<li>直接部署构建好的静态文件：<a href="https://blog.csdn.net/qq_38586850/article/details/83246606">【React】技巧之用netlify云服务部署react应用</a></li>
<li>创建项目同时部署：<a href="https://www.netlify.com/blog/2016/07/22/deploy-react-apps-in-less-than-30-seconds/">How to deploy React Apps in less than 30 Seconds</a></li>
</ul>
</blockquote>
<p>适用场景：</p>
<ul>
<li>本地已经build构建好静态资源</li>
</ul>
<p>1）构建</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>

<p>2）部署</p>
<p>注册登录netlify</p>
<p><img src="https://github.com/luryZhu/omnifood/blob/main/readme/image-20220513171525838.png?raw=true" alt="image-20220513171525838"></p>
<p>直接把上一步生成的build目录上传就能完成部署</p>
<h1 id="关联git仓库动态部署"><a href="#关联git仓库动态部署" class="headerlink" title="关联git仓库动态部署"></a>关联git仓库动态部署</h1><p>适用场景：</p>
<ul>
<li>本地仓库已经关联到github远程仓库</li>
<li>每次分支推送自动更新并重新部署</li>
</ul>
<p>1）创建git仓库并上传项目</p>
<p>2）部署</p>
<p><img src="https://github.com/luryZhu/omnifood/blob/main/readme/image-20220513171726112.png?raw=true" alt="image-20220513171726112"></p>
<p>github授权后选择要部署的仓库</p>
<img src="https://github.com/luryZhu/omnifood/blob/main/readme/image-20220513171904742.png?raw=true" alt="image-20220513171904742" style="zoom:67%;" />

<p>注意配置：其他默认即可</p>
<ul>
<li>选择要部署的分支</li>
<li>路径改成<code>./build</code></li>
</ul>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>部署失败，可以点击log查看原因</p>
<img src="https://github.com/luryZhu/omnifood/blob/main/readme/image-20220513172225685.png?raw=true" alt="image-20220513172225685" style="zoom: 67%;" />

<h3 id="build失败"><a href="#build失败" class="headerlink" title="build失败"></a>build失败</h3><p><img src="https://github.com/luryZhu/omnifood/blob/main/readme/image-20220513172121854.png?raw=true" alt="image-20220513172121854"></p>
<p>本地可以成功构建，但是在netlify上失败，报错</p>
<blockquote>
<p>Treating warnings as errors because process.env.CI &#x3D; true.<br>Most CI servers set it automatically.</p>
</blockquote>
<p>本质原因是，jenkins使用ESLint代码检查构建时会自动将warn转成成错误</p>
<p><strong>解决方案：</strong></p>
<ol>
<li><p>解决掉ESLint的警告</p>
</li>
<li><p><a href="https://dev.to/kapi1/solved-treating-warnings-as-errors-because-of-process-env-ci-true-bk5">参考</a> CI设置为false，把netlify的构建指令修改为 <code>CI=false npm run build</code></p>
</li>
</ol>
<p><a href="https://github.com/luryZhu/omnifood/blob/main/readme/image-20220428130913950.png?raw=true">https://github.com/luryZhu/omnifood/blob/main/readme/image-20220428130913950.png?raw=true</a><br><img src="https://github.com/luryZhu/omnifood/blob/main/readme/image-20220513173345800.png?raw=true" alt="image-20220513173345800" style="zoom:67%;" /></p>
<h3 id="deploy失败"><a href="#deploy失败" class="headerlink" title="deploy失败"></a>deploy失败</h3><img src="https://github.com/luryZhu/omnifood/blob/main/readme/image-20220513172346200.png?raw=true" alt="image-20220513172346200" style="zoom:67%;" />

<p>找不到deploy目录</p>
<p>原因是配置时没有改部署目录</p>
<p><strong>解决方案：</strong></p>
<p>在setting里面改成<code>./build</code>即可</p>
<img src="https://github.com/luryZhu/omnifood/blob/main/readme/image-20220513173345800.png?raw=true" alt="image-20220513173345800" style="zoom:67%;" /><link rel="stylesheet" href="/css/markmap.css" type="text/css"><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>CSS笔记</category>
        <category>CSS进阶实战</category>
      </categories>
      <tags>
        <tag>部署</tag>
      </tags>
  </entry>
</search>
